// src/core/services/AdminCategoryService.ts - NUEVO

import ApiClient from "../../infrastructure/api/apiClient";
import {API_ENDPOINTS} from "../../constants/apiEndpoints";
import type {
	Category,
	CategoryListResponse,
	CategoryCreationData,
	CategoryUpdateData,
	CategoryFilterParams,
} from "../domain/entities/Category";

/**
 * Servicio de administraci√≥n de categor√≠as - Solo para administradores
 * Permite gestionar cualquier categor√≠a en el sistema usando las rutas de admin
 */
export class AdminCategoryService {
	/**
	 * Obtiene todas las categor√≠as del sistema (como admin)
	 */
	async getAllCategories(
		filterParams?: CategoryFilterParams
	): Promise<CategoryListResponse | null> {
		try {
			console.log(
				"üì§ AdminCategoryService: Obteniendo todas las categor√≠as como admin:",
				filterParams
			);

			// Usar la ruta p√∫blica pero con permisos de admin
			const response = await ApiClient.get<CategoryListResponse>(
				API_ENDPOINTS.CATEGORIES.LIST,
				filterParams
			);

			console.log("üì• AdminCategoryService: Respuesta del servidor:", response);
			return response;
		} catch (error) {
			console.error(
				"‚ùå Error en AdminCategoryService.getAllCategories:",
				error
			);
			return null;
		}
	}

	/**
	 * Obtiene una categor√≠a por ID (como admin)
	 */
	async getCategoryById(id: number): Promise<Category | null> {
		try {
			console.log(
				`üì§ AdminCategoryService: Obteniendo categor√≠a ${id} como admin`
			);

			const response = await ApiClient.get<Category>(
				API_ENDPOINTS.CATEGORIES.DETAILS(id)
			);

			console.log("‚úÖ AdminCategoryService: Categor√≠a obtenida:", response);
			return response;
		} catch (error) {
			console.error("‚ùå Error en AdminCategoryService.getCategoryById:", error);
			return null;
		}
	}

	/**
	 * Crea una categor√≠a (como admin)
	 */
	async createCategory(data: CategoryCreationData): Promise<Category | null> {
		try {
			console.log(
				"üì§ AdminCategoryService: Creando categor√≠a como admin:",
				data
			);

			// USAR RUTA ADMIN ESPEC√çFICA
			const response = await ApiClient.post<Category>(
				API_ENDPOINTS.ADMIN.CATEGORIES.CREATE,
				data
			);

			console.log("‚úÖ AdminCategoryService: Categor√≠a creada:", response);
			return response;
		} catch (error) {
			console.error("‚ùå Error en AdminCategoryService.createCategory:", error);
			return null;
		}
	}

	/**
	 * Actualiza cualquier categor√≠a (como admin)
	 */
	async updateCategory(data: CategoryUpdateData): Promise<Category | null> {
		try {
			console.log(
				`üì§ AdminCategoryService: Actualizando categor√≠a ${data.id} como admin:`,
				data
			);

			if (!data.id) {
				throw new Error("ID de categor√≠a requerido para actualizaci√≥n");
			}

			// USAR RUTA ADMIN ESPEC√çFICA
			const response = await ApiClient.put<Category>(
				API_ENDPOINTS.ADMIN.CATEGORIES.UPDATE(data.id),
				data
			);

			console.log("‚úÖ AdminCategoryService: Categor√≠a actualizada:", response);
			return response;
		} catch (error) {
			console.error("‚ùå Error en AdminCategoryService.updateCategory:", error);
			return null;
		}
	}

	/**
	 * Actualizaci√≥n parcial de categor√≠a (como admin) - PATCH
	 */
	async partialUpdateCategory(
		id: number,
		data: Partial<CategoryUpdateData>
	): Promise<Category | null> {
		try {
			console.log(
				`üì§ AdminCategoryService: Actualizando parcialmente categor√≠a ${id} como admin:`,
				data
			);

			// USAR RUTA ADMIN PATCH ESPEC√çFICA
			const response = await ApiClient.patch<Category>(
				API_ENDPOINTS.ADMIN.CATEGORIES.PARTIAL_UPDATE(id),
				data
			);

			console.log(
				"‚úÖ AdminCategoryService: Categor√≠a actualizada parcialmente:",
				response
			);
			return response;
		} catch (error) {
			console.error(
				"‚ùå Error en AdminCategoryService.partialUpdateCategory:",
				error
			);
			return null;
		}
	}

	/**
	 * Elimina cualquier categor√≠a (como admin)
	 */
	async deleteCategory(id: number): Promise<boolean> {
		try {
			console.log(
				`üì§ AdminCategoryService: Eliminando categor√≠a ${id} como admin`
			);

			// USAR RUTA ADMIN ESPEC√çFICA
			const response = await ApiClient.delete(
				API_ENDPOINTS.ADMIN.CATEGORIES.DELETE(id)
			);

			console.log("‚úÖ AdminCategoryService: Categor√≠a eliminada:", response);
			return true;
		} catch (error) {
			console.error("‚ùå Error en AdminCategoryService.deleteCategory:", error);
			return false;
		}
	}

	/**
	 * Cambia el estado activo de una categor√≠a - PATCH
	 */
	async toggleActive(id: number, is_active: boolean): Promise<boolean> {
		try {
			console.log(
				`üì§ AdminCategoryService: Cambiando estado activo de categor√≠a ${id} a ${is_active}`
			);

			// USAR RUTA ADMIN PATCH ESPEC√çFICA
			const response = await ApiClient.patch(
				API_ENDPOINTS.ADMIN.CATEGORIES.PARTIAL_UPDATE(id),
				{is_active: is_active}
			);

			console.log(
				"‚úÖ AdminCategoryService: Estado activo actualizado:",
				response
			);
			return true;
		} catch (error) {
			console.error("‚ùå Error en AdminCategoryService.toggleActive:", error);
			if (error instanceof Error) {
				console.error("Error message:", error.message);
			}
			return false;
		}
	}

	/**
	 * Cambia el estado destacado de una categor√≠a - PATCH
	 */
	async toggleFeatured(id: number, featured: boolean): Promise<boolean> {
		try {
			console.log(
				`üì§ AdminCategoryService: Cambiando estado destacado de categor√≠a ${id} a ${featured}`
			);

			// USAR RUTA ADMIN PATCH ESPEC√çFICA
			const response = await ApiClient.patch(
				API_ENDPOINTS.ADMIN.CATEGORIES.PARTIAL_UPDATE(id),
				{featured: featured}
			);

			console.log(
				"‚úÖ AdminCategoryService: Estado destacado actualizado:",
				response
			);
			return true;
		} catch (error) {
			console.error("‚ùå Error en AdminCategoryService.toggleFeatured:", error);
			if (error instanceof Error) {
				console.error("Error message:", error.message);
			}
			return false;
		}
	}

	/**
	 * Actualiza el orden de una categor√≠a - PATCH
	 */
	async updateOrder(id: number, order: number): Promise<boolean> {
		try {
			console.log(
				`üì§ AdminCategoryService: Actualizando orden de categor√≠a ${id} a ${order}`
			);

			// USAR RUTA ADMIN PATCH ESPEC√çFICA
			const response = await ApiClient.patch(
				API_ENDPOINTS.ADMIN.CATEGORIES.PARTIAL_UPDATE(id),
				{order: order}
			);

			console.log("‚úÖ AdminCategoryService: Orden actualizado:", response);
			return true;
		} catch (error) {
			console.error("‚ùå Error en AdminCategoryService.updateOrder:", error);
			if (error instanceof Error) {
				console.error("Error message:", error.message);
			}
			return false;
		}
	}

	/**
	 * Obtiene categor√≠as principales (como admin)
	 */
	async getMainCategories(withCounts: boolean = true): Promise<Category[]> {
		try {
			console.log(
				"üì§ AdminCategoryService: Obteniendo categor√≠as principales como admin"
			);

			const response = await ApiClient.get<{data: Category[]}>(
				API_ENDPOINTS.CATEGORIES.MAIN,
				{with_counts: withCounts}
			);

			console.log(
				"‚úÖ AdminCategoryService: Categor√≠as principales obtenidas:",
				response
			);
			return response?.data || [];
		} catch (error) {
			console.error(
				"‚ùå Error en AdminCategoryService.getMainCategories:",
				error
			);
			return [];
		}
	}

	/**
	 * Obtiene subcategor√≠as de una categor√≠a (como admin)
	 */
	async getSubcategories(parentId: number): Promise<Category[]> {
		try {
			console.log(
				`üì§ AdminCategoryService: Obteniendo subcategor√≠as de ${parentId} como admin`
			);

			const response = await ApiClient.get<{data: Category[]}>(
				API_ENDPOINTS.CATEGORIES.SUBCATEGORIES(parentId)
			);

			console.log(
				"‚úÖ AdminCategoryService: Subcategor√≠as obtenidas:",
				response
			);
			return response?.data || [];
		} catch (error) {
			console.error(
				"‚ùå Error en AdminCategoryService.getSubcategories:",
				error
			);
			return [];
		}
	}
}

export default AdminCategoryService;
