import React, {useState, useRef, useEffect} from "react";
import type {FormEvent, KeyboardEvent} from "react";
import {Send, Loader2, Smile, Search, Clock} from "lucide-react";
import { useTypingIndicator } from "../../hooks/useRealTimeChat";

interface MessageFormProps {
	onSendMessage: (message: string) => Promise<boolean>;
	isDisabled?: boolean;
	disabledText?: string;
	placeholder?: string;
	isLoading?: boolean;
	chatId?: number; // Para el indicador de escritura
}

// Lista expandida de emojis organizados por categor√≠as
const EMOJI_CATEGORIES = {
	"Frecuentes": {
		icon: "üïí",
		emojis: ["üòä", "üòÇ", "‚ù§Ô∏è", "üëç", "üëå", "üôè", "üòç", "üéâ", "ü§î", "üò≠", "üî•", "üí™"]
	},
	"Emociones": {
		icon: "üòä",
		emojis: [
			"üòÄ", "üòÉ", "üòÑ", "üòÅ", "üòÜ", "üòÖ", "üòÇ", "ü§£", "üòä", "üòá", "üôÇ", "üôÉ", 
			"üòâ", "üòå", "üòç", "ü•∞", "üòò", "üòó", "üòô", "üòö", "üòã", "üòõ", "üòù", "üòú", 
			"ü§™", "ü§®", "üßê", "ü§ì", "üòé", "ü§©", "ü•≥", "üòè", "üòí", "üòû", "üòî", "üòü", 
			"üòï", "üôÅ", "‚òπÔ∏è", "üò£", "üòñ", "üò´", "üò©", "ü•∫", "üò¢", "üò≠", "üò§", "üò†", 
			"üò°", "ü§¨", "ü§Ø", "üò≥", "ü•µ", "ü•∂", "üò±", "üò®", "üò∞", "üò•", "üòì", "ü§ó", 
			"ü§î", "ü§≠", "ü§´", "ü§•", "üò∂", "üòê", "üòë", "üò¨", "üôÑ", "üòØ", "üò¶", "üòß", 
			"üòÆ", "üò≤", "ü•±", "üò¥", "ü§§", "üò™", "üòµ", "ü§ê", "ü•¥", "ü§¢", "ü§Æ", "ü§ß", 
			"üò∑", "ü§í", "ü§ï"
		]
	},
	"Gestos": {
		icon: "üëç",
		emojis: [
			"üëç", "üëé", "üëå", "ü§å", "ü§è", "‚úåÔ∏è", "ü§û", "ü§ü", "ü§ò", "ü§ô", "üëà", "üëâ", 
			"üëÜ", "üñï", "üëá", "‚òùÔ∏è", "üëè", "üôå", "üëê", "ü§≤", "ü§ù", "üôè", "‚úçÔ∏è", "üíÖ", 
			"ü§≥", "üí™", "ü¶æ", "ü¶ø", "ü¶µ", "ü¶∂", "üëÇ", "ü¶ª", "üëÉ", "üß†", "ü´Ä", "ü´Å", 
			"ü¶∑", "ü¶¥", "üëÄ", "üëÅÔ∏è", "üëÖ", "üëÑ", "üíã"
		]
	},
	"Objetos": {
		icon: "‚ù§Ô∏è",
		emojis: [
			"‚ù§Ô∏è", "üß°", "üíõ", "üíö", "üíô", "üíú", "üñ§", "ü§ç", "ü§é", "üíî", "‚ù£Ô∏è", "üíï", 
			"üíû", "üíì", "üíó", "üíñ", "üíò", "üíù", "üíü", "‚òÆÔ∏è", "‚úùÔ∏è", "‚ò™Ô∏è", "üïâÔ∏è", "‚ò∏Ô∏è", 
			"‚ú°Ô∏è", "üîØ", "üïé", "‚òØÔ∏è", "‚ò¶Ô∏è", "üõê", "‚õé", "‚ôà", "‚ôâ", "‚ôä", "‚ôã", "‚ôå", "‚ôç", 
			"‚ôé", "‚ôè", "‚ôê", "‚ôë", "‚ôí", "‚ôì", "üî•", "üíØ", "üí¢", "üí¶", "üí®", "üéâ", "üéä", 
			"üéà", "üéÅ", "üèÜ", "ü•á", "ü•à", "ü•â", "‚≠ê", "üåü", "üí´", "‚ú®"
		]
	},
	"Animales": {
		icon: "üê∂",
		emojis: [
			"üê∂", "üê±", "üê≠", "üêπ", "üê∞", "ü¶ä", "üêª", "üêº", "üêª‚Äç‚ùÑÔ∏è", "üê®", "üêØ", "ü¶Å", 
			"üêÆ", "üê∑", "üêΩ", "üê∏", "üêµ", "üôà", "üôâ", "üôä", "üêí", "üêî", "üêß", "üê¶", 
			"üê§", "üê£", "üê•", "ü¶Ü", "ü¶Ö", "ü¶â", "ü¶á", "üê∫", "üêó", "üê¥", "ü¶Ñ", "üêù", 
			"üêõ", "ü¶ã", "üêå", "üêû", "üêú", "ü¶ü", "ü¶ó", "üï∑Ô∏è", "ü¶Ç", "üê¢", "üêç", "ü¶é", 
			"ü¶ñ", "ü¶ï", "üêô", "ü¶ë", "ü¶ê", "ü¶û", "ü¶Ä", "üê°", "üê†", "üêü", "üê¨", "üê≥", 
			"üêã", "ü¶à", "üêä", "üêÖ", "üêÜ", "ü¶ì", "ü¶ç", "ü¶ß", "üêò", "ü¶£", "ü¶è", "ü¶õ", 
			"üê™", "üê´", "ü¶í", "ü¶ò", "üêÉ", "üêÇ", "üêÑ", "üêé", "üêñ", "üêè", "üêë", "ü¶ô", 
			"üêê", "ü¶å", "üêï", "üê©", "ü¶Æ", "üêï‚Äçü¶∫", "üêà", "üêà‚Äç‚¨õ", "üêì", "ü¶É", "ü¶ö", "ü¶ú", 
			"ü¶¢", "ü¶©", "üïäÔ∏è", "üêá", "ü¶ù", "ü¶®", "ü¶°", "ü¶¶", "ü¶•", "üêÅ", "üêÄ", "üêøÔ∏è"
		]
	},
	"Comida": {
		icon: "üçï",
		emojis: [
			"üçé", "üçè", "üçê", "üçä", "üçã", "üçå", "üçâ", "üçá", "üçì", "ü´ê", "üçà", "üçí", 
			"üçë", "ü•≠", "üçç", "ü••", "ü•ù", "üçÖ", "üçÜ", "ü•ë", "ü•¶", "ü•¨", "ü•í", "üå∂Ô∏è", 
			"ü´ë", "üåΩ", "ü•ï", "ü´í", "üßÑ", "üßÖ", "ü•î", "üç†", "ü•ê", "ü•Ø", "üçû", "ü•ñ", 
			"ü•®", "üßÄ", "ü•ö", "üç≥", "üßà", "ü•û", "üßá", "ü•ì", "ü•©", "üçó", "üçñ", "ü¶¥", 
			"üå≠", "üçî", "üçü", "üçï", "ü´ì", "ü•™", "ü•ô", "üßÜ", "üåÆ", "üåØ", "ü´î", "ü•ó", 
			"ü•ò", "ü´ï", "ü•´", "üçù", "üçú", "üç≤", "üçõ", "üç£", "üç±", "ü•ü", "ü¶™", "üç§", 
			"üçô", "üçö", "üçò", "üç•", "ü•†", "ü•Æ", "üç¢", "üç°", "üçß", "üç®", "üç¶", "ü•ß", 
			"üßÅ", "üç∞", "üéÇ", "üçÆ", "üç≠", "üç¨", "üç´", "üçø", "üç©", "üç™", "üå∞", "ü•ú"
		]
	},
	"Actividades": {
		icon: "‚öΩ",
		emojis: [
			"‚öΩ", "üèÄ", "üèà", "‚öæ", "ü•é", "üéæ", "üèê", "üèâ", "ü•è", "üé±", "ü™Ä", "üèì", 
			"üè∏", "üèë", "üèí", "ü•ç", "üèè", "ü™É", "ü•Ö", "‚õ≥", "ü™Å", "üèπ", "üé£", "ü§ø", 
			"ü•ä", "ü•ã", "üéΩ", "üõπ", "üõ∑", "‚õ∏Ô∏è", "ü•å", "üéø", "‚õ∑Ô∏è", "üèÇ", "ü™Ç", "üèãÔ∏è", 
			"ü§º", "ü§∏", "‚õπÔ∏è", "ü§∫", "üèåÔ∏è", "üèá", "üßò", "üèÑ", "üèä", "ü§Ω", "üö£", "üßó", 
			"üöµ", "üö¥", "üèÜ", "ü•á", "ü•à", "ü•â", "üèÖ", "üéñÔ∏è", "üèµÔ∏è", "üéóÔ∏è", "üé´", "üéüÔ∏è", 
			"üé™", "ü§π", "üé≠", "ü©∞", "üé®", "üé¨", "üé§", "üéß", "üéº", "üéµ", "üé∂", "üéπ", 
			"ü•Å", "üé∑", "üé∫", "üé∏", "ü™ï", "üéª", "üé≤", "‚ô†Ô∏è", "‚ô•Ô∏è", "‚ô¶Ô∏è", "‚ô£Ô∏è", "‚ôüÔ∏è", 
			"üÉè", "üÄÑ", "üé¥", "üéÆ", "üïπÔ∏è", "üéØ"
		]
	},
	"Viajes": {
		icon: "‚úàÔ∏è",
		emojis: [
			"üöó", "üöï", "üöô", "üöå", "üöé", "üèéÔ∏è", "üöì", "üöë", "üöí", "üöê", "üõª", "üöö", 
			"üöõ", "üöú", "üèçÔ∏è", "üõµ", "üö≤", "üõ¥", "üõπ", "üõº", "üöÅ", "üõ∏", "‚úàÔ∏è", "üõ©Ô∏è", 
			"üõ´", "üõ¨", "ü™Ç", "‚õµ", "üö§", "üõ•Ô∏è", "üõ≥Ô∏è", "‚õ¥Ô∏è", "üö¢", "‚öì", "‚õΩ", "üöß", 
			"üö¶", "üö•", "üöè", "üó∫Ô∏è", "üé°", "üé¢", "üé†", "‚õ≤", "‚õ±Ô∏è", "üèñÔ∏è", "üèùÔ∏è", "üèúÔ∏è", 
			"üåã", "‚õ∞Ô∏è", "üèîÔ∏è", "üóª", "üèïÔ∏è", "‚õ∫", "üè†", "üè°", "üèòÔ∏è", "üèöÔ∏è", "üèóÔ∏è", "üè≠", 
			"üè¢", "üè¨", "üè£", "üè§", "üè•", "üè¶", "üè®", "üè™", "üè´", "üè©", "üíí", "üèõÔ∏è", 
			"‚õ™", "üïå", "üõï", "üïç", "üïã", "‚õ©Ô∏è", "üõ§Ô∏è", "üõ£Ô∏è", "üóæ", "üéë", "üèûÔ∏è", "üåÖ", 
			"üåÑ", "üå†", "üéá", "üéÜ", "üåá", "üåÜ", "üèôÔ∏è", "üåÉ", "üåå", "üåâ", "üåÅ"
		]
	}
};

// Lista de emojis frecuentes que se actualiza din√°micamente
const getFrequentEmojis = () => {
	try {
		const stored = localStorage.getItem('frequent-emojis');
		if (stored) {
			const frequent = JSON.parse(stored);
			return frequent.slice(0, 12); // Solo los 12 m√°s frecuentes
		}
	} catch (error) {
		console.error('Error loading frequent emojis:', error);
	}
	return EMOJI_CATEGORIES["Frecuentes"].emojis;
};

// Funci√≥n para guardar uso de emoji
const saveEmojiUsage = (emoji: string) => {
	try {
		const stored = localStorage.getItem('frequent-emojis');
		let frequent: string[] = stored ? JSON.parse(stored) : [];
		
		// Remover si ya existe y agregarlo al principio
		frequent = frequent.filter(e => e !== emoji);
		frequent.unshift(emoji);
		
		// Mantener solo los 20 m√°s frecuentes
		frequent = frequent.slice(0, 20);
		
		localStorage.setItem('frequent-emojis', JSON.stringify(frequent));
	} catch (error) {
		console.error('Error saving emoji usage:', error);
	}
};

const MessageForm: React.FC<MessageFormProps> = ({
	onSendMessage,
	isDisabled = false,
	disabledText = "Esta conversaci√≥n est√° cerrada",
	placeholder = "Escribe un mensaje...",
	isLoading = false,
	chatId,
}) => {
	const [message, setMessage] = useState("");
	const [error, setError] = useState<string | null>(null);
	const [showEmojiPicker, setShowEmojiPicker] = useState(false);
	const [selectedCategory, setSelectedCategory] = useState("Frecuentes");
	const [emojiSearch, setEmojiSearch] = useState("");
	const [recentEmojis, setRecentEmojis] = useState<string[]>(() => getFrequentEmojis());
	
	const textareaRef = useRef<HTMLTextAreaElement>(null);
	const emojiPickerRef = useRef<HTMLDivElement>(null);
	const emojiSearchRef = useRef<HTMLInputElement>(null);
	const isMounted = useRef(true);

	// Hook para indicador de escritura
	const { startTyping, stopTyping } = useTypingIndicator(chatId);

	useEffect(() => {
		return () => {
			isMounted.current = false;
			// Detener indicador de escritura al desmontar
			stopTyping();
		};
	}, [stopTyping]);

	// Actualizar emojis frecuentes cuando se abre el picker
	useEffect(() => {
		if (showEmojiPicker) {
			setRecentEmojis(getFrequentEmojis());
		}
	}, [showEmojiPicker]);

	// Al montar el componente, enfocar el textarea
	useEffect(() => {
		if (textareaRef.current && !isDisabled) {
			textareaRef.current.focus();
		}
	}, [isDisabled]);

	// Cerrar emoji picker cuando se hace clic fuera
	useEffect(() => {
		const handleClickOutside = (event: MouseEvent) => {
			if (emojiPickerRef.current && !emojiPickerRef.current.contains(event.target as Node)) {
				setShowEmojiPicker(false);
				setEmojiSearch("");
			}
		};

		if (showEmojiPicker) {
			document.addEventListener("mousedown", handleClickOutside);
		}

		return () => {
			document.removeEventListener("mousedown", handleClickOutside);
		};
	}, [showEmojiPicker]);

	// Focus en b√∫squeda cuando se abre el picker
	useEffect(() => {
		if (showEmojiPicker && emojiSearchRef.current) {
			setTimeout(() => {
				emojiSearchRef.current?.focus();
			}, 100);
		}
	}, [showEmojiPicker]);

	const handleSubmit = async (e: FormEvent) => {
		e.preventDefault();

		setError(null);

		if (isDisabled || isLoading || !message.trim()) {
			console.log("Env√≠o bloqueado:", {
				isDisabled,
				isLoading,
				messageEmpty: !message.trim(),
			});
			return;
		}

		const messageToSend = message.trim();

		// Detener indicador de escritura
		stopTyping();

		try {
			console.log("Enviando mensaje:", messageToSend);
			const success = await onSendMessage(messageToSend);

			if (isMounted.current) {
				if (success) {
					console.log("Mensaje enviado correctamente");
					setMessage("");
					// Reset altura del textarea
					if (textareaRef.current) {
						textareaRef.current.style.height = "auto";
						textareaRef.current.focus();
					}
				} else {
					console.error("Error al enviar mensaje");
					setError("No se pudo enviar el mensaje. Int√©ntalo de nuevo.");
				}
			}
		} catch (error) {
			console.error("Error al enviar mensaje:", error);
			if (isMounted.current) {
				setError("Error al enviar mensaje. Por favor, int√©ntalo de nuevo.");
			}
		}
	};

	const handleKeyDown = (e: KeyboardEvent<HTMLTextAreaElement>) => {
		if (error) {
			setError(null);
		}

		// Enviar con Ctrl+Enter o Cmd+Enter (Mac)
		if ((e.ctrlKey || e.metaKey) && e.key === "Enter") {
			e.preventDefault();
			handleSubmit(e);
		}
	};

	// Ajustar altura autom√°ticamente y activar indicador de escritura
	const autoAdjustHeight = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
		const textarea = e.target;
		const newValue = textarea.value;

		textarea.style.height = "auto";

		const newHeight = Math.min(Math.max(textarea.scrollHeight, 40), 150);
		textarea.style.height = `${newHeight}px`;

		setMessage(newValue);

		// Manejar indicador de escritura
		if (newValue.trim() && !isDisabled && !isLoading) {
			startTyping();
		} else if (!newValue.trim()) {
			stopTyping();
		}
	};

	// Insertar emoji en el mensaje
	const insertEmoji = (emoji: string) => {
		const textarea = textareaRef.current;
		if (!textarea) return;

		const start = textarea.selectionStart;
		const end = textarea.selectionEnd;
		const newMessage = message.slice(0, start) + emoji + message.slice(end);
		
		setMessage(newMessage);
		
		// Guardar uso del emoji
		saveEmojiUsage(emoji);
		
		// Restaurar la posici√≥n del cursor despu√©s del emoji
		setTimeout(() => {
			if (textarea) {
				textarea.focus();
				textarea.setSelectionRange(start + emoji.length, start + emoji.length);
				// Reajustar altura
				textarea.style.height = "auto";
				const newHeight = Math.min(Math.max(textarea.scrollHeight, 40), 150);
				textarea.style.height = `${newHeight}px`;
			}
		}, 0);
	};

	// Filtrar emojis por b√∫squeda
	const getFilteredEmojis = (categoryEmojis: string[]) => {
		if (!emojiSearch.trim()) return categoryEmojis;
		
		// Buscar por el texto del emoji (muy b√°sico)
		return categoryEmojis.filter(emoji => {
			// Aqu√≠ podr√≠as implementar una b√∫squeda m√°s sofisticada con nombres de emojis
			return emoji.includes(emojiSearch.trim());
		});
	};

	// Obtener emojis de la categor√≠a actual
	const getCurrentEmojis = () => {
		if (selectedCategory === "Frecuentes") {
			return getFilteredEmojis(recentEmojis);
		}
		return getFilteredEmojis(EMOJI_CATEGORIES[selectedCategory as keyof typeof EMOJI_CATEGORIES].emojis);
	};

	// Si el chat est√° deshabilitado, mostrar mensaje informativo
	if (isDisabled) {
		return (
			<div className="p-4 border-t border-gray-200 bg-gray-50">
				<div className="flex items-center justify-center space-x-2 text-gray-500">
					<Clock size={16} />
					<p className="text-sm">{disabledText}</p>
				</div>
			</div>
		);
	}

	return (
		<div className="p-4 border-t border-gray-200 bg-white relative">
			{error && (
				<div className="mb-3 p-3 bg-red-50 border border-red-200 text-red-600 text-sm rounded-lg flex items-start space-x-2">
					<div className="flex-shrink-0 mt-0.5">
						‚ö†Ô∏è
					</div>
					<div className="flex-1">
						{error}
					</div>
					<button 
						onClick={() => setError(null)}
						className="flex-shrink-0 text-red-400 hover:text-red-600"
					>
						√ó
					</button>
				</div>
			)}

			{/* Emoji Picker Mejorado */}
			{showEmojiPicker && (
				<div 
					ref={emojiPickerRef}
					className="absolute bottom-full left-4 right-4 mb-2 bg-white border border-gray-300 rounded-xl shadow-xl z-50 overflow-hidden"
					style={{ maxHeight: '320px' }}
				>
					{/* Header con b√∫squeda */}
					<div className="p-3 border-b border-gray-200 bg-gray-50">
						<div className="relative">
							<Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" size={16} />
							<input
								ref={emojiSearchRef}
								type="text"
								placeholder="Buscar emojis..."
								value={emojiSearch}
								onChange={(e) => setEmojiSearch(e.target.value)}
								className="w-full pl-10 pr-4 py-2 text-sm border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500"
							/>
						</div>
					</div>

					{/* Pesta√±as de categor√≠as */}
					<div className="border-b border-gray-200 bg-gray-50">
						<div className="flex overflow-x-auto scrollbar-hide">
							{Object.entries(EMOJI_CATEGORIES).map(([categoryName, categoryData]) => (
								<button
									key={categoryName}
									onClick={() => {
										setSelectedCategory(categoryName);
										setEmojiSearch("");
									}}
									className={`flex-shrink-0 px-3 py-2 text-lg hover:bg-gray-100 transition-colors ${
										selectedCategory === categoryName
											? "bg-primary-100 border-b-2 border-primary-500"
											: ""
									}`}
									title={categoryName}
								>
									{categoryName === "Frecuentes" ? "üïí" : categoryData.icon}
								</button>
							))}
						</div>
					</div>

					{/* Grid de emojis */}
					<div className="p-2 max-h-48 overflow-y-auto">
						<div className="grid grid-cols-8 gap-1">
							{getCurrentEmojis().map((emoji, index) => (
								<button
									key={`${emoji}-${index}`}
									onClick={() => {
										insertEmoji(emoji);
										// No cerrar el picker autom√°ticamente para permitir m√∫ltiples selecciones
									}}
									className="p-2 text-lg hover:bg-gray-100 rounded-lg transition-colors transform hover:scale-110 active:scale-95"
									title={emoji}
								>
									{emoji}
								</button>
							))}
						</div>
						
						{getCurrentEmojis().length === 0 && (
							<div className="text-center py-8 text-gray-500">
								<div className="text-2xl mb-2">üîç</div>
								<p className="text-sm">No se encontraron emojis</p>
							</div>
						)}
					</div>

					{/* Footer */}
					<div className="p-2 border-t border-gray-200 bg-gray-50 text-center">
						<button
							onClick={() => setShowEmojiPicker(false)}
							className="text-xs text-gray-500 hover:text-gray-700"
						>
							Presiona ESC para cerrar
						</button>
					</div>
				</div>
			)}

			<form onSubmit={handleSubmit} className="flex items-end space-x-3">
				{/* Bot√≥n de emojis */}
				<button
					type="button"
					onClick={() => setShowEmojiPicker(!showEmojiPicker)}
					className={`flex-shrink-0 p-2 rounded-full transition-colors ${
						showEmojiPicker 
							? "bg-primary-100 text-primary-600" 
							: "text-gray-500 hover:text-gray-700 hover:bg-gray-100"
					}`}
					disabled={isLoading}
					title="Insertar emoji"
				>
					<Smile size={20} />
				</button>

				{/* Campo de texto */}
				<div className="flex-1">
					<textarea
						ref={textareaRef}
						value={message}
						onChange={autoAdjustHeight}
						onKeyDown={handleKeyDown}
						placeholder={placeholder}
						className="w-full border border-gray-300 rounded-2xl px-4 py-3 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500 resize-none scrollbar-thin scrollbar-thumb-gray-300 scrollbar-track-transparent"
						rows={1}
						style={{minHeight: "44px", maxHeight: "150px"}}
						disabled={isLoading}
					/>
					<div className="flex items-center justify-between mt-1 px-1">
						<p className="text-xs text-gray-500">
							{isLoading ? "Enviando..." : "Ctrl+Enter para enviar"}
						</p>
						{message.length > 0 && (
							<p className="text-xs text-gray-400">
								{message.length}/2000
							</p>
						)}
					</div>
				</div>

				{/* Bot√≥n de env√≠o */}
				<button
					type="submit"
					className={`flex-shrink-0 h-11 w-11 rounded-full flex items-center justify-center transition-all transform ${
						message.trim() && !isLoading
							? "bg-primary-600 text-white hover:bg-primary-700 hover:scale-105 active:scale-95 shadow-lg"
							: "bg-gray-300 text-gray-600 cursor-not-allowed"
					}`}
					disabled={!message.trim() || isLoading}
					title={isLoading ? "Enviando..." : "Enviar mensaje"}
				>
					{isLoading ? (
						<Loader2 className="h-5 w-5 animate-spin" />
					) : (
						<Send size={18} />
					)}
				</button>
			</form>

			{/* Atajos de teclado */}
			{showEmojiPicker && (
				<div 
					className="fixed inset-0 z-40" 
					onClick={() => setShowEmojiPicker(false)}
					onKeyDown={(e) => {
						if (e.key === 'Escape') {
							setShowEmojiPicker(false);
						}
					}}
					tabIndex={-1}
				/>
			)}
		</div>
	);
};

export default MessageForm;