import { ApiClient } from '../api/apiClient';

/**
 * Servicio avanzado para tracking de interacciones de usuario
 * Utiliza los nuevos endpoints del backend para recomendaciones
 */
export class TrackingService {
  private static readonly BASE_PATH = '/recommendations';
  
  /**
   * Verifica si el usuario est√° autenticado
   */
  private static isAuthenticated(): boolean {
    const token = localStorage.getItem('auth_token');
    return !!(token && token.trim() !== '');
  }

  /**
   * Registra tiempo que el usuario pasa en una p√°gina de producto
   */
  public static async trackPageTime(
    productId: number,
    timeSpent: number,
    pageType: 'product' | 'category' | 'search' = 'product',
    additionalData: Record<string, any> = {}
  ): Promise<void> {
    if (!this.isAuthenticated() || timeSpent < 5) return; // M√≠nimo 5 segundos
    
    try {
      console.log('üìä TrackingService: Registrando tiempo en p√°gina:', {
        productId,
        timeSpent,
        pageType
      });

      await ApiClient.post(`${this.BASE_PATH}/track-page-time`, {
        product_id: productId,
        time_spent: timeSpent,
        page_type: pageType,
        additional_data: {
          timestamp: new Date().toISOString(),
          ...additionalData
        }
      });

      console.log('‚úÖ TrackingService: Tiempo en p√°gina registrado');
    } catch (error) {
      console.error('‚ùå TrackingService: Error registrando tiempo en p√°gina:', error);
    }
  }

  /**
   * Registra b√∫squedas del usuario
   */
  public static async trackSearch(
    searchTerm: string,
    resultsCount: number = 0,
    clickedProductId?: number,
    searchFilters: Record<string, any> = {}
  ): Promise<void> {
    if (!this.isAuthenticated() || !searchTerm.trim()) return;
    
    try {
      console.log('üîç TrackingService: Registrando b√∫squeda:', {
        searchTerm,
        resultsCount,
        clickedProductId
      });

      await ApiClient.post(`${this.BASE_PATH}/track-search`, {
        search_term: searchTerm.trim(),
        results_count: resultsCount,
        clicked_product_id: clickedProductId,
        search_filters: searchFilters
      });

      console.log('‚úÖ TrackingService: B√∫squeda registrada');
    } catch (error) {
      console.error('‚ùå TrackingService: Error registrando b√∫squeda:', error);
    }
  }

  /**
   * Registra clicks en productos desde diferentes fuentes
   */
  public static async trackProductClick(
    productId: number,
    source: string, // 'featured', 'trending', 'category', 'search', etc.
    position?: number,
    section?: string
  ): Promise<void> {
    if (!this.isAuthenticated()) return;
    
    try {
      console.log('üëÜ TrackingService: Registrando click en producto:', {
        productId,
        source,
        position,
        section
      });

      await ApiClient.post(`${this.BASE_PATH}/track-product-click`, {
        product_id: productId,
        source,
        position,
        section
      });

      console.log('‚úÖ TrackingService: Click en producto registrado');
    } catch (error) {
      console.error('‚ùå TrackingService: Error registrando click en producto:', error);
    }
  }

  /**
   * Registra inter√©s en categor√≠as
   */
  public static async trackCategoryInterest(
    categoryId: number,
    action: 'visit' | 'browse' | 'filter',
    timeSpent?: number,
    productsViewed: number[] = []
  ): Promise<void> {
    if (!this.isAuthenticated()) return;
    
    try {
      console.log('üìÇ TrackingService: Registrando inter√©s en categor√≠a:', {
        categoryId,
        action,
        timeSpent,
        productsViewed: productsViewed.length
      });

      await ApiClient.post(`${this.BASE_PATH}/track-category-interest`, {
        category_id: categoryId,
        action,
        time_spent: timeSpent,
        products_viewed: productsViewed
      });

      console.log('‚úÖ TrackingService: Inter√©s en categor√≠a registrado');
    } catch (error) {
      console.error('‚ùå TrackingService: Error registrando inter√©s en categor√≠a:', error);
    }
  }

  /**
   * Registra comportamiento de visualizaci√≥n
   */
  public static async trackViewBehavior(
    productId: number,
    viewedPercentage: number,
    imagesViewed: string[] = [],
    descriptionRead: boolean = false,
    reviewsChecked: boolean = false
  ): Promise<void> {
    if (!this.isAuthenticated() || viewedPercentage < 10) return; // M√≠nimo 10%
    
    try {
      console.log('üëÅÔ∏è TrackingService: Registrando comportamiento de visualizaci√≥n:', {
        productId,
        viewedPercentage,
        imagesViewed: imagesViewed.length,
        descriptionRead,
        reviewsChecked
      });

      await ApiClient.post(`${this.BASE_PATH}/track-view-behavior`, {
        product_id: productId,
        viewed_percentage: Math.round(viewedPercentage),
        images_viewed: imagesViewed,
        description_read: descriptionRead,
        reviews_checked: reviewsChecked
      });

      console.log('‚úÖ TrackingService: Comportamiento de visualizaci√≥n registrado');
    } catch (error) {
      console.error('‚ùå TrackingService: Error registrando comportamiento de visualizaci√≥n:', error);
    }
  }

  /**
   * Registra interacci√≥n b√°sica (backward compatibility)
   */
  public static async trackInteraction(
    interactionType: string,
    itemId: number,
    metadata: Record<string, any> = {}
  ): Promise<void> {
    if (!this.isAuthenticated()) return;
    
    try {
      console.log('üîÑ TrackingService: Registrando interacci√≥n b√°sica:', {
        interactionType,
        itemId,
        metadata
      });

      await ApiClient.post(`${this.BASE_PATH}/track-interaction`, {
        interaction_type: interactionType,
        item_id: itemId,
        metadata: {
          timestamp: new Date().toISOString(),
          ...metadata
        }
      });

      console.log('‚úÖ TrackingService: Interacci√≥n b√°sica registrada');
    } catch (error) {
      console.error('‚ùå TrackingService: Error registrando interacci√≥n b√°sica:', error);
    }
  }

  /**
   * Helper: Registra evento combinado de click + tiempo
   */
  public static async trackProductEngagement(
    productId: number,
    source: string,
    timeSpent: number,
    position?: number,
    section?: string
  ): Promise<void> {
    // Registrar click
    await this.trackProductClick(productId, source, position, section);
    
    // Si pas√≥ suficiente tiempo, registrar tambi√©n tiempo en p√°gina
    if (timeSpent >= 5) {
      await this.trackPageTime(productId, timeSpent, 'product', {
        click_source: source,
        position,
        section
      });
    }
  }

  /**
   * Helper: Registra b√∫squeda con resultado clickeado
   */
  public static async trackSearchWithClick(
    searchTerm: string,
    resultsCount: number,
    clickedProductId: number,
    clickPosition?: number
  ): Promise<void> {
    // Registrar b√∫squeda
    await this.trackSearch(searchTerm, resultsCount, clickedProductId);
    
    // Registrar click en resultado
    await this.trackProductClick(clickedProductId, 'search', clickPosition, 'search_results');
  }
}

export default TrackingService;
