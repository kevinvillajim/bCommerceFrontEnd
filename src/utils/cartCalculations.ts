/**
 * üîÑ MIGRACI√ìN A CALCULADORA CENTRALIZADA
 * Este archivo ahora redirige a EcommerceCalculator para mantener compatibilidad
 * TODO: Eventualmente, migrar todos los imports directamente a EcommerceCalculator
 */

import { EcommerceCalculator } from "./ecommerceCalculator";
import type { CalculationResult } from "./ecommerceCalculator";

// Helper para DISPLAY √öNICAMENTE - NO usar en c√°lculos (mantenido por compatibilidad)
export function roundToPrecision(value: number, decimals: number = 2): number {
  console.warn("‚ö†Ô∏è roundToPrecision est√° obsoleto - usar priceFormatter.roundForDisplay() para display");
  return Math.round(value * Math.pow(10, decimals)) / Math.pow(10, decimals);
}

/**
 * ‚úÖ FUNCI√ìN PRINCIPAL MIGRADA
 * Ahora usa EcommerceCalculator para garantizar consistencia total
 */
export async function calculateTotals(cartItems: any[], appliedDiscount: any = null): Promise<CalculationResult> {
  console.log("‚ö†Ô∏è USANDO FUNCI√ìN LEGACY - MIGRAR A EcommerceCalculator.calculateTotals()");
  
  // ‚úÖ DELEGAR A CALCULADORA CENTRALIZADA
  return await EcommerceCalculator.calculateTotals(cartItems, appliedDiscount);
}

// Exportar tipos para compatibilidad
export type { CalculationResult } from "./ecommerceCalculator";