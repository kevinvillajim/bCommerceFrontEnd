{"version":3,"file":"AdminSellerService-B2Gtbd0h.js","sources":["../../src/infrastructure/services/AdminSellerService.ts"],"sourcesContent":["import { ApiClient } from '../api/apiClient';\n\nexport interface SellerInfo {\n  business_name: string | null;\n  description: string | null;\n  phone: string | null;\n  address: string | null;\n  website: string | null;\n}\n\nexport interface MonthlyStats {\n  month: string;\n  month_name: string;\n  orders: number;\n  revenue: number;\n}\n\nexport interface RecentOrder {\n  id: number;\n  customer_name: string;\n  total: number;\n  status: string;\n  date: string;\n  formatted_total: string;\n}\n\nexport interface TopProduct {\n  id: number;\n  name: string;\n  price: number;\n  sales_count: number;\n  view_count: number;\n  revenue: number;\n}\n\nexport interface SellerDetail {\n  id: number;\n  name: string;\n  email: string;\n  status: string;\n  is_blocked: boolean;\n  created_at: string;\n  joined_date: string;\n  total_orders: number;\n  total_revenue: number;\n  products_count: number;\n  average_rating: number;\n  last_order_date: string | null;\n  seller_info: SellerInfo;\n  monthly_stats: MonthlyStats[];\n  recent_orders: RecentOrder[];\n  top_products: TopProduct[];\n  pending_orders: number;\n  completed_orders: number;\n  customer_count: number;\n}\n\nexport interface SellerDetailResponse {\n  success: boolean;\n  data: SellerDetail;\n  message?: string;\n  error?: string;\n}\n\nexport class AdminSellerService {\n  /**\n   * Get detailed information about a specific seller\n   */\n  async getSellerDetails(sellerId: string | number): Promise<SellerDetail> {\n    try {\n      const response = await ApiClient.get<SellerDetailResponse>(`/admin/sellers/${sellerId}`);\n      \n      if (!response.success) {\n        throw new Error(response.message || 'Failed to fetch seller details');\n      }\n\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching seller details:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Update seller status\n   */\n  async updateSellerStatus(sellerId: string | number, status: 'pending' | 'active' | 'suspended' | 'inactive', reason?: string): Promise<void> {\n    try {\n      const response = await ApiClient.put<{ success: boolean; message?: string }>(`/admin/sellers/${sellerId}/status`, {\n        status,\n        reason,\n      });\n      \n      if (!response.success) {\n        throw new Error(response.message || 'Failed to update seller status');\n      }\n    } catch (error) {\n      console.error('Error updating seller status:', error);\n      throw error;\n    }\n  }\n}\n\nexport const adminSellerService = new AdminSellerService();\nexport default adminSellerService;"],"names":["AdminSellerService","sellerId","response","ApiClient","error","status","reason","adminSellerService"],"mappings":"8CAgEO,MAAMA,CAAmB,CAI9B,MAAM,iBAAiBC,EAAkD,CACnE,GAAA,CACF,MAAMC,EAAW,MAAMC,EAAU,IAA0B,kBAAkBF,CAAQ,EAAE,EAEnF,GAAA,CAACC,EAAS,QACZ,MAAM,IAAI,MAAMA,EAAS,SAAW,gCAAgC,EAGtE,OAAOA,EAAS,WACTE,EAAO,CACN,cAAA,MAAM,iCAAkCA,CAAK,EAC/CA,CAAA,CACR,CAMF,MAAM,mBAAmBH,EAA2BI,EAAyDC,EAAgC,CACvI,GAAA,CACF,MAAMJ,EAAW,MAAMC,EAAU,IAA4C,kBAAkBF,CAAQ,UAAW,CAChH,OAAAI,EACA,OAAAC,CAAA,CACD,EAEG,GAAA,CAACJ,EAAS,QACZ,MAAM,IAAI,MAAMA,EAAS,SAAW,gCAAgC,QAE/DE,EAAO,CACN,cAAA,MAAM,gCAAiCA,CAAK,EAC9CA,CAAA,CACR,CAEJ,CAEa,MAAAG,EAAqB,IAAIP"}