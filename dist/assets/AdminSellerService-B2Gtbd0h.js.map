{"version":3,"file":"AdminSellerService-B2Gtbd0h.js","sources":["../../src/infrastructure/services/AdminSellerService.ts"],"sourcesContent":["import { ApiClient } from '../api/apiClient';\r\n\r\nexport interface SellerInfo {\r\n  business_name: string | null;\r\n  description: string | null;\r\n  phone: string | null;\r\n  address: string | null;\r\n  website: string | null;\r\n}\r\n\r\nexport interface MonthlyStats {\r\n  month: string;\r\n  month_name: string;\r\n  orders: number;\r\n  revenue: number;\r\n}\r\n\r\nexport interface RecentOrder {\r\n  id: number;\r\n  customer_name: string;\r\n  total: number;\r\n  status: string;\r\n  date: string;\r\n  formatted_total: string;\r\n}\r\n\r\nexport interface TopProduct {\r\n  id: number;\r\n  name: string;\r\n  price: number;\r\n  sales_count: number;\r\n  view_count: number;\r\n  revenue: number;\r\n}\r\n\r\nexport interface SellerDetail {\r\n  id: number;\r\n  name: string;\r\n  email: string;\r\n  status: string;\r\n  is_blocked: boolean;\r\n  created_at: string;\r\n  joined_date: string;\r\n  total_orders: number;\r\n  total_revenue: number;\r\n  products_count: number;\r\n  average_rating: number;\r\n  last_order_date: string | null;\r\n  seller_info: SellerInfo;\r\n  monthly_stats: MonthlyStats[];\r\n  recent_orders: RecentOrder[];\r\n  top_products: TopProduct[];\r\n  pending_orders: number;\r\n  completed_orders: number;\r\n  customer_count: number;\r\n}\r\n\r\nexport interface SellerDetailResponse {\r\n  success: boolean;\r\n  data: SellerDetail;\r\n  message?: string;\r\n  error?: string;\r\n}\r\n\r\nexport class AdminSellerService {\r\n  /**\r\n   * Get detailed information about a specific seller\r\n   */\r\n  async getSellerDetails(sellerId: string | number): Promise<SellerDetail> {\r\n    try {\r\n      const response = await ApiClient.get<SellerDetailResponse>(`/admin/sellers/${sellerId}`);\r\n      \r\n      if (!response.success) {\r\n        throw new Error(response.message || 'Failed to fetch seller details');\r\n      }\r\n\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching seller details:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update seller status\r\n   */\r\n  async updateSellerStatus(sellerId: string | number, status: 'pending' | 'active' | 'suspended' | 'inactive', reason?: string): Promise<void> {\r\n    try {\r\n      const response = await ApiClient.put<{ success: boolean; message?: string }>(`/admin/sellers/${sellerId}/status`, {\r\n        status,\r\n        reason,\r\n      });\r\n      \r\n      if (!response.success) {\r\n        throw new Error(response.message || 'Failed to update seller status');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error updating seller status:', error);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\nexport const adminSellerService = new AdminSellerService();\r\nexport default adminSellerService;"],"names":["AdminSellerService","sellerId","response","ApiClient","error","status","reason","adminSellerService"],"mappings":"8CAgEO,MAAMA,CAAmB,CAI9B,MAAM,iBAAiBC,EAAkD,CACnE,GAAA,CACF,MAAMC,EAAW,MAAMC,EAAU,IAA0B,kBAAkBF,CAAQ,EAAE,EAEnF,GAAA,CAACC,EAAS,QACZ,MAAM,IAAI,MAAMA,EAAS,SAAW,gCAAgC,EAGtE,OAAOA,EAAS,WACTE,EAAO,CACN,cAAA,MAAM,iCAAkCA,CAAK,EAC/CA,CAAA,CACR,CAMF,MAAM,mBAAmBH,EAA2BI,EAAyDC,EAAgC,CACvI,GAAA,CACF,MAAMJ,EAAW,MAAMC,EAAU,IAA4C,kBAAkBF,CAAQ,UAAW,CAChH,OAAAI,EACA,OAAAC,CAAA,CACD,EAEG,GAAA,CAACJ,EAAS,QACZ,MAAM,IAAI,MAAMA,EAAS,SAAW,gCAAgC,QAE/DE,EAAO,CACN,cAAA,MAAM,gCAAiCA,CAAK,EAC9CA,CAAA,CACR,CAEJ,CAEa,MAAAG,EAAqB,IAAIP"}