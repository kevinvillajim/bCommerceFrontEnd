{"version":3,"file":"DatafastService-mqZFUM13.js","sources":["../../src/core/services/DatafastService.ts"],"sourcesContent":["import ApiClient from \"../../infrastructure/api/apiClient\";\r\nimport {API_ENDPOINTS} from \"../../constants/apiEndpoints\";\r\nimport {extractErrorMessage} from \"../../utils/errorHandler\";\r\n\r\nexport interface DatafastCheckoutRequest {\r\n\tshipping: {\r\n\t\taddress: string;\r\n\t\tcity: string;\r\n\t\tcountry: string;\r\n\t};\r\n\tcustomer?: {\r\n\t\tgiven_name?: string;\r\n\t\tmiddle_name?: string;\r\n\t\tsurname?: string;\r\n\t\tphone?: string;\r\n\t\tdoc_id?: string;\r\n\t};\r\n}\r\n\r\nexport interface DatafastCheckoutResponse {\r\n\tsuccess: boolean;\r\n\tdata?: {\r\n\t\tcheckout_id: string;\r\n\t\twidget_url: string;\r\n\t\ttransaction_id: string;\r\n\t\tamount: number;\r\n\t};\r\n\tmessage: string;\r\n\terror_code?: string;\r\n}\r\n\r\nexport interface DatafastVerifyPaymentRequest {\r\n\tresource_path: string;\r\n\ttransaction_id: string;\r\n}\r\n\r\nexport interface DatafastVerifyPaymentResponse {\r\n\tsuccess: boolean;\r\n\tdata?: {\r\n\t\torder_id: string;\r\n\t\torder_number: string;\r\n\t\ttotal: number;\r\n\t\tpayment_status: string;\r\n\t\tpayment_id: string;\r\n\t};\r\n\tmessage: string;\r\n\tresult_code?: string;\r\n\tis_phase_1_error?: boolean;\r\n}\r\n\r\nexport class DatafastService {\r\n\t/**\r\n\t * Crear un checkout de Datafast\r\n\t */\r\n\tasync createCheckout(\r\n\t\tcheckoutData: DatafastCheckoutRequest\r\n\t): Promise<DatafastCheckoutResponse> {\r\n\t\ttry {\r\n\t\t\tconsole.log(\"DatafastService: Creando checkout\", checkoutData);\r\n\r\n\t\t\tconst response = await ApiClient.post<DatafastCheckoutResponse>(\r\n\t\t\t\tAPI_ENDPOINTS.DATAFAST.CREATE_CHECKOUT,\r\n\t\t\t\tcheckoutData\r\n\t\t\t);\r\n\r\n\t\t\tconsole.log(\"DatafastService: Respuesta de checkout\", response);\r\n\r\n\t\t\treturn response;\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\"DatafastService: Error al crear checkout:\", error);\r\n\r\n\t\t\tconst errorMessage = extractErrorMessage(\r\n\t\t\t\terror,\r\n\t\t\t\t\"Error al crear el checkout de Datafast\"\r\n\t\t\t);\r\n\r\n\t\t\tthrow new Error(errorMessage);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Verificar el estado del pago\r\n\t */\r\n\tasync verifyPayment(\r\n\t\tverifyData: DatafastVerifyPaymentRequest\r\n\t): Promise<DatafastVerifyPaymentResponse> {\r\n\t\ttry {\r\n\t\t\tconsole.log(\"DatafastService: Verificando pago\", verifyData);\r\n\r\n\t\t\tconst response = await ApiClient.post<DatafastVerifyPaymentResponse>(\r\n\t\t\t\tAPI_ENDPOINTS.DATAFAST.VERIFY_PAYMENT,\r\n\t\t\t\tverifyData\r\n\t\t\t);\r\n\r\n\t\t\tconsole.log(\"DatafastService: Respuesta de verificación\", response);\r\n\r\n\t\t\treturn response;\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\"DatafastService: Error al verificar pago:\", error);\r\n\r\n\t\t\tconst errorMessage = extractErrorMessage(\r\n\t\t\t\terror,\r\n\t\t\t\t\"Error al verificar el pago de Datafast\"\r\n\t\t\t);\r\n\r\n\t\t\tthrow new Error(errorMessage);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Simular una transacción exitosa para pruebas en Fase 1\r\n\t * (En producción, esto no debe usarse)\r\n\t */\r\n\tasync simulateSuccessfulPayment(\r\n\t\tcheckoutId: string,\r\n\t\ttransactionId: string\r\n\t): Promise<DatafastVerifyPaymentResponse> {\r\n\t\tif (!checkoutId) {\r\n\t\t\tthrow new Error(\"checkout_id es requerido para simular el pago\");\r\n\t\t}\r\n\r\n\t\tif (!transactionId) {\r\n\t\t\tthrow new Error(\"transaction_id es requerido para simular el pago\");\r\n\t\t}\r\n\r\n\t\t// Simular el resourcePath que normalmente viene del widget\r\n\t\tconst mockResourcePath = `/v1/checkouts/${checkoutId}/payment`;\r\n\r\n\t\tconsole.log(\"DatafastService: Simulando pago exitoso\", {\r\n\t\t\tcheckoutId,\r\n\t\t\ttransactionId,\r\n\t\t\tmockResourcePath,\r\n\t\t});\r\n\r\n\t\ttry {\r\n\t\t\t// Llamar al endpoint de verificación con el parámetro simulate_success\r\n\t\t\tconst response = await ApiClient.post<DatafastVerifyPaymentResponse>(\r\n\t\t\t\tAPI_ENDPOINTS.DATAFAST.VERIFY_PAYMENT + \"?simulate_success=true\",\r\n\t\t\t\t{\r\n\t\t\t\t\tresource_path: mockResourcePath,\r\n\t\t\t\t\ttransaction_id: transactionId,\r\n\t\t\t\t}\r\n\t\t\t);\r\n\r\n\t\t\tconsole.log(\"DatafastService: Respuesta de simulación:\", response);\r\n\r\n\t\t\treturn response;\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\"DatafastService: Error en simulación:\", error);\r\n\r\n\t\t\tconst errorMessage = extractErrorMessage(\r\n\t\t\t\terror,\r\n\t\t\t\t\"Error al simular el pago de Datafast\"\r\n\t\t\t);\r\n\r\n\t\t\tthrow new Error(errorMessage);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Manejar el resultado real de Datafast (cuando viene del widget)\r\n\t */\r\n\tasync handleDatafastResult(\r\n\t\tresourcePath: string,\r\n\t\ttransactionId: string\r\n\t): Promise<DatafastVerifyPaymentResponse> {\r\n\t\ttry {\r\n\t\t\tconsole.log(\"DatafastService: Manejando resultado real de Datafast\", {\r\n\t\t\t\tresourcePath,\r\n\t\t\t\ttransactionId,\r\n\t\t\t});\r\n\r\n\t\t\tconst response = await this.verifyPayment({\r\n\t\t\t\tresource_path: resourcePath,\r\n\t\t\t\ttransaction_id: transactionId,\r\n\t\t\t});\r\n\r\n\t\t\t// Si es el error típico de Fase 1, devolver un mensaje más claro\r\n\t\t\tif (!response.success && response.result_code === \"800.900.300\") {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tsuccess: false,\r\n\t\t\t\t\tmessage:\r\n\t\t\t\t\t\t'No se completó un pago real. Este es el comportamiento esperado en Fase 1 de pruebas. Use \"Simular Pago Exitoso\" para probar el flujo completo.',\r\n\t\t\t\t\tresult_code: response.result_code,\r\n\t\t\t\t\tis_phase_1_error: true,\r\n\t\t\t\t};\r\n\t\t\t}\r\n\r\n\t\t\treturn response;\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\"DatafastService: Error al manejar resultado:\", error);\r\n\r\n\t\t\tconst errorMessage = extractErrorMessage(\r\n\t\t\t\terror,\r\n\t\t\t\t\"Error al procesar el resultado de Datafast\"\r\n\t\t\t);\r\n\r\n\t\t\tthrow new Error(errorMessage);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Extraer resourcePath de la URL de respuesta\r\n\t */\r\n\textractResourcePath(url: string): string | null {\r\n\t\ttry {\r\n\t\t\tconst urlParams = new URLSearchParams(url.split(\"?\")[1]);\r\n\t\t\tconst resourcePath = urlParams.get(\"resourcePath\");\r\n\t\t\tconsole.log(\"DatafastService: ResourcePath extraído:\", resourcePath);\r\n\t\t\treturn resourcePath;\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\"DatafastService: Error al extraer resourcePath:\", error);\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n}\r\n"],"names":["DatafastService","checkoutData","response","ApiClient","API_ENDPOINTS","error","errorMessage","extractErrorMessage","verifyData","checkoutId","transactionId","mockResourcePath","resourcePath","url"],"mappings":"8FAkDO,MAAMA,CAAgB,CAI5B,MAAM,eACLC,EACoC,CAChC,GAAA,CACK,QAAA,IAAI,oCAAqCA,CAAY,EAEvD,MAAAC,EAAW,MAAMC,EAAU,KAChCC,EAAc,SAAS,gBACvBH,CACD,EAEQ,eAAA,IAAI,yCAA0CC,CAAQ,EAEvDA,QACCG,EAAO,CACP,QAAA,MAAM,4CAA6CA,CAAK,EAEhE,MAAMC,EAAeC,EACpBF,EACA,wCACD,EAEM,MAAA,IAAI,MAAMC,CAAY,CAAA,CAC7B,CAMD,MAAM,cACLE,EACyC,CACrC,GAAA,CACK,QAAA,IAAI,oCAAqCA,CAAU,EAErD,MAAAN,EAAW,MAAMC,EAAU,KAChCC,EAAc,SAAS,eACvBI,CACD,EAEQ,eAAA,IAAI,6CAA8CN,CAAQ,EAE3DA,QACCG,EAAO,CACP,QAAA,MAAM,4CAA6CA,CAAK,EAEhE,MAAMC,EAAeC,EACpBF,EACA,wCACD,EAEM,MAAA,IAAI,MAAMC,CAAY,CAAA,CAC7B,CAOD,MAAM,0BACLG,EACAC,EACyC,CACzC,GAAI,CAACD,EACE,MAAA,IAAI,MAAM,+CAA+C,EAGhE,GAAI,CAACC,EACE,MAAA,IAAI,MAAM,kDAAkD,EAI7D,MAAAC,EAAmB,iBAAiBF,CAAU,WAEpD,QAAQ,IAAI,0CAA2C,CACtD,WAAAA,EACA,cAAAC,EACA,iBAAAC,CAAA,CACA,EAEG,GAAA,CAEG,MAAAT,EAAW,MAAMC,EAAU,KAChCC,EAAc,SAAS,eAAiB,yBACxC,CACC,cAAeO,EACf,eAAgBD,CAAA,CAElB,EAEQ,eAAA,IAAI,4CAA6CR,CAAQ,EAE1DA,QACCG,EAAO,CACP,QAAA,MAAM,wCAAyCA,CAAK,EAE5D,MAAMC,EAAeC,EACpBF,EACA,sCACD,EAEM,MAAA,IAAI,MAAMC,CAAY,CAAA,CAC7B,CAMD,MAAM,qBACLM,EACAF,EACyC,CACrC,GAAA,CACH,QAAQ,IAAI,wDAAyD,CACpE,aAAAE,EACA,cAAAF,CAAA,CACA,EAEK,MAAAR,EAAW,MAAM,KAAK,cAAc,CACzC,cAAeU,EACf,eAAgBF,CAAA,CAChB,EAGD,MAAI,CAACR,EAAS,SAAWA,EAAS,cAAgB,cAC1C,CACN,QAAS,GACT,QACC,kJACD,YAAaA,EAAS,YACtB,iBAAkB,EACnB,EAGMA,QACCG,EAAO,CACP,QAAA,MAAM,+CAAgDA,CAAK,EAEnE,MAAMC,EAAeC,EACpBF,EACA,4CACD,EAEM,MAAA,IAAI,MAAMC,CAAY,CAAA,CAC7B,CAMD,oBAAoBO,EAA4B,CAC3C,GAAA,CAEG,MAAAD,EADY,IAAI,gBAAgBC,EAAI,MAAM,GAAG,EAAE,CAAC,CAAC,EACxB,IAAI,cAAc,EACzC,eAAA,IAAI,0CAA2CD,CAAY,EAC5DA,QACCP,EAAO,CACP,eAAA,MAAM,kDAAmDA,CAAK,EAC/D,IAAA,CACR,CAEF"}