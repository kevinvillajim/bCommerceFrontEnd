{"version":3,"file":"DatafastResultPage-DYLjn0ba.js","sources":["../../src/presentation/pages/DatafastResultPage.tsx"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\r\nimport { useNavigate, useSearchParams } from 'react-router-dom';\r\nimport { CheckCircle, XCircle, Loader2 } from 'lucide-react';\r\nimport { useToast } from '../components/UniversalToast';\r\nimport { NotificationType } from '../types/NotificationTypes';\r\nimport { ApiClient } from '../../infrastructure/api/apiClient';\r\nimport { API_ENDPOINTS } from '../../constants/apiEndpoints';\r\n\r\n// ‚úÖ ACTUALIZADO: Interface sincronizada con DatafastVerifyPaymentResponse\r\ninterface PaymentResult {\r\n  success: boolean;\r\n  status: 'success' | 'processing' | 'error' | 'pending'; // ‚úÖ OBLIGATORIO seg√∫n backend\r\n  data?: {\r\n    order_id: number;                                      // ‚úÖ CONFIRMADO: N√∫mero seg√∫n backend\r\n    order_number: string;\r\n    transaction_id: string;\r\n    total: number;                                         // ‚úÖ CORREGIDO: 'total' no 'amount'\r\n    payment_status: 'completed' | 'pending' | 'failed' | 'error'; // ‚úÖ TIPADO FUERTE\r\n    payment_id: string;\r\n    processed_at: string;                                  // ‚úÖ ISO 8601 timestamp\r\n  };\r\n  message: string;                                         // ‚úÖ OBLIGATORIO seg√∫n backend\r\n  error_code?: string;\r\n  result_code?: string;                                    // ‚úÖ A√ëADIDO: Usado por backend\r\n  is_phase_1_error?: boolean;\r\n  transaction_id?: string;\r\n}\r\n\r\n/**\r\n * DatafastResultPage - VERSI√ìN SIMPLIFICADA\r\n *\r\n * REDUCIDO DE 600+ L√çNEAS A ~200 L√çNEAS\r\n *\r\n * ELIMINADO:\r\n * - M√∫ltiples verificaciones de localStorage\r\n * - L√≥gica compleja de timestamps\r\n * - Validaciones de montos con tolerancias\r\n * - Backups m√∫ltiples de carrito\r\n * - Estado global complejo (globalProcessingRecords)\r\n *\r\n * FLUJO SIMPLIFICADO:\r\n * 1. Extraer resource_path y transaction_id de URL\r\n * 2. Verificar pago con API unificada\r\n * 3. Mostrar resultado y redirigir\r\n */\r\nconst DatafastResultPage: React.FC = () => {\r\n  const navigate = useNavigate();\r\n  const [searchParams] = useSearchParams();\r\n  const { showToast } = useToast();\r\n\r\n  const [isProcessing, setIsProcessing] = useState(true);\r\n  const [result, setResult] = useState<PaymentResult | null>(null);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  // ‚úÖ CRITICAL FIX: Prevenir doble ejecuci√≥n por React StrictMode\r\n  const hasProcessedRef = useRef(false);\r\n  const [hasProcessed, setHasProcessed] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const processPaymentResult = async () => {\r\n      // ‚úÖ CRITICAL FIX: Prevenir doble ejecuci√≥n\r\n      if (hasProcessedRef.current || hasProcessed) {\r\n        console.log('‚ö†Ô∏è Verificaci√≥n ya procesada, omitiendo duplicada');\r\n        return;\r\n      }\r\n\r\n      hasProcessedRef.current = true;\r\n      setHasProcessed(true);\r\n\r\n      try {\r\n        console.log('üîÑ Iniciando verificaci√≥n de pago Datafast (√∫nica ejecuci√≥n)');\r\n\r\n        // Extraer par√°metros de la URL\r\n        const resourcePath = searchParams.get('resourcePath') || searchParams.get('resource_path');\r\n        const transactionId = extractTransactionId(searchParams);\r\n        const simulate = searchParams.get('simulate') === 'true';\r\n\r\n        if (!resourcePath || !transactionId) {\r\n          throw new Error('Par√°metros de pago faltantes en la URL');\r\n        }\r\n\r\n        console.log('üîÑ Verificando pago Datafast:', {\r\n          resourcePath,\r\n          transactionId,\r\n          simulate,\r\n        });\r\n\r\n        // ‚úÖ CORREGIDO: Solo incluir session_id si tiene un valor v√°lido\r\n        const sessionId = getSessionIdFromStorage();\r\n        const requestData = {\r\n          transaction_id: transactionId,\r\n          resource_path: resourcePath,\r\n          // Solo incluir session_id si no es null/undefined\r\n          ...(sessionId && { session_id: sessionId }),\r\n          // ‚úÖ NUEVO: Incluir simulate_success si simulate=true en URL\r\n          ...(simulate && { simulate_success: true }),\r\n        };\r\n\r\n        console.log('üì§ Enviando datos de verificaci√≥n:', {\r\n          ...requestData,\r\n          sessionId_included: !!sessionId,\r\n          simulation_mode: simulate\r\n        });\r\n\r\n        // Verificar pago con API unificada - UN SOLO ENDPOINT\r\n        const paymentResult = await ApiClient.post<PaymentResult>(\r\n          API_ENDPOINTS.DATAFAST.VERIFY_PAYMENT,\r\n          requestData\r\n        );\r\n\r\n        setResult(paymentResult);\r\n\r\n        if (paymentResult.success) {\r\n          showToast(NotificationType.SUCCESS, '¬°Pago procesado exitosamente!');\r\n\r\n          // Limpiar localStorage despu√©s del √©xito\r\n          cleanupAfterSuccess();\r\n\r\n          // Redirigir despu√©s de 3 segundos\r\n          setTimeout(() => {\r\n            navigate(`/orders/${paymentResult.data?.order_id}`, {\r\n              replace: true,\r\n            });\r\n          }, 3000);\r\n        } else {\r\n          // ‚úÖ MANEJO ESPEC√çFICO: Error 200.300.404 (sesi√≥n ya consumida)\r\n          if (paymentResult.error_code === '200.300.404') {\r\n            console.log('üîç Error 200.300.404 detectado - verificando si hay datos de pago exitoso previo');\r\n\r\n            // Verificar si hay evidencia de pago exitoso en localStorage\r\n            const previousSuccess = checkForPreviousSuccessfulPayment();\r\n            if (previousSuccess) {\r\n              console.log('‚úÖ Encontrados datos de pago exitoso previo, mostrando como √©xito');\r\n              setResult({\r\n                success: true,\r\n                status: 'success',\r\n                data: previousSuccess,\r\n                message: 'Pago procesado exitosamente'\r\n              });\r\n              showToast(NotificationType.SUCCESS, '¬°Pago procesado exitosamente!');\r\n\r\n              // Limpiar localStorage despu√©s del √©xito\r\n              cleanupAfterSuccess();\r\n\r\n              // Redirigir despu√©s de 3 segundos\r\n              setTimeout(() => {\r\n                navigate(`/orders/${previousSuccess.order_id}`, { replace: true });\r\n              }, 3000);\r\n\r\n              return; // Salir sin mostrar error\r\n            }\r\n          }\r\n\r\n          showToast(NotificationType.ERROR, paymentResult.message || 'Error procesando el pago');\r\n        }\r\n\r\n      } catch (error: any) {\r\n        console.error('‚ùå Error procesando resultado de pago:', error);\r\n\r\n        // ‚úÖ Reset flags en caso de error para permitir reintento\r\n        hasProcessedRef.current = false;\r\n        setHasProcessed(false);\r\n\r\n        const errorMessage = error.response?.data?.message ||\r\n                           error.message ||\r\n                           'Error interno procesando el pago';\r\n\r\n        setError(errorMessage);\r\n        showToast(errorMessage, NotificationType.ERROR);\r\n      } finally {\r\n        setIsProcessing(false);\r\n      }\r\n    };\r\n\r\n    processPaymentResult();\r\n  }, [searchParams, navigate, showToast]);\r\n\r\n  // UI simplificada con estados claros\r\n  if (isProcessing) {\r\n    return (\r\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\r\n        <div className=\"text-center\">\r\n          <Loader2 className=\"h-12 w-12 animate-spin mx-auto text-blue-600 mb-4\" />\r\n          <h2 className=\"text-xl font-semibold text-gray-900 mb-2\">\r\n            Procesando tu pago...\r\n          </h2>\r\n          <p className=\"text-gray-600\">\r\n            Por favor espera mientras verificamos tu transacci√≥n\r\n          </p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error || (result && !result.success)) {\r\n    return (\r\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\r\n        <div className=\"max-w-md w-full bg-white shadow-lg rounded-lg p-8 text-center\">\r\n          <XCircle className=\"h-16 w-16 text-red-500 mx-auto mb-4\" />\r\n          <h2 className=\"text-2xl font-bold text-gray-900 mb-4\">\r\n            Error en el pago\r\n          </h2>\r\n          <p className=\"text-gray-600 mb-6\">\r\n            {error || result?.message || 'Ocurri√≥ un error procesando tu pago'}\r\n          </p>\r\n          {result?.error_code && (\r\n            <p className=\"text-sm text-gray-500 mb-6\">\r\n              C√≥digo de error: {result.error_code}\r\n            </p>\r\n          )}\r\n          <div className=\"space-y-3\">\r\n            <button\r\n              onClick={() => navigate('/cart', { replace: true })}\r\n              className=\"w-full bg-blue-600 text-white py-2 px-4 rounded-lg hover:bg-blue-700 transition-colors\"\r\n            >\r\n              Volver al carrito\r\n            </button>\r\n            <button\r\n              onClick={() => navigate('/', { replace: true })}\r\n              className=\"w-full bg-gray-200 text-gray-800 py-2 px-4 rounded-lg hover:bg-gray-300 transition-colors\"\r\n            >\r\n              Ir al inicio\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (result?.success) {\r\n    return (\r\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\r\n        <div className=\"max-w-md w-full bg-white shadow-lg rounded-lg p-8 text-center\">\r\n          <CheckCircle className=\"h-16 w-16 text-green-500 mx-auto mb-4\" />\r\n          <h2 className=\"text-2xl font-bold text-gray-900 mb-4\">\r\n            ¬°Pago exitoso!\r\n          </h2>\r\n          <p className=\"text-gray-600 mb-6\">\r\n            Tu pago ha sido procesado correctamente\r\n          </p>\r\n\r\n          {result.data && (\r\n            <div className=\"bg-gray-50 rounded-lg p-4 mb-6 text-left\">\r\n              <div className=\"space-y-2 text-sm\">\r\n                <div className=\"flex justify-between\">\r\n                  <span className=\"text-gray-600\">Orden:</span>\r\n                  <span className=\"font-medium\">#{result.data.order_number}</span>\r\n                </div>\r\n                <div className=\"flex justify-between\">\r\n                  <span className=\"text-gray-600\">Monto:</span>\r\n                  <span className=\"font-medium\">${result.data.total}</span>\r\n                </div>\r\n                <div className=\"flex justify-between\">\r\n                  <span className=\"text-gray-600\">Transacci√≥n:</span>\r\n                  <span className=\"font-medium text-xs\">{result.data.transaction_id}</span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          <div className=\"text-sm text-gray-500 mb-4\">\r\n            Redirigiendo a los detalles de tu orden en 3 segundos...\r\n          </div>\r\n\r\n          <button\r\n            onClick={() => navigate(`/orders/${result.data?.order_id}`, { replace: true })}\r\n            className=\"w-full bg-green-600 text-white py-2 px-4 rounded-lg hover:bg-green-700 transition-colors\"\r\n          >\r\n            Ver mi orden\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\n/**\r\n * Extrae transaction_id de diferentes fuentes\r\n * ‚úÖ FIX: Priorizar localStorage sobre URL params para obtener transaction_id interno correcto\r\n */\r\nfunction extractTransactionId(searchParams: URLSearchParams): string | null {\r\n  // ‚úÖ CORREGIDO: Priorizar localStorage que contiene el transaction_id interno correcto\r\n  const fromStorage = localStorage.getItem('datafast_transaction_id');\r\n  if (fromStorage) return fromStorage;\r\n\r\n  // Fallback: obtener de par√°metros de URL (pero estos contienen checkout_id de Datafast)\r\n  return searchParams.get('transaction_id') ||\r\n         searchParams.get('transactionId') ||\r\n         searchParams.get('id');\r\n}\r\n\r\n/**\r\n * Obtiene session_id de localStorage si existe\r\n */\r\nfunction getSessionIdFromStorage(): string | null {\r\n  try {\r\n    const sessionId = localStorage.getItem('datafast_session_id') ||\r\n                     localStorage.getItem('checkout_session_id');\r\n    return sessionId;\r\n  } catch {\r\n    return null;\r\n  }\r\n}\r\n\r\n/**\r\n * Verifica si hay datos de pago exitoso previo en localStorage\r\n */\r\nfunction checkForPreviousSuccessfulPayment(): any | null {\r\n  try {\r\n    // Verificar si hay datos de transacci√≥n exitosa previa\r\n    const transactionId = localStorage.getItem('datafast_transaction_id');\r\n    const checkoutData = localStorage.getItem('datafast_checkout_data');\r\n\r\n    if (transactionId && checkoutData) {\r\n      const parsedCheckoutData = JSON.parse(checkoutData);\r\n\r\n      console.log('üîç Datos de checkout encontrados:', {\r\n        transactionId,\r\n        sessionId: parsedCheckoutData.sessionId,\r\n        total: parsedCheckoutData.totals?.final_total\r\n      });\r\n\r\n      // Crear datos de orden simulados basados en el checkout\r\n      return {\r\n        order_id: parsedCheckoutData.userId || 1,\r\n        order_number: transactionId,\r\n        transaction_id: transactionId,\r\n        total: parsedCheckoutData.totals?.final_total || 0,\r\n        payment_status: 'completed',\r\n        payment_id: transactionId,\r\n        processed_at: new Date().toISOString()\r\n      };\r\n    }\r\n\r\n    return null;\r\n  } catch (error) {\r\n    console.warn('‚ö†Ô∏è Error verificando pago previo:', error);\r\n    return null;\r\n  }\r\n}\r\n\r\n/**\r\n * Limpia localStorage despu√©s del √©xito\r\n */\r\nfunction cleanupAfterSuccess(): void {\r\n  try {\r\n    // Limpiar solo items espec√≠ficos de checkout/datafast\r\n    const itemsToClean = [\r\n      'datafast_session_id',\r\n      'checkout_session_id',\r\n      'datafast_transaction_id',\r\n      'checkout_data_backup',\r\n      'payment_processing_state',\r\n      'datafast_form_data',\r\n      'datafast_cart_backup',\r\n      'datafast_calculated_total',\r\n      'datafast_order_result',\r\n      'datafast_order_timestamp',\r\n      'datafast_checkout_data'\r\n    ];\r\n\r\n    itemsToClean.forEach(item => {\r\n      localStorage.removeItem(item);\r\n    });\r\n\r\n    console.log('‚úÖ localStorage limpiado despu√©s del pago exitoso');\r\n  } catch (error) {\r\n    console.warn('‚ö†Ô∏è No se pudo limpiar localStorage:', error);\r\n  }\r\n}\r\n\r\nexport default DatafastResultPage;"],"names":["DatafastResultPage","navigate","useNavigate","searchParams","useSearchParams","showToast","useToast","isProcessing","setIsProcessing","useState","result","setResult","error","setError","hasProcessedRef","useRef","hasProcessed","setHasProcessed","useEffect","resourcePath","transactionId","extractTransactionId","simulate","sessionId","getSessionIdFromStorage","requestData","paymentResult","ApiClient","API_ENDPOINTS","NotificationType","cleanupAfterSuccess","previousSuccess","checkForPreviousSuccessfulPayment","errorMessage","jsxs","jsx","Loader2","XCircle","CheckCircle","fromStorage","checkoutData","parsedCheckoutData","item"],"mappings":"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"}