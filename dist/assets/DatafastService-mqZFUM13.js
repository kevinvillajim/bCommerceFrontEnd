import{l as t,t as c}from"./index-DmNDOrWy.js";import{e as s}from"./errorHandler-ugMJT1nb.js";class p{async createCheckout(a){try{console.log("DatafastService: Creando checkout",a);const r=await t.post(c.DATAFAST.CREATE_CHECKOUT,a);return console.log("DatafastService: Respuesta de checkout",r),r}catch(r){console.error("DatafastService: Error al crear checkout:",r);const e=s(r,"Error al crear el checkout de Datafast");throw new Error(e)}}async verifyPayment(a){try{console.log("DatafastService: Verificando pago",a);const r=await t.post(c.DATAFAST.VERIFY_PAYMENT,a);return console.log("DatafastService: Respuesta de verificación",r),r}catch(r){console.error("DatafastService: Error al verificar pago:",r);const e=s(r,"Error al verificar el pago de Datafast");throw new Error(e)}}async simulateSuccessfulPayment(a,r){if(!a)throw new Error("checkout_id es requerido para simular el pago");if(!r)throw new Error("transaction_id es requerido para simular el pago");const e=`/v1/checkouts/${a}/payment`;console.log("DatafastService: Simulando pago exitoso",{checkoutId:a,transactionId:r,mockResourcePath:e});try{const o=await t.post(c.DATAFAST.VERIFY_PAYMENT+"?simulate_success=true",{resource_path:e,transaction_id:r});return console.log("DatafastService: Respuesta de simulación:",o),o}catch(o){console.error("DatafastService: Error en simulación:",o);const l=s(o,"Error al simular el pago de Datafast");throw new Error(l)}}async handleDatafastResult(a,r){try{console.log("DatafastService: Manejando resultado real de Datafast",{resourcePath:a,transactionId:r});const e=await this.verifyPayment({resource_path:a,transaction_id:r});return!e.success&&e.result_code==="800.900.300"?{success:!1,message:'No se completó un pago real. Este es el comportamiento esperado en Fase 1 de pruebas. Use "Simular Pago Exitoso" para probar el flujo completo.',result_code:e.result_code,is_phase_1_error:!0}:e}catch(e){console.error("DatafastService: Error al manejar resultado:",e);const o=s(e,"Error al procesar el resultado de Datafast");throw new Error(o)}}extractResourcePath(a){try{const e=new URLSearchParams(a.split("?")[1]).get("resourcePath");return console.log("DatafastService: ResourcePath extraído:",e),e}catch(r){return console.error("DatafastService: Error al extraer resourcePath:",r),null}}}export{p as D};
//# sourceMappingURL=DatafastService-mqZFUM13.js.map
