{"version":3,"file":"dateUtils-CfeftkgG.js","sources":["../../node_modules/lucide-react/dist/esm/icons/check-check.js","../../node_modules/lucide-react/dist/esm/icons/ellipsis-vertical.js","../../src/utils/dateUtils.ts"],"sourcesContent":["/**\n * @license lucide-react v0.484.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst __iconNode = [\n  [\"path\", { d: \"M18 6 7 17l-5-5\", key: \"116fxf\" }],\n  [\"path\", { d: \"m22 10-7.5 7.5L13 16\", key: \"ke71qq\" }]\n];\nconst CheckCheck = createLucideIcon(\"check-check\", __iconNode);\n\nexport { __iconNode, CheckCheck as default };\n//# sourceMappingURL=check-check.js.map\n","/**\n * @license lucide-react v0.484.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst __iconNode = [\n  [\"circle\", { cx: \"12\", cy: \"12\", r: \"1\", key: \"41hilf\" }],\n  [\"circle\", { cx: \"12\", cy: \"5\", r: \"1\", key: \"gxeob9\" }],\n  [\"circle\", { cx: \"12\", cy: \"19\", r: \"1\", key: \"lyex9k\" }]\n];\nconst EllipsisVertical = createLucideIcon(\"ellipsis-vertical\", __iconNode);\n\nexport { __iconNode, EllipsisVertical as default };\n//# sourceMappingURL=ellipsis-vertical.js.map\n","// src/utils/dateUtils.ts\r\n\r\n/**\r\n * Utilidades para manejo y formateo de fechas\r\n * Configurado para la zona horaria de Ecuador (UTC-5)\r\n */\r\n\r\n// Zona horaria de Ecuador\r\nexport const ECUADOR_TIMEZONE = 'America/Guayaquil';\r\nexport const ECUADOR_UTC_OFFSET = '-05:00';\r\n\r\n/**\r\n * Parsea una fecha que viene del backend Laravel\r\n * Maneja tanto fechas con zona horaria como sin ella\r\n */\r\nexport const parseBackendDate = (dateString: string): Date | null => {\r\n  try {\r\n    if (!dateString || dateString.trim() === '') {\r\n      return null;\r\n    }\r\n\r\n    const cleanDateString = dateString.trim();\r\n    let date: Date;\r\n\r\n    // Formato ISO con zona horaria: \"2025-06-25T00:11:24.000000Z\" o \"2025-06-25T00:11:24Z\"\r\n    if (/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d{1,6})?Z?$/i.test(cleanDateString) || \r\n        /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d{1,6})?[+-]\\d{2}:\\d{2}$/.test(cleanDateString)) {\r\n      // Es formato ISO válido, parsear directamente\r\n      date = new Date(cleanDateString);\r\n    }\r\n    // Formato Laravel sin zona horaria: \"YYYY-MM-DD HH:mm:ss\"\r\n    else if (/^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}$/.test(cleanDateString)) {\r\n      // Asumir que es hora local de Ecuador y convertir a ISO string con zona horaria\r\n      const isoString = cleanDateString.replace(' ', 'T') + ECUADOR_UTC_OFFSET;\r\n      date = new Date(isoString);\r\n    }\r\n    // Otros formatos, intentar parsear directamente\r\n    else {\r\n      date = new Date(cleanDateString);\r\n    }\r\n\r\n    // Verificar si la fecha es válida\r\n    if (isNaN(date.getTime())) {\r\n      console.warn('Fecha inválida parseada:', cleanDateString, 'Resultado:', date);\r\n      return null;\r\n    }\r\n\r\n    return date;\r\n  } catch (error) {\r\n    console.error('Error al parsear fecha:', error, 'Fecha original:', dateString);\r\n    return null;\r\n  }\r\n};\r\n\r\n/**\r\n * Formatea una fecha como tiempo relativo en español\r\n */\r\nexport const formatRelativeTime = (dateString: string): string => {\r\n  try {\r\n    if (!dateString || dateString.trim() === '') {\r\n      console.warn('formatRelativeTime: fecha vacía o undefined');\r\n      return 'Fecha desconocida';\r\n    }\r\n\r\n    const date = parseBackendDate(dateString);\r\n    \r\n    if (!date) {\r\n      console.warn('formatRelativeTime: no se pudo parsear la fecha:', dateString);\r\n      return 'Fecha inválida';\r\n    }\r\n\r\n    const now = new Date();\r\n    const diffInSeconds = Math.floor((now.getTime() - date.getTime()) / 1000);\r\n    \r\n    // Debug logging\r\n    console.log('formatRelativeTime debug:', {\r\n      original: dateString,\r\n      parsed: date.toISOString(),\r\n      now: now.toISOString(),\r\n      diffInSeconds,\r\n      diffInMinutes: Math.floor(diffInSeconds / 60),\r\n      diffInHours: Math.floor(diffInSeconds / 3600)\r\n    });\r\n    \r\n    // Si la diferencia es negativa (fecha en el futuro), mostrar la fecha\r\n    if (diffInSeconds < 0) {\r\n      console.log('formatRelativeTime: fecha en el futuro, mostrando fecha absoluta');\r\n      return formatAbsoluteDate(date);\r\n    }\r\n    \r\n    if (diffInSeconds < 60) {\r\n      return 'Ahora mismo';\r\n    } else if (diffInSeconds < 3600) {\r\n      const minutes = Math.floor(diffInSeconds / 60);\r\n      return `${minutes} ${minutes === 1 ? 'minuto' : 'minutos'}`;\r\n    } else if (diffInSeconds < 86400) {\r\n      const hours = Math.floor(diffInSeconds / 3600);\r\n      return `${hours} ${hours === 1 ? 'hora' : 'horas'}`;\r\n    } else if (diffInSeconds < 604800) {\r\n      const days = Math.floor(diffInSeconds / 86400);\r\n      return `${days} ${days === 1 ? 'día' : 'días'}`;\r\n    } else {\r\n      return formatAbsoluteDate(date);\r\n    }\r\n  } catch (error) {\r\n    console.error('Error en formatRelativeTime:', error, 'Fecha original:', dateString);\r\n    return 'Error en fecha';\r\n  }\r\n};\r\n\r\n/**\r\n * Formatea una fecha como tiempo relativo corto (para toasts)\r\n */\r\nexport const formatRelativeTimeShort = (dateString: string): string => {\r\n  const date = parseBackendDate(dateString);\r\n  \r\n  if (!date) {\r\n    return 'Ahora';\r\n  }\r\n\r\n  const now = new Date();\r\n  const diffInSeconds = Math.floor((now.getTime() - date.getTime()) / 1000);\r\n  \r\n  if (diffInSeconds < 0) {\r\n    return 'Ahora';\r\n  }\r\n  \r\n  if (diffInSeconds < 60) {\r\n    return 'Ahora';\r\n  } else if (diffInSeconds < 3600) {\r\n    const minutes = Math.floor(diffInSeconds / 60);\r\n    return `${minutes}min`;\r\n  } else if (diffInSeconds < 86400) {\r\n    const hours = Math.floor(diffInSeconds / 3600);\r\n    return `${hours}h`;\r\n  } else {\r\n    const days = Math.floor(diffInSeconds / 86400);\r\n    return `${days}d`;\r\n  }\r\n};\r\n\r\n/**\r\n * Formatea una fecha absoluta en formato legible en español\r\n */\r\nexport const formatAbsoluteDate = (date: Date, includeTime: boolean = false): string => {\r\n  try {\r\n    const now = new Date();\r\n    \r\n    const options: Intl.DateTimeFormatOptions = {\r\n      day: 'numeric',\r\n      month: 'short',\r\n      year: date.getFullYear() !== now.getFullYear() ? 'numeric' : undefined,\r\n      timeZone: ECUADOR_TIMEZONE\r\n    };\r\n\r\n    if (includeTime) {\r\n      options.hour = '2-digit';\r\n      options.minute = '2-digit';\r\n      options.hour12 = false; // Formato 24 horas\r\n    }\r\n\r\n    return date.toLocaleDateString('es-EC', options);\r\n  } catch (error) {\r\n    console.error('Error en formatAbsoluteDate:', error);\r\n    return date.toLocaleDateString();\r\n  }\r\n};\r\n\r\n/**\r\n * Formatea una fecha absoluta desde string\r\n */\r\nexport const formatAbsoluteDateFromString = (dateString: string, includeTime: boolean = false): string => {\r\n  const date = parseBackendDate(dateString);\r\n  \r\n  if (!date) {\r\n    return 'Fecha desconocida';\r\n  }\r\n\r\n  return formatAbsoluteDate(date, includeTime);\r\n};\r\n\r\n/**\r\n * Verifica si una fecha está en el rango de \"hoy\"\r\n */\r\nexport const isToday = (dateString: string): boolean => {\r\n  const date = parseBackendDate(dateString);\r\n  \r\n  if (!date) {\r\n    return false;\r\n  }\r\n\r\n  const today = new Date();\r\n  \r\n  return date.getDate() === today.getDate() &&\r\n         date.getMonth() === today.getMonth() &&\r\n         date.getFullYear() === today.getFullYear();\r\n};\r\n\r\n/**\r\n * Verifica si una fecha está en el rango de \"ayer\"\r\n */\r\nexport const isYesterday = (dateString: string): boolean => {\r\n  const date = parseBackendDate(dateString);\r\n  \r\n  if (!date) {\r\n    return false;\r\n  }\r\n\r\n  const yesterday = new Date();\r\n  yesterday.setDate(yesterday.getDate() - 1);\r\n  \r\n  return date.getDate() === yesterday.getDate() &&\r\n         date.getMonth() === yesterday.getMonth() &&\r\n         date.getFullYear() === yesterday.getFullYear();\r\n};\r\n\r\n/**\r\n * Convierte una fecha del backend a timestamp para comparaciones\r\n */\r\nexport const dateStringToTimestamp = (dateString: string): number => {\r\n  const date = parseBackendDate(dateString);\r\n  return date ? date.getTime() : 0;\r\n};\r\n\r\n/**\r\n * Formatea una fecha para mostrar en inputs de tipo datetime-local\r\n */\r\nexport const formatForDatetimeInput = (dateString: string): string => {\r\n  const date = parseBackendDate(dateString);\r\n  \r\n  if (!date) {\r\n    return '';\r\n  }\r\n\r\n  // Formato requerido: YYYY-MM-DDTHH:mm\r\n  const year = date.getFullYear();\r\n  const month = String(date.getMonth() + 1).padStart(2, '0');\r\n  const day = String(date.getDate()).padStart(2, '0');\r\n  const hours = String(date.getHours()).padStart(2, '0');\r\n  const minutes = String(date.getMinutes()).padStart(2, '0');\r\n\r\n  return `${year}-${month}-${day}T${hours}:${minutes}`;\r\n};\r\n\r\n/**\r\n * Valida si un string de fecha es válido\r\n */\r\nexport const isValidDateString = (dateString: string): boolean => {\r\n  const date = parseBackendDate(dateString);\r\n  return date !== null && !isNaN(date.getTime());\r\n};\r\n\r\n// Exportar funciones principales para retrocompatibilidad\r\nexport default {\r\n  parseBackendDate,\r\n  formatRelativeTime,\r\n  formatRelativeTimeShort,\r\n  formatAbsoluteDate,\r\n  formatAbsoluteDateFromString,\r\n  isToday,\r\n  isYesterday,\r\n  dateStringToTimestamp,\r\n  formatForDatetimeInput,\r\n  isValidDateString\r\n};"],"names":["__iconNode","CheckCheck","createLucideIcon","EllipsisVertical","ECUADOR_TIMEZONE","ECUADOR_UTC_OFFSET","parseBackendDate","dateString","cleanDateString","date","isoString","error","formatRelativeTime","now","diffInSeconds","formatAbsoluteDate","minutes","hours","days","includeTime","options","isToday","today","isYesterday","yesterday"],"mappings":"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","x_google_ignoreList":[0,1]}