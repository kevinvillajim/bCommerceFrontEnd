import{l as n,t as l}from"./index-DmNDOrWy.js";class g{async getSellerOrders(e={}){try{console.log("SellerOrderServiceAdapter: Obteniendo órdenes con filtros:",e);const t={limit:e.limit||10,page:e.page||1};e.status&&e.status!=="all"&&(t.status=e.status),e.paymentStatus&&e.paymentStatus!=="all"&&(t.payment_status=e.paymentStatus),e.search&&(t.search=e.search),e.dateFrom&&(t.date_from=e.dateFrom),e.dateTo&&(t.date_to=e.dateTo);const a=await n.get(l.ORDERS.SELLER_ORDERS,t);if(console.log("SellerOrderServiceAdapter: Respuesta de la API:",a),!a||a.success!==!0)throw new Error("Respuesta de API inválida");const r=Array.isArray(a.data)?a.data.map(c=>this.mapOrderToUI(c)):[],o=a.pagination||{currentPage:1,totalPages:1,totalItems:r.length,itemsPerPage:10},s={currentPage:Number(o.currentPage)||1,totalPages:Number(o.totalPages)||1,totalItems:Number(o.totalItems)||r.length,itemsPerPage:Number(o.itemsPerPage)||10};return{orders:r,pagination:s}}catch(t){return console.error("SellerOrderServiceAdapter: Error al obtener órdenes:",t),{orders:[],pagination:{currentPage:1,totalPages:1,totalItems:0,itemsPerPage:10}}}}mapOrderToUI(e){if(!e)return console.warn("SellerOrderServiceAdapter: Orden inválida recibida"),{id:"0",orderNumber:"N/A",date:new Date().toISOString(),customer:{id:0,name:"Cliente",email:"sin@email.com"},total:0,items:[],status:"pending",paymentStatus:"pending"};const t=e.customer?.name||"Cliente",a=e.customer?.email||"sin@email.com",r=Array.isArray(e.items)?e.items:[];return{id:String(e.id||0),orderNumber:e.orderNumber||`#${e.id||0}`,date:e.date||e.created_at||new Date().toISOString(),customer:{id:e.customer?.id||e.user_id||0,name:t,email:a},total:typeof e.total=="string"?parseFloat(e.total):e.total||0,items:r,status:e.status||"pending",paymentStatus:e.paymentStatus||e.payment_status||"pending",shippingAddress:typeof e.shippingAddress=="string"?e.shippingAddress:JSON.stringify(e.shippingAddress||{})}}async updateOrderStatus(e,t){try{console.log(`SellerOrderServiceAdapter: Actualizando orden ${e} a estado ${t}`);const a=await n.put(l.ORDERS.UPDATE_STATUS(Number(e)),{status:t});return!a||a.success!==!0?(console.error("Error al actualizar estado: Respuesta inválida",a),!1):(console.log("Estado de orden actualizado correctamente:",a.data||a.message),!0)}catch(a){return console.error(`SellerOrderServiceAdapter: Error al actualizar estado de orden ${e}:`,a),!1}}async getOrderStats(){try{console.log("SellerOrderServiceAdapter: Obteniendo estadísticas de órdenes");const e=await n.get(l.ORDERS.STATS);if(console.log("SellerOrderServiceAdapter: Respuesta de estadísticas:",e),!e||e.success!==!0)throw new Error("Respuesta de API inválida para estadísticas");const t=e.data||{};return[{label:"Total Pedidos",value:Number(t.totalOrders)||0,color:"blue"},{label:"Pendientes",value:Number(t.pendingOrders)||0,color:"yellow"},{label:"En Proceso",value:Number(t.processingOrders)||0,color:"blue"},{label:"Enviados",value:Number(t.shippedOrders)||0,color:"indigo"},{label:"Total Ventas",value:Number(t.totalSales)||0,isCurrency:!0,color:"green"}]}catch(e){return console.error("SellerOrderServiceAdapter: Error al obtener estadísticas:",e),[{label:"Total Pedidos",value:0,color:"blue"},{label:"Pendientes",value:0,color:"yellow"},{label:"En Proceso",value:0,color:"blue"},{label:"Total Ventas",value:0,isCurrency:!0,color:"green"}]}}async getOrderDetails(e){try{const t=typeof e=="string"?parseInt(e):e;console.log(`SellerOrderServiceAdapter: Obteniendo detalle de orden ${t} como vendedor`);const a=await n.get(l.ORDERS.SELLER_ORDER_DETAILS(t));if(console.log(`SellerOrderServiceAdapter: Respuesta para orden ${t}:`,a),!a||!a.data)throw new Error("Respuesta vacía al obtener detalle de orden");let r=a.data;if(r.items&&Array.isArray(r.items)){const s=r.items.reduce((p,d)=>p+d.price*d.quantity,0),u=s*.15,i=s+u;Math.abs(r.total-i)>.01&&(r.total=i)}const o={...r,userId:r.user_id,sellerId:r.seller_id,paymentId:r.payment_id,paymentMethod:r.payment_method,paymentStatus:r.payment_status,createdAt:r.created_at,updatedAt:r.updated_at,orderNumber:r.order_number,shippingData:r.shipping_data,items:r.items?.map(s=>({...s,productId:s.product_id,product:s.product||{id:s.product_id,name:s.product_name,image:s.product_image,sku:s.product_sku}}))||[]};return console.log("Orden adaptada para UI de vendedor:",o),o}catch(t){throw console.error(`SellerOrderServiceAdapter: Error al obtener detalle de orden ${e}:`,t),t}}async completeOrder(e){try{const t=typeof e=="string"?parseInt(e):e;console.log(`SellerOrderServiceAdapter: Completando orden ${t}`);const a=await n.post(l.ORDERS.COMPLETE(t));return console.log(`Respuesta al completar orden ${t}:`,a),a&&a.success===!0}catch(t){return console.error(`SellerOrderServiceAdapter: Error al completar orden ${e}:`,t),!1}}async updateShippingInfo(e,t){try{const a=typeof e=="string"?parseInt(e):e;console.log(`SellerOrderServiceAdapter: Actualizando información de envío para orden ${a}`);const r=await n.patch(l.ORDERS.UPDATE_SHIPPING(a),t);return console.log("Respuesta al actualizar información de envío:",r),r&&r.success===!0}catch(a){return console.error(`SellerOrderServiceAdapter: Error al actualizar información de envío para orden ${e}:`,a),!1}}}export{g as S};
//# sourceMappingURL=SellerOrderServiceAdapter-BBCqUj0a.js.map
