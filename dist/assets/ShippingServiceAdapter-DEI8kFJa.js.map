{"version":3,"file":"ShippingServiceAdapter-DEI8kFJa.js","sources":["../../src/core/adapters/ShippingServiceAdapter.ts"],"sourcesContent":["// src/core/adapters/ShippingServiceAdapter.ts - CORREGIDO COMPLETO\r\nimport ApiClient from \"../../infrastructure/api/apiClient\";\r\nimport { API_ENDPOINTS } from \"../../constants/apiEndpoints\";\r\n\r\n// Interfaces para shipping\r\nexport interface ShippingItem {\r\n\tid: string;\r\n\torderId: string;\r\n\torderNumber: string;\r\n\tdate: string;\r\n\tcustomer: {\r\n\t\tid: number;\r\n\t\tname: string;\r\n\t\temail: string;\r\n\t\tphone?: string;\r\n\t};\r\n\tstatus: \"pending\" | \"ready_to_ship\" | \"shipped\" | \"in_transit\" | \"delivered\" | \"failed\" | \"returned\";\r\n\ttrackingNumber?: string;\r\n\tcarrier?: string;\r\n\testimatedDelivery?: string;\r\n\tlastUpdate?: string;\r\n\tshippingAddress?: string;\r\n\tshippingMethod?: string;\r\n\tweight?: number;\r\n\tshippingCost?: number;\r\n}\r\n\r\nexport interface ShippingHistoryItem {\r\n\tdate: string;\r\n\tstatus: string;\r\n\tdescription: string;\r\n\tlocation?: string;\r\n}\r\n\r\nexport interface ShippingRouteItem {\r\n\tdate: string;\r\n\tlocation: string;\r\n\tstatus: string;\r\n}\r\n\r\nexport interface ShippingListResponse {\r\n\titems: ShippingItem[];\r\n\tpagination: {\r\n\t\tcurrentPage: number;\r\n\t\ttotalPages: number;\r\n\t\ttotalItems: number;\r\n\t\titemsPerPage: number;\r\n\t};\r\n}\r\n\r\n/**\r\n * Adaptador de servicio para gestión de envíos de vendedores\r\n * Actualizado para usar datos combinados de Orders y Shippings\r\n */\r\nexport default class ShippingServiceAdapter {\r\n\t/**\r\n\t * Obtiene la lista de envíos para el vendedor (usando datos combinados de Orders y Shippings)\r\n\t * Actualizado para usar el endpoint específico de shipping\r\n\t */\r\n\tasync getShippingsList(filters: any = {}): Promise<ShippingListResponse> {\r\n\t\ttry {\r\n\t\t\tconsole.log(\"ShippingServiceAdapter: Obteniendo envíos del vendedor\", filters);\r\n\r\n\t\t\t// ✅ USAR EL ENDPOINT DE SHIPPING CORRECTO según tus rutas\r\n\t\t\tconst response = await ApiClient.get<any>(\r\n\t\t\t\t'/shipping', // Ruta real según tu archivo de rutas\r\n\t\t\t\tfilters\r\n\t\t\t);\r\n\r\n\t\t\tconsole.log(\"ShippingServiceAdapter: Respuesta de envíos:\", response);\r\n\r\n\t\t\tif (!response) {\r\n\t\t\t\tthrow new Error(\"Respuesta vacía del servidor\");\r\n\t\t\t}\r\n\r\n\t\t\t// Manejar la respuesta del endpoint de shipping\r\n\t\t\tlet shippings = [];\r\n\t\t\tlet pagination = {\r\n\t\t\t\tcurrentPage: 1,\r\n\t\t\t\ttotalPages: 1,\r\n\t\t\t\ttotalItems: 0,\r\n\t\t\t\titemsPerPage: 10,\r\n\t\t\t};\r\n\r\n\t\t\tif (response.success && response.data) {\r\n\t\t\t\tshippings = Array.isArray(response.data) ? response.data : [];\r\n\t\t\t\tpagination = response.pagination || pagination;\r\n\t\t\t} else if (response.data && Array.isArray(response.data)) {\r\n\t\t\t\tshippings = response.data;\r\n\t\t\t\tpagination = response.meta || response.pagination || pagination;\r\n\t\t\t} else if (Array.isArray(response)) {\r\n\t\t\t\tshippings = response;\r\n\t\t\t}\r\n\r\n\t\t\t// ✅ MAPEAR DIRECTAMENTE LOS DATOS DE SHIPPING (ya vienen combinados del backend)\r\n\t\t\tconst items: ShippingItem[] = shippings.map((shipping: any) => this.mapShippingToItem(shipping));\r\n\r\n\t\t\treturn {\r\n\t\t\t\titems,\r\n\t\t\t\tpagination: {\r\n\t\t\t\t\tcurrentPage: Number(pagination.currentPage) || Number((pagination as any).current_page) || 1,\r\n\t\t\t\t\ttotalPages: Number(pagination.totalPages) || Number((pagination as any).last_page) || 1,\r\n\t\t\t\t\ttotalItems: Number(pagination.totalItems) || Number((pagination as any).total) || items.length,\r\n\t\t\t\t\titemsPerPage: Number(pagination.itemsPerPage) || Number((pagination as any).per_page) || 10,\r\n\t\t\t\t},\r\n\t\t\t};\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\"ShippingServiceAdapter: Error al obtener envíos:\", error);\r\n\t\t\t\r\n\t\t\t// ✅ FALLBACK: Si falla el endpoint de shipping, usar el de orders como respaldo\r\n\t\t\tconsole.log(\"Intentando con endpoint de orders como fallback...\");\r\n\t\t\treturn this.getShippingsListFromOrders(filters);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * ✅ NUEVO: Mapear datos de shipping (que ya incluyen datos de order) a ShippingItem\r\n\t */\r\n\tprivate mapShippingToItem(shippingData: any): ShippingItem {\r\n\t\tconsole.log(\"Mapeando datos de shipping:\", shippingData);\r\n\r\n\t\t// Los datos ya vienen del backend con información combinada\r\n\t\treturn {\r\n\t\t\tid: String(shippingData.id || 0),\r\n\t\t\torderId: String(shippingData.orderId || 0),\r\n\t\t\torderNumber: shippingData.order_number || shippingData.order?.order_number || `#${shippingData.order_id || 0}`,\r\n\t\t\tdate: shippingData.created_at || new Date().toISOString(),\r\n\t\t\tcustomer: {\r\n\t\t\t\tid: shippingData.user_id || shippingData.order?.user_id || 0,\r\n\t\t\t\tname: shippingData.user_name || shippingData.order?.user?.name || \"Cliente\",\r\n\t\t\t\temail: shippingData.order?.user?.email || \"sin@email.com\",\r\n\t\t\t\tphone: shippingData.order?.user?.phone,\r\n\t\t\t},\r\n\t\t\t// ✅ USAR DATOS REALES DE SHIPPING\r\n\t\t\tstatus: this.mapStatusFromAPI(shippingData.status || \"pending\"),\r\n\t\t\ttrackingNumber: shippingData.tracking_number || undefined,\r\n\t\t\tcarrier: shippingData.carrier_name || undefined,\r\n\t\t\testimatedDelivery: shippingData.estimated_delivery || undefined,\r\n\t\t\tlastUpdate: shippingData.updated_at || shippingData.last_updated || new Date().toISOString(),\r\n\t\t\tshippingAddress: shippingData.shipping_address || this.extractShippingAddress(shippingData),\r\n\t\t\tshippingMethod: \"Estándar\",\r\n\t\t\tweight: shippingData.weight || undefined,\r\n\t\t\tshippingCost: undefined, // Puedes obtenerlo de order si está disponible\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * ✅ FALLBACK: Método original como respaldo usando órdenes\r\n\t */\r\n\tprivate async getShippingsListFromOrders(filters: any = {}): Promise<ShippingListResponse> {\r\n\t\ttry {\r\n\t\t\tconst response = await ApiClient.get<any>(\r\n\t\t\t\tAPI_ENDPOINTS.ORDERS.SELLER_ORDERS,\r\n\t\t\t\tfilters\r\n\t\t\t);\r\n\r\n\t\t\tconsole.log(\"ShippingServiceAdapter: Respuesta de órdenes (fallback):\", response);\r\n\r\n\t\t\tif (!response) {\r\n\t\t\t\tthrow new Error(\"Respuesta vacía del servidor\");\r\n\t\t\t}\r\n\r\n\t\t\t// Manejar diferentes formatos de respuesta\r\n\t\t\tlet orders = [];\r\n\t\t\tlet pagination = {\r\n\t\t\t\tcurrentPage: 1,\r\n\t\t\t\ttotalPages: 1,\r\n\t\t\t\ttotalItems: 0,\r\n\t\t\t\titemsPerPage: 10,\r\n\t\t\t};\r\n\r\n\t\t\tif (response.success && response.data) {\r\n\t\t\t\torders = Array.isArray(response.data) ? response.data : [];\r\n\t\t\t\tpagination = response.pagination || pagination;\r\n\t\t\t} else if (response.data && Array.isArray(response.data)) {\r\n\t\t\t\torders = response.data;\r\n\t\t\t\tpagination = response.meta || response.pagination || pagination;\r\n\t\t\t} else if (Array.isArray(response)) {\r\n\t\t\t\torders = response;\r\n\t\t\t}\r\n\r\n\t\t\tconst items: ShippingItem[] = orders.map((order: any) => this.mapOrderToShippingItem(order));\r\n\r\n\t\t\treturn {\r\n\t\t\t\titems,\r\n\t\t\t\tpagination: {\r\n\t\t\t\t\tcurrentPage: Number(pagination.currentPage) || Number((pagination as any).current_page) || 1,\r\n\t\t\t\t\ttotalPages: Number(pagination.totalPages) || Number((pagination as any).last_page) || 1,\r\n\t\t\t\t\ttotalItems: Number(pagination.totalItems) || Number((pagination as any).total) || items.length,\r\n\t\t\t\t\titemsPerPage: Number(pagination.itemsPerPage) || Number((pagination as any).per_page) || 10,\r\n\t\t\t\t},\r\n\t\t\t};\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\"ShippingServiceAdapter: Error en fallback:\", error);\r\n\t\t\treturn {\r\n\t\t\t\titems: [],\r\n\t\t\t\tpagination: {\r\n\t\t\t\t\tcurrentPage: 1,\r\n\t\t\t\t\ttotalPages: 1,\r\n\t\t\t\t\ttotalItems: 0,\r\n\t\t\t\t\titemsPerPage: 10,\r\n\t\t\t\t},\r\n\t\t\t};\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * ✅ HELPER: Extraer dirección de shipping de los datos\r\n\t */\r\n\tprivate extractShippingAddress(shippingData: any): string {\r\n\t\t// Si ya viene formateada desde el backend\r\n\t\tif (shippingData.shipping_address) {\r\n\t\t\treturn shippingData.shipping_address;\r\n\t\t}\r\n\r\n\t\t// Si viene en order.shipping_data\r\n\t\tif (shippingData.order?.shipping_data) {\r\n\t\t\tconst shippingInfo = typeof shippingData.order.shipping_data === 'string' \r\n\t\t\t\t? JSON.parse(shippingData.order.shipping_data) \r\n\t\t\t\t: shippingData.order.shipping_data;\r\n\t\t\t\r\n\t\t\treturn [\r\n\t\t\t\tshippingInfo.address,\r\n\t\t\t\tshippingInfo.city,\r\n\t\t\t\tshippingInfo.state,\r\n\t\t\t\tshippingInfo.country\r\n\t\t\t].filter(Boolean).join(', ');\r\n\t\t}\r\n\r\n\t\treturn \"Dirección no disponible\";\r\n\t}\r\n\r\n\t/**\r\n\t * Obtiene los detalles de un envío específico - CORREGIDO\r\n\t */\r\n\tasync getShippingDetails(shippingId: string): Promise<ShippingItem | null> {\r\n\t\ttry {\r\n\t\t\tconsole.log(`ShippingServiceAdapter: Obteniendo detalles del envío ${shippingId}`);\r\n\r\n\t\t\t// ✅ USAR LA RUTA CORRECTA según tu archivo de rutas\r\n\t\t\tconst response = await ApiClient.get<any>(\r\n\t\t\t\t`/shipping/${shippingId}`\r\n\t\t\t);\r\n\r\n\t\t\tconsole.log(\"ShippingServiceAdapter: Respuesta de detalles:\", response);\r\n\r\n\t\t\tif (!response) {\r\n\t\t\t\tthrow new Error(\"No se encontraron detalles del envío\");\r\n\t\t\t}\r\n\r\n\t\t\t// Manejar diferentes formatos de respuesta\r\n\t\t\tlet shippingData;\r\n\t\t\tif (response.success && response.data) {\r\n\t\t\t\tshippingData = response.data;\r\n\t\t\t} else if (response.data) {\r\n\t\t\t\tshippingData = response.data;\r\n\t\t\t} else {\r\n\t\t\t\tshippingData = response;\r\n\t\t\t}\r\n\r\n\t\t\tif (!shippingData) {\r\n\t\t\t\tthrow new Error(\"Datos de envío vacíos\");\r\n\t\t\t}\r\n\r\n\t\t\t// ✅ USAR EL MAPEO CORRECTO PARA DATOS DE SHIPPING\r\n\t\t\treturn this.mapShippingToItem(shippingData);\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(`ShippingServiceAdapter: Error al obtener detalles del envío ${shippingId}:`, error);\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Actualiza el estado de un envío - CORREGIDO\r\n\t */\r\n\tasync updateShippingStatus(shippingId: string, newStatus: ShippingItem[\"status\"]): Promise<boolean> {\r\n\t\ttry {\r\n\t\t\tconsole.log(`ShippingServiceAdapter: Actualizando estado del envío ${shippingId} a ${newStatus}`);\r\n\r\n\t\t\t// ✅ USAR LA RUTA CORRECTA según tu archivo de rutas\r\n\t\t\tconst response = await ApiClient.patch<any>(\r\n\t\t\t\t`/shipping/${shippingId}/status`,\r\n\t\t\t\t{\r\n\t\t\t\t\tstatus: newStatus,\r\n\t\t\t\t}\r\n\t\t\t);\r\n\r\n\t\t\tconsole.log(\"ShippingServiceAdapter: Respuesta de actualización:\", response);\r\n\t\t\t\r\n\t\t\t// Verificar diferentes formatos de respuesta exitosa\r\n\t\t\tconst isSuccess = response && (\r\n\t\t\t\tresponse.status === \"success\" || \r\n\t\t\t\tresponse.success === true ||\r\n\t\t\t\tresponse.message?.includes(\"success\")\r\n\t\t\t);\r\n\r\n\t\t\treturn isSuccess;\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(`ShippingServiceAdapter: Error al actualizar estado:`, error);\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Marca un pedido como enviado con información de seguimiento\r\n\t */\r\n\tasync markAsShipped(orderId: string, shippingData: {\r\n\t\ttracking_number: string;\r\n\t\tshipping_company: string;\r\n\t\testimated_delivery?: string;\r\n\t\tnotes?: string;\r\n\t}): Promise<boolean> {\r\n\t\ttry {\r\n\t\t\tconsole.log(`ShippingServiceAdapter: Marcando orden ${orderId} como enviada`, shippingData);\r\n\r\n\t\t\t// Usar el endpoint de actualización de información de envío\r\n\t\t\tconst response = await ApiClient.patch<any>(\r\n\t\t\t\tAPI_ENDPOINTS.ORDERS.UPDATE_SHIPPING(Number(orderId)),\r\n\t\t\t\tshippingData\r\n\t\t\t);\r\n\r\n\t\t\tconsole.log(\"ShippingServiceAdapter: Respuesta al marcar como enviado:\", response);\r\n\r\n\t\t\treturn response && response.success === true;\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(`ShippingServiceAdapter: Error al marcar orden ${orderId} como enviada:`, error);\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Obtiene el historial de un envío por número de seguimiento\r\n\t */\r\n\tasync getShippingHistory(trackingNumber: string): Promise<ShippingHistoryItem[]> {\r\n\t\ttry {\r\n\t\t\tconsole.log(`ShippingServiceAdapter: Obteniendo historial para ${trackingNumber}`);\r\n\r\n\t\t\t// ✅ USAR LA RUTA CORRECTA según tu archivo de rutas\r\n\t\t\tconst response = await ApiClient.get<any>(\r\n\t\t\t\t`/shipping/${trackingNumber}/history`\r\n\t\t\t);\r\n\r\n\t\t\tconsole.log(\"ShippingServiceAdapter: Respuesta de historial:\", response);\r\n\r\n\t\t\tif (!response || !response.data || !response.data.history) {\r\n\t\t\t\treturn [];\r\n\t\t\t}\r\n\r\n\t\t\t// Mapear el historial al formato esperado\r\n\t\t\treturn Array.isArray(response.data.history) \r\n\t\t\t\t? response.data.history.map((item: any) => ({\r\n\t\t\t\t\tdate: item.timestamp || item.date || new Date().toISOString(),\r\n\t\t\t\t\tstatus: item.status || \"unknown\",\r\n\t\t\t\t\tdescription: item.description || item.details || `Estado: ${item.status}`,\r\n\t\t\t\t\tlocation: item.location?.address || item.location || undefined,\r\n\t\t\t\t}))\r\n\t\t\t\t: [];\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(`ShippingServiceAdapter: Error al obtener historial para ${trackingNumber}:`, error);\r\n\t\t\treturn [];\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Obtiene la ruta de un envío por número de seguimiento\r\n\t */\r\n\tasync getShippingRoute(trackingNumber: string): Promise<ShippingRouteItem[]> {\r\n\t\ttry {\r\n\t\t\tconsole.log(`ShippingServiceAdapter: Obteniendo ruta para ${trackingNumber}`);\r\n\r\n\t\t\t// ✅ USAR LA RUTA CORRECTA según tu archivo de rutas\r\n\t\t\tconst response = await ApiClient.get<any>(\r\n\t\t\t\t`/shipping/${trackingNumber}/route`\r\n\t\t\t);\r\n\r\n\t\t\tconsole.log(\"ShippingServiceAdapter: Respuesta de ruta:\", response);\r\n\r\n\t\t\tif (!response || !response.data || !response.data.route_points) {\r\n\t\t\t\treturn [];\r\n\t\t\t}\r\n\r\n\t\t\t// Mapear los puntos de ruta al formato esperado\r\n\t\t\treturn Array.isArray(response.data.route_points)\r\n\t\t\t\t? response.data.route_points.map((item: any) => ({\r\n\t\t\t\t\tdate: item.timestamp || item.date || new Date().toISOString(),\r\n\t\t\t\t\tlocation: item.address || item.location || \"Ubicación desconocida\",\r\n\t\t\t\t\tstatus: item.status || \"unknown\",\r\n\t\t\t\t}))\r\n\t\t\t\t: [];\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(`ShippingServiceAdapter: Error al obtener ruta para ${trackingNumber}:`, error);\r\n\t\t\treturn [];\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Mapea una orden del API al formato de ShippingItem para la UI\r\n\t * Simplificado para que funcione con cualquier estructura de datos\r\n\t */\r\n\tprivate mapOrderToShippingItem(apiOrder: any): ShippingItem {\r\n\t\t// Manejar caso donde el objeto es null o undefined\r\n\t\tif (!apiOrder) {\r\n\t\t\treturn this.getDefaultShippingItem();\r\n\t\t}\r\n\r\n\t\tconsole.log(\"Mapeando orden a shipping item:\", apiOrder);\r\n\r\n\t\t// Extraer información del cliente de diferentes posibles ubicaciones\r\n\t\tconst customer = apiOrder.user || apiOrder.customer || {};\r\n\t\t\r\n\t\t// Extraer dirección de envío\r\n\t\tlet shippingAddress = \"\";\r\n\t\tif (apiOrder.shipping_data) {\r\n\t\t\tif (typeof apiOrder.shipping_data === 'string') {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tconst parsed = JSON.parse(apiOrder.shipping_data);\r\n\t\t\t\t\tshippingAddress = [parsed.address, parsed.city, parsed.state, parsed.country]\r\n\t\t\t\t\t\t.filter(Boolean)\r\n\t\t\t\t\t\t.join(', ');\r\n\t\t\t\t} catch (e) {\r\n\t\t\t\t\tshippingAddress = apiOrder.shipping_data;\r\n\t\t\t\t}\r\n\t\t\t} else if (typeof apiOrder.shipping_data === 'object') {\r\n\t\t\t\tshippingAddress = [\r\n\t\t\t\t\tapiOrder.shipping_data.address, \r\n\t\t\t\t\tapiOrder.shipping_data.city, \r\n\t\t\t\t\tapiOrder.shipping_data.state, \r\n\t\t\t\t\tapiOrder.shipping_data.country\r\n\t\t\t\t].filter(Boolean).join(', ');\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Determinar estado del envío de forma simple\r\n\t\tlet shippingStatus: ShippingItem[\"status\"] = \"pending\";\r\n\t\t\r\n\t\t// Mapear estados de orden a estados de envío\r\n\t\tswitch (apiOrder.status) {\r\n\t\t\tcase \"shipped\":\r\n\t\t\t\tshippingStatus = \"shipped\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"delivered\":\r\n\t\t\t\tshippingStatus = \"delivered\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"processing\":\r\n\t\t\t\tshippingStatus = \"ready_to_ship\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"in_transit\":\r\n\t\t\t\tshippingStatus = \"in_transit\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"failed\":\r\n\t\t\t\tshippingStatus = \"failed\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"returned\":\r\n\t\t\t\tshippingStatus = \"returned\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"cancelled\":\r\n\t\t\t\tshippingStatus = \"failed\"; // Cancelado se muestra como fallido en shipping\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"completed\":\r\n\t\t\t\tshippingStatus = \"delivered\"; // Completado se muestra como entregado\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tshippingStatus = \"pending\";\r\n\t\t}\r\n\r\n\t\t// Si hay shipping_status específico, usarlo\r\n\t\tif (apiOrder.shipping_status) {\r\n\t\t\tshippingStatus = this.mapStatusFromAPI(apiOrder.shipping_status);\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\tid: String(apiOrder.id || 0),\r\n\t\t\torderId: String(apiOrder.id || 0),\r\n\t\t\torderNumber: apiOrder.order_number || apiOrder.orderNumber || `#${apiOrder.id || 0}`,\r\n\t\t\tdate: apiOrder.created_at || apiOrder.date || new Date().toISOString(),\r\n\t\t\tcustomer: {\r\n\t\t\t\tid: customer.id || 0,\r\n\t\t\t\tname: customer.name || \"Cliente\",\r\n\t\t\t\temail: customer.email || \"sin@email.com\",\r\n\t\t\t\tphone: customer.phone || apiOrder.phone,\r\n\t\t\t},\r\n\t\t\tstatus: shippingStatus,\r\n\t\t\ttrackingNumber: apiOrder.tracking_number || undefined,\r\n\t\t\tcarrier: apiOrder.shipping_company || apiOrder.carrier || undefined,\r\n\t\t\testimatedDelivery: apiOrder.estimated_delivery || undefined,\r\n\t\t\tlastUpdate: apiOrder.updated_at || new Date().toISOString(),\r\n\t\t\tshippingAddress: shippingAddress || \"Dirección no disponible\",\r\n\t\t\tshippingMethod: \"Estándar\",\r\n\t\t\tweight: undefined,\r\n\t\t\tshippingCost: undefined,\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Mapea el estado del API al formato de la UI\r\n\t */\r\n\tprivate mapStatusFromAPI(apiStatus: string): ShippingItem[\"status\"] {\r\n\t\tif (!apiStatus) return \"pending\";\r\n\r\n\t\tswitch (apiStatus.toLowerCase()) {\r\n\t\t\tcase \"pending\":\r\n\t\t\t\treturn \"pending\";\r\n\t\t\tcase \"processing\":\r\n\t\t\tcase \"ready_for_pickup\":\r\n\t\t\tcase \"ready_to_ship\":\r\n\t\t\t\treturn \"ready_to_ship\";\r\n\t\t\tcase \"picked_up\":\r\n\t\t\tcase \"shipped\":\r\n\t\t\t\treturn \"shipped\";\r\n\t\t\tcase \"in_transit\":\r\n\t\t\tcase \"out_for_delivery\":\r\n\t\t\t\treturn \"in_transit\";\r\n\t\t\tcase \"delivered\":\r\n\t\t\tcase \"completed\":\r\n\t\t\t\treturn \"delivered\";\r\n\t\t\tcase \"exception\":\r\n\t\t\tcase \"failed\":\r\n\t\t\tcase \"cancelled\":\r\n\t\t\t\treturn \"failed\";\r\n\t\t\tcase \"returned\":\r\n\t\t\t\treturn \"returned\";\r\n\t\t\tdefault:\r\n\t\t\t\treturn \"pending\";\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Retorna un item de envío por defecto\r\n\t */\r\n\tprivate getDefaultShippingItem(): ShippingItem {\r\n\t\treturn {\r\n\t\t\tid: \"0\",\r\n\t\t\torderId: \"0\",\r\n\t\t\torderNumber: \"#0\",\r\n\t\t\tdate: new Date().toISOString(),\r\n\t\t\tcustomer: {\r\n\t\t\t\tid: 0,\r\n\t\t\t\tname: \"Cliente\",\r\n\t\t\t\temail: \"sin@email.com\",\r\n\t\t\t},\r\n\t\t\tstatus: \"pending\",\r\n\t\t};\r\n\t}\r\n}"],"names":["ShippingServiceAdapter","filters","response","ApiClient","shippings","pagination","items","shipping","error","shippingData","API_ENDPOINTS","orders","order","shippingInfo","shippingId","newStatus","orderId","trackingNumber","item","apiOrder","customer","shippingAddress","parsed","shippingStatus","apiStatus"],"mappings":"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"}