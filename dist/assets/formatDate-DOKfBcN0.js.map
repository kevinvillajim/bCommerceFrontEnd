{"version":3,"file":"formatDate-DOKfBcN0.js","sources":["../../src/utils/formatters/formatDate.ts"],"sourcesContent":["/**\r\n * Formatea una fecha en formato de fecha y hora local\r\n *\r\n * @param dateString Cadena de fecha ISO o Date\r\n * @param options Opciones de formato\r\n * @returns Fecha formateada\r\n */\r\nexport const formatDate = (\r\n\tdateString: string | Date,\r\n\toptions: {\r\n\t\tshowTime?: boolean;\r\n\t\ttimeFormat?: \"12h\" | \"24h\";\r\n\t\tdateFormat?: \"short\" | \"medium\" | \"long\";\r\n\t} = {}\r\n): string => {\r\n\tif (!dateString) return \"Sin fecha\";\r\n\r\n\ttry {\r\n\t\tconst date =\r\n\t\t\ttypeof dateString === \"string\" ? new Date(dateString) : dateString;\r\n\r\n\t\t// Verificar si la fecha es válida\r\n\t\tif (isNaN(date.getTime())) {\r\n\t\t\treturn \"Fecha inválida\";\r\n\t\t}\r\n\r\n\t\tconst {\r\n\t\t\tshowTime = true,\r\n\t\t\ttimeFormat = \"24h\",\r\n\t\t\tdateFormat = \"medium\",\r\n\t\t} = options;\r\n\r\n\t\t// Opciones para la fecha\r\n\t\tconst dateOptions: Intl.DateTimeFormatOptions = {\r\n\t\t\tday: \"numeric\",\r\n\t\t\tmonth: \"long\",\r\n\t\t\tyear: \"numeric\",\r\n\t\t};\r\n\r\n\t\tif (dateFormat === \"short\") {\r\n\t\t\tdateOptions.month = \"numeric\";\r\n\t\t} else if (dateFormat === \"long\") {\r\n\t\t\tdateOptions.weekday = \"long\";\r\n\t\t}\r\n\r\n\t\t// Opciones para la hora\r\n\t\tconst timeOptions: Intl.DateTimeFormatOptions = {\r\n\t\t\thour: \"numeric\",\r\n\t\t\tminute: \"numeric\",\r\n\t\t};\r\n\r\n\t\tif (timeFormat === \"12h\") {\r\n\t\t\ttimeOptions.hour12 = true;\r\n\t\t} else {\r\n\t\t\ttimeOptions.hour12 = false;\r\n\t\t}\r\n\r\n\t\t// Formatear la fecha y hora\r\n\t\tlet formattedDate = date.toLocaleDateString(\"es-ES\", dateOptions);\r\n\r\n\t\tif (showTime) {\r\n\t\t\tconst formattedTime = date.toLocaleTimeString(\"es-ES\", timeOptions);\r\n\t\t\tformattedDate += ` ${formattedTime}`;\r\n\t\t}\r\n\r\n\t\treturn formattedDate;\r\n\t} catch (error) {\r\n\t\tconsole.error(\"Error al formatear fecha:\", error);\r\n\t\treturn String(dateString);\r\n\t}\r\n};\r\n\r\n/**\r\n * Devuelve una cadena con el tiempo relativo (\"hace 5 minutos\", \"ayer\", etc.)\r\n *\r\n * @param dateString Cadena de fecha ISO o Date\r\n * @returns Tiempo relativo\r\n */\r\nexport const getRelativeTime = (dateString: string | Date): string => {\r\n\tif (!dateString) return \"\";\r\n\r\n\ttry {\r\n\t\tconst date =\r\n\t\t\ttypeof dateString === \"string\" ? new Date(dateString) : dateString;\r\n\r\n\t\t// Verificar si la fecha es válida\r\n\t\tif (isNaN(date.getTime())) {\r\n\t\t\treturn \"\";\r\n\t\t}\r\n\r\n\t\tconst now = new Date();\r\n\t\tconst diffInSeconds = Math.floor((now.getTime() - date.getTime()) / 1000);\r\n\r\n\t\t// Menos de un minuto\r\n\t\tif (diffInSeconds < 60) {\r\n\t\t\treturn \"hace unos segundos\";\r\n\t\t}\r\n\r\n\t\t// Menos de una hora\r\n\t\tif (diffInSeconds < 3600) {\r\n\t\t\tconst minutes = Math.floor(diffInSeconds / 60);\r\n\t\t\treturn `hace ${minutes} ${minutes === 1 ? \"minuto\" : \"minutos\"}`;\r\n\t\t}\r\n\r\n\t\t// Menos de un día\r\n\t\tif (diffInSeconds < 86400) {\r\n\t\t\tconst hours = Math.floor(diffInSeconds / 3600);\r\n\t\t\treturn `hace ${hours} ${hours === 1 ? \"hora\" : \"horas\"}`;\r\n\t\t}\r\n\r\n\t\t// Menos de una semana\r\n\t\tif (diffInSeconds < 604800) {\r\n\t\t\tconst days = Math.floor(diffInSeconds / 86400);\r\n\t\t\tif (days === 1) return \"ayer\";\r\n\t\t\treturn `hace ${days} días`;\r\n\t\t}\r\n\r\n\t\t// Menos de un mes\r\n\t\tif (diffInSeconds < 2592000) {\r\n\t\t\tconst weeks = Math.floor(diffInSeconds / 604800);\r\n\t\t\treturn `hace ${weeks} ${weeks === 1 ? \"semana\" : \"semanas\"}`;\r\n\t\t}\r\n\r\n\t\t// Menos de un año\r\n\t\tif (diffInSeconds < 31536000) {\r\n\t\t\tconst months = Math.floor(diffInSeconds / 2592000);\r\n\t\t\treturn `hace ${months} ${months === 1 ? \"mes\" : \"meses\"}`;\r\n\t\t}\r\n\r\n\t\t// Más de un año\r\n\t\tconst years = Math.floor(diffInSeconds / 31536000);\r\n\t\treturn `hace ${years} ${years === 1 ? \"año\" : \"años\"}`;\r\n\t} catch (error) {\r\n\t\tconsole.error(\"Error al calcular tiempo relativo:\", error);\r\n\t\treturn \"\";\r\n\t}\r\n};\r\n"],"names":["formatDate","dateString","options","date","showTime","timeFormat","dateFormat","dateOptions","timeOptions","formattedDate","formattedTime","error"],"mappings":"AAOO,MAAMA,EAAa,CACzBC,EACAC,EAII,KACQ,CACR,GAAA,CAACD,EAAmB,MAAA,YAEpB,GAAA,CACH,MAAME,EACL,OAAOF,GAAe,SAAW,IAAI,KAAKA,CAAU,EAAIA,EAGzD,GAAI,MAAME,EAAK,QAAQ,CAAC,EAChB,MAAA,iBAGF,KAAA,CACL,SAAAC,EAAW,GACX,WAAAC,EAAa,MACb,WAAAC,EAAa,QAAA,EACVJ,EAGEK,EAA0C,CAC/C,IAAK,UACL,MAAO,OACP,KAAM,SACP,EAEID,IAAe,QAClBC,EAAY,MAAQ,UACVD,IAAe,SACzBC,EAAY,QAAU,QAIvB,MAAMC,EAA0C,CAC/C,KAAM,UACN,OAAQ,SACT,EAEIH,IAAe,MAClBG,EAAY,OAAS,GAErBA,EAAY,OAAS,GAItB,IAAIC,EAAgBN,EAAK,mBAAmB,QAASI,CAAW,EAEhE,GAAIH,EAAU,CACb,MAAMM,EAAgBP,EAAK,mBAAmB,QAASK,CAAW,EAClEC,GAAiB,IAAIC,CAAa,EAAA,CAG5B,OAAAD,QACCE,EAAO,CACP,eAAA,MAAM,4BAA6BA,CAAK,EACzC,OAAOV,CAAU,CAAA,CAE1B"}