import{l as o,t as l}from"./index-DmNDOrWy.js";class d{async getAdminOrders(e){try{console.log("AdminOrderService: Obteniendo órdenes con filtros:",e);const r=await o.get(l.ADMIN.ORDERS,e);console.log("AdminOrderService: Respuesta de órdenes:",r);const a=r?.data||[],s=r?.pagination||{currentPage:1,totalPages:1,totalItems:0,itemsPerPage:10};return{data:a,meta:{total:s.totalItems,per_page:s.itemsPerPage,current_page:s.currentPage,last_page:s.totalPages}}}catch(r){return console.error("AdminOrderService: Error al obtener órdenes:",r),{data:[],meta:{total:0,per_page:10,current_page:1,last_page:1}}}}async getOrderDetails(e){try{console.log(`AdminOrderService: Obteniendo detalle de orden ${e}`);const r=await o.get(l.ADMIN.ORDER_DETAIL(e));if(console.log(`AdminOrderService: Respuesta para orden ${e}:`,r),!r||!r.data)throw new Error("Respuesta vacía al obtener detalle de orden");return r.data}catch(r){throw console.error(`AdminOrderService: Error al obtener detalle de orden ${e}:`,r),r}}async updateOrderStatus(e,r){try{console.log(`AdminOrderService: Actualizando estado de orden ${e} a ${r.status}`);const a=await o.patch(l.ADMIN.UPDATE_ORDER_STATUS(e),r);if(console.log(`AdminOrderService: Respuesta de actualización para orden ${e}:`,a),!a||!a.data)throw new Error("Respuesta vacía al actualizar estado de orden");return a.data}catch(a){throw console.error(`AdminOrderService: Error al actualizar estado de orden ${e}:`,a),a}}async cancelOrder(e,r=""){try{console.log(`AdminOrderService: Cancelando orden ${e}`);const a=await o.post(l.ADMIN.CANCEL_ORDER(e),{reason:r});return console.log(`AdminOrderService: Respuesta de cancelar orden ${e}:`,a),a?.success||!1}catch(a){return console.error(`AdminOrderService: Error al cancelar orden ${e}:`,a),!1}}async updateShippingInfo(e,r){try{console.log(`AdminOrderService: Actualizando información de envío para orden ${e}`);const a=await o.patch(l.ADMIN.UPDATE_SHIPPING(e),r);return console.log(`AdminOrderService: Respuesta de actualización de envío para ${e}:`,a),a?.success||!1}catch(a){return console.error(`AdminOrderService: Error al actualizar envío de orden ${e}:`,a),!1}}async getOrderStats(){try{console.log("AdminOrderService: Obteniendo estadísticas de órdenes");const e=await o.get(l.ADMIN.ORDER_STATS);if(console.log("AdminOrderService: Respuesta de estadísticas:",e),!e||!e.data)throw new Error("Respuesta vacía al obtener estadísticas");return e.data}catch(e){return console.error("AdminOrderService: Error al obtener estadísticas:",e),{totalOrders:0,pendingOrders:0,processingOrders:0,shippedOrders:0,deliveredOrders:0,cancelledOrders:0,totalSales:0}}}}class p{adminOrderService;constructor(){this.adminOrderService=new d}async getAdminOrders(e){try{const r={...e};e?.status==="all"&&delete r.status,e?.paymentStatus==="all"&&delete r.paymentStatus,e?.sellerId===null&&delete r.sellerId;const a=await this.adminOrderService.getAdminOrders(r),s=a.data.map(n=>this.adaptOrderToUI(n)),c={currentPage:a.meta.current_page,totalPages:a.meta.last_page,totalItems:a.meta.total,itemsPerPage:a.meta.per_page};return{orders:s,pagination:c}}catch(r){return console.error("Error en AdminOrderServiceAdapter.getAdminOrders:",r),{orders:[],pagination:{currentPage:1,totalPages:1,totalItems:0,itemsPerPage:10}}}}async getOrderDetails(e){try{const r=await this.adminOrderService.getOrderDetails(e);return this.adaptOrderToUI(r)}catch(r){return console.error(`Error al obtener detalles de la orden ${e}:`,r),null}}async updateOrderStatus(e,r){try{return await this.adminOrderService.updateOrderStatus(e,{status:r}),!0}catch(a){return console.error(`Error al actualizar estado de la orden ${e}:`,a),!1}}async cancelOrder(e,r=""){try{return await this.adminOrderService.cancelOrder(e,r)}catch(a){return console.error(`Error al cancelar la orden ${e}:`,a),!1}}async getOrderStats(){try{const e=await this.adminOrderService.getOrderStats();return[{label:"Total Pedidos",value:e.totalOrders,color:"blue",isCurrency:!1},{label:"Pendientes",value:e.pendingOrders,color:"yellow",isCurrency:!1},{label:"En Proceso",value:e.processingOrders,color:"blue",isCurrency:!1},{label:"Enviados",value:e.shippedOrders,color:"indigo",isCurrency:!1},{label:"Entregados",value:e.deliveredOrders,color:"purple",isCurrency:!1},{label:"Completados",value:e.completedOrders,color:"green",isCurrency:!1},{label:"Cancelados",value:e.cancelledOrders,color:"red",isCurrency:!1},{label:"Total Ventas",value:e.totalSales,color:"green",isCurrency:!0}]}catch(e){return console.error("Error en AdminOrderServiceAdapter.getOrderStats:",e),[]}}adaptOrderToUI(e){const r=e.user_name||(e.user?e.user.name:"Cliente")||(e.customer?e.customer.name:"Cliente"),a=e.user_email||(e.user?e.user.email:"")||(e.customer?e.customer.email:""),s=e.seller_name||(e.seller?e.seller.name:"Vendedor")||"Vendedor",c=Array.isArray(e.items)?e.items.map(t=>({id:t.id||0,productId:t.product_id||t.productId||0,name:t.product_name||(t.product?t.product.name:"Producto"),quantity:t.quantity||0,price:t.price||0,subtotal:t.subtotal||0,image:t.product_image||(t.product?t.product.image:void 0)})):[];let n=null;if(e.shipping_data)if(typeof e.shipping_data=="string")try{n=JSON.parse(e.shipping_data)}catch(t){console.error("Error al parsear shipping_data:",t),n={}}else n=e.shipping_data;return{id:e.id||0,orderNumber:e.order_number||e.orderNumber||`#${e.id}`,date:e.created_at||e.createdAt||e.date||new Date().toISOString(),customer:{id:e.user_id||(e.user?e.user.id:0)||0,name:r,email:a},seller:{id:e.seller_id||(e.seller?e.seller.id:0)||0,name:s},total:e.total||0,status:e.status||"pending",paymentStatus:e.payment_status||e.paymentStatus||"pending",paymentMethod:e.payment_method||e.paymentMethod||"N/A",items:c,shippingData:n}}}export{p as A};
//# sourceMappingURL=AdminOrderServiceAdapter-pJBu4i2T.js.map
