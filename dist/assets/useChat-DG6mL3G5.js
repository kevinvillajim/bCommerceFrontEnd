import{r as d}from"./react-vendor-Cy458wKG.js";import{u as Q}from"./chat-chunk-dxmpBB-S.js";import{A as p,c as w,i as $}from"./admin-chunk-C7Ad4l4I.js";class W{isSeller;serviceId;constructor(a=!1){this.isSeller=a,this.serviceId=`chat-service-${Date.now()}-${Math.round(Math.random()*1e3)}`,console.log(`ChatService inicializado como ${a?"vendedor":"usuario"} (ID: ${this.serviceId})`)}getEndpoint(a,...r){if(this.isSeller)switch(a){case"LIST":return p.CHAT.SELLER.LIST;case"DETAILS":return p.CHAT.SELLER.DETAILS(r[0]);case"SEND_MESSAGE":return p.CHAT.SELLER.SEND_MESSAGE(r[0]);case"UPDATE_STATUS":return p.CHAT.SELLER.UPDATE_STATUS(r[0]);case"GET_MESSAGES":return p.CHAT.SELLER.GET_MESSAGES(r[0]);case"MARK_ALL_READ":return p.CHAT.SELLER.MARK_ALL_READ(r[0]);case"MARK_MESSAGE_READ":return p.CHAT.MARK_MESSAGE_READ(r[0],r[1]);case"DELETE":return p.CHAT.DELETE(r[0]);case"CREATE":return p.CHAT.CREATE;default:return""}else switch(a){case"LIST":return p.CHAT.LIST;case"DETAILS":return p.CHAT.DETAILS(r[0]);case"CREATE":return p.CHAT.CREATE;case"SEND_MESSAGE":return p.CHAT.SEND_MESSAGE(r[0]);case"UPDATE_STATUS":return p.CHAT.UPDATE_STATUS(r[0]);case"DELETE":return p.CHAT.DELETE(r[0]);case"GET_MESSAGES":return p.CHAT.GET_MESSAGES(r[0]);case"MARK_ALL_READ":return p.CHAT.MARK_ALL_READ(r[0]);case"MARK_MESSAGE_READ":return p.CHAT.MARK_MESSAGE_READ(r[0],r[1]);default:return""}}validateApiResponse(a,r=[]){if(!a||typeof a!="object")return console.warn("Respuesta invÃ¡lida del API:",a),null;for(const s of r)if(!(s in a))return console.warn(`Campo requerido '${s}' no encontrado en respuesta:`,a),null;return a}async getChats(){try{console.log(`ChatService (${this.serviceId}): Obteniendo lista de chats ${this.isSeller?"como vendedor":"como usuario"}`);const a=this.getEndpoint("LIST"),r=await w.get(a),s=this.validateApiResponse(r);if(!s)return{status:"error",data:[]};if(s.status==="success"){const o=Array.isArray(s.data)?s.data:s.data?.data||[];return console.log(`ChatService (${this.serviceId}): Se encontraron ${o.length} chats`),{status:"success",data:o,meta:s.data?.meta||s.meta}}else if(Array.isArray(s))return console.log(`ChatService (${this.serviceId}): Array directo con ${s.length} chats`),{status:"success",data:s};return console.log(`ChatService (${this.serviceId}): No se encontraron chats`),{status:"success",data:[]}}catch(a){return console.error(`ChatService (${this.serviceId}): Error al obtener chats:`,a),{status:"error",data:[]}}}async getChatDetails(a,r=1,s=50){try{console.log(`ChatService (${this.serviceId}): Obteniendo detalles del chat ${a}`);const o=this.getEndpoint("DETAILS",a),i=await w.get(`${o}?page=${r}&limit=${s}`),g=this.validateApiResponse(i,["status"]);if(!g)throw new Error(`No se pudo obtener informaciÃ³n del chat ${a}`);if(g.status==="success"){const y=g.data||{},E=y.chat||{id:a,userId:0,sellerId:0,productId:0,status:"active",messages:[]},b=y.messages||[],u=y.pagination||{currentPage:r,limit:s,total:b.length};return E.id||(E.id=a),{status:"success",data:{chat:E,messages:b,pagination:u}}}throw new Error(`Error en respuesta del servidor: ${g.status}`)}catch(o){throw console.error(`ChatService (${this.serviceId}): Error al obtener detalles del chat ${a}:`,o),o}}async getMessages(a,r=1,s=20){try{const o=this.getEndpoint("GET_MESSAGES",a),i=await w.get(`${o}?page=${r}&limit=${s}`),g=this.validateApiResponse(i);if(!g)throw new Error(`No se pudieron obtener los mensajes del chat ${a}`);const y=g.data?.messages||[],E=g.data?.pagination||{currentPage:r,limit:s,total:0};return{status:"success",data:{messages:y,pagination:E}}}catch(o){throw console.error(`ChatService (${this.serviceId}): Error al obtener mensajes del chat ${a}:`,o),o}}async sendMessage(a,r){try{if(console.log(`ChatService (${this.serviceId}): Enviando mensaje al chat ${a}`),!a||!r.content.trim())throw new Error("ID de chat o contenido del mensaje invÃ¡lidos");const s=this.getEndpoint("SEND_MESSAGE",a),o=await w.post(s,r),i=this.validateApiResponse(o);if(!i)throw new Error("No se recibiÃ³ respuesta al enviar mensaje");if(i.status==="error"){const g=new Error(i.message);throw g.response={data:i},g}if(i.status==="success")return{status:i.status,message:i.message||"Mensaje enviado",data:{message:i.data?.message||{id:Date.now(),chatId:a,senderId:0,content:r.content,isRead:!1,createdAt:new Date().toISOString()}}};throw new Error("Formato de respuesta inesperado")}catch(s){throw console.error(`ChatService (${this.serviceId}): Error al enviar mensaje:`,s),s}}async createChat(a){try{if(console.log(`ChatService (${this.serviceId}): Creando chat`),!a.seller_id||!a.product_id)throw new Error("ID de vendedor o producto invÃ¡lidos");const r=this.getEndpoint("CREATE"),s=await w.post(r,a),o=this.validateApiResponse(s);if(!o)throw new Error("Formato de respuesta inesperado al crear chat");if(o.status==="success"){const i=o.data?.chat_id||o.data?.id||o.id;if(i)return{status:"success",message:o.message||"Chat creado correctamente",data:{chat_id:i}}}throw new Error("No se pudo obtener el ID del chat creado")}catch(r){throw console.error(`ChatService (${this.serviceId}): Error al crear chat:`,r),r}}async updateChatStatus(a,r){try{if(!a||!r.status)throw new Error("ID de chat o estado invÃ¡lidos");const s=this.getEndpoint("UPDATE_STATUS",a),o=await w.put(s,r),i=this.validateApiResponse(o);if(!i)throw new Error("No se recibiÃ³ respuesta al actualizar estado");return{status:i.status||"success",message:i.message||`Chat ${r.status} correctamente`,data:{chat_id:i.data?.chat_id||a,status:i.data?.status||r.status}}}catch(s){throw console.error(`ChatService (${this.serviceId}): Error al actualizar estado del chat ${a}:`,s),s}}async markAllMessagesAsRead(a){try{const r=this.getEndpoint("MARK_ALL_READ",a),s=await w.post(r,{}),o=this.validateApiResponse(s);if(!o)throw new Error("No se recibiÃ³ respuesta al marcar mensajes como leÃ­dos");return{status:o.status||"success",message:o.message||"Mensajes marcados como leÃ­dos"}}catch(r){throw console.error(`ChatService (${this.serviceId}): Error al marcar mensajes como leÃ­dos:`,r),r}}async markMessageAsRead(a,r){try{const s=this.getEndpoint("MARK_MESSAGE_READ",a,r),o=await w.patch(s,{}),i=this.validateApiResponse(o);if(!i)throw new Error("No se recibiÃ³ respuesta al marcar mensaje como leÃ­do");return{status:i.status||"success",message:i.message||"Mensaje marcado como leÃ­do"}}catch(s){throw console.error(`ChatService (${this.serviceId}): Error al marcar mensaje como leÃ­do:`,s),s}}async deleteChat(a){try{const r=this.getEndpoint("DELETE",a),s=await w.delete(r),o=this.validateApiResponse(s);if(!o)throw new Error("No se recibiÃ³ respuesta al eliminar chat");return{status:o.status||"success",message:o.message||"Chat eliminado correctamente"}}catch(r){throw console.error(`ChatService (${this.serviceId}): Error al eliminar chat:`,r),r}}async getChatsBySellerIdExplicit(a){try{console.log(`ChatService (${this.serviceId}): Obteniendo chats para vendedor ID ${a}`);const r=p.CHAT.SELLER.LIST_BY_SELLER(a),s=await w.get(r),o=this.validateApiResponse(s);return o?o.status==="success"?{status:"success",data:Array.isArray(o.data)?o.data:o.data?.data||[],meta:o.data?.meta}:Array.isArray(o)?{status:"success",data:o}:{status:"success",data:[]}:{status:"error",data:[]}}catch(r){throw console.error(`ChatService (${this.serviceId}): Error al obtener chats para vendedor ID ${a}:`,r),r}}}const re=(H=!1)=>{const[a,r]=d.useState([]),[s,o]=d.useState(null),[i,g]=d.useState([]),[y,E]=d.useState(!1),[b,u]=d.useState(null),h=d.useRef(!1),L=d.useRef({}),v=d.useRef(null),j=d.useRef([]),T=d.useRef(H),N=d.useRef(null),{user:A}=Q(),f=d.useCallback(()=>(N.current||(console.log(`Creando instancia Ãºnica de ChatService (isSeller=${T.current})`),N.current=new W(T.current)),N.current),[]),I=async e=>{try{const t=await w.get(p.SELLERS.BY_USER_ID(e));return t?.data?.id?t.data.id:t?.data?.seller_id?t.data.seller_id:null}catch(t){return console.error(`Error al obtener informaciÃ³n del vendedor para usuario ${e}:`,t),null}},M=d.useCallback(async()=>{if(h.current)return[];try{console.log(`ðŸ”„ Obteniendo lista de chats ${T.current?"como vendedor":"como usuario"}...`),h.current=!0,E(!0),u(null);const e=f();let t;if(T.current&&A?.id){const l=await I(A.id);if(l)try{t=await e.getChatsBySellerIdExplicit(l)}catch(c){console.warn("Error en bÃºsqueda explÃ­cita por ID de vendedor:",c);try{t=await e.getChatsBySellerIdExplicit(A.id)}catch(S){console.warn("Error en bÃºsqueda explÃ­cita por ID de usuario:",S),t=await e.getChats()}}else try{t=await e.getChatsBySellerIdExplicit(A.id)}catch(c){console.warn("Error en bÃºsqueda explÃ­cita por ID de usuario:",c),t=await e.getChats()}}else t=await e.getChats();if(!t||t.status!=="success")throw new Error("No se pudo obtener la lista de chats");const n=t.data||[];return r(n),j.current=n,console.log(`âœ… Cargados ${n.length} chats ${T.current?"como vendedor":"como usuario"}`),n}catch(e){return console.error("Error al obtener chats:",e),u($(e,"Error al cargar los chats")),[]}finally{E(!1),h.current=!1}},[f,A?.id]),C=d.useCallback(async e=>{const t=L.current[e]||0;if(t>2)return console.warn(`Demasiados intentos para cargar el chat ${e}`),u("No se pudo cargar el chat. Intente mÃ¡s tarde."),v.current&&(clearInterval(v.current),v.current=null),null;try{if(h.current)return console.log(`PeticiÃ³n bloqueada para chat ${e}`),null;console.log(`Cargando mensajes para chat ${e}...`),h.current=!0,E(!0),u(null),L.current[e]=t+1;const l=await f().getChatDetails(e);if(l&&l.status==="success"&&l.data?.chat){const c=l.data.chat,S=l.data.messages||[];if(c.id)return console.log(`Chat ${e} cargado con ${S.length} mensajes`),L.current[e]=0,o(c),g(S),r(R=>{if(!R.some(m=>m.id===c.id)){const m=[...R,c];return j.current=m,m}const G=R.map(m=>m.id===c.id?{...m,...c}:m);return j.current=G,G}),c}return console.error(`Error en respuesta para chat ${e}`),u("Error al cargar los mensajes"),null}catch(n){return console.error(`Error al obtener mensajes del chat ${e}:`,n),u($(n,"Error al cargar los mensajes")),null}finally{h.current=!1,E(!1)}},[f]),P=d.useCallback(async(e,t)=>{if(h.current)return console.log("CreaciÃ³n bloqueada, hay una operaciÃ³n en curso"),null;try{console.log(`Creando chat con vendedor ${e} para producto ${t}...`),h.current=!0,E(!0),u(null);const l=await f().createChat({seller_id:e,product_id:t});if(l.status==="success"&&l.data?.chat_id){console.log("Chat creado correctamente:",l.data);const c=l.data.chat_id;return await C(c),c}else return console.error("Error en respuesta al crear chat:",l),u(l.message||"Error al crear el chat"),null}catch(n){return console.error("Error al crear chat:",n),u($(n,"Error al crear el chat")),null}finally{h.current=!1,E(!1)}},[C,f]),x=d.useCallback(async(e,t)=>{if(!e||!t.trim())return console.error("No se puede enviar mensaje: Chat ID o contenido vacÃ­o"),!1;if(h.current)return console.log("EnvÃ­o bloqueado, hay una operaciÃ³n en curso"),!1;try{console.log(`Enviando mensaje al nuevo chat ${e}...`),h.current=!0,E(!0),u(null);const l=await f().sendMessage(e,{content:t.trim()});return l.status==="success"?(console.log("Mensaje para nuevo chat enviado correctamente"),await C(e),!0):(console.error("Error en respuesta al enviar mensaje:",l),u(l.message||"Error al enviar el mensaje"),!1)}catch(n){if(console.error("Error al enviar mensaje a nuevo chat:",n),n?.response?.data?.status==="error")throw n;return u($(n,"Error al enviar el mensaje")),!1}finally{h.current=!1,E(!1)}},[C,f]),U=d.useCallback(async e=>{if(!s||!s.id||!e.trim())return console.error("No se puede enviar mensaje: Chat no seleccionado o contenido vacÃ­o"),!1;if(h.current)return console.log("EnvÃ­o bloqueado, hay una operaciÃ³n en curso"),!1;try{console.log(`Enviando mensaje a chat ${s.id} ${T.current?"como vendedor":"como usuario"}...`),h.current=!0,E(!0),u(null);const n=await f().sendMessage(s.id,{content:e.trim()});return n.status==="success"?(console.log("Mensaje enviado correctamente"),await C(s.id),!0):(console.error("Error en respuesta al enviar mensaje:",n),u(n.message||"Error al enviar el mensaje"),!1)}catch(t){if(console.error("Error al enviar mensaje:",t),t?.response?.data?.status==="error")throw t;return u($(t,"Error al enviar el mensaje")),!1}finally{h.current=!1,E(!1)}},[s,C,f]),z=d.useCallback(async(e,t)=>{if(h.current)return console.log("ActualizaciÃ³n bloqueada, hay una operaciÃ³n en curso"),!1;try{console.log(`Actualizando estado de chat ${e} a ${t}...`),h.current=!0,E(!0),u(null),r(c=>c.map(S=>S.id===e?{...S,status:t}:S)),s&&s.id===e&&o(c=>c?{...c,status:t}:null);const l=await f().updateChatStatus(e,{status:t});return l.status==="success"?(console.log("Estado actualizado correctamente"),!0):(console.error("Error en respuesta al actualizar estado:",l),await M(),u(l.message||`Error al ${t} el chat`),!1)}catch(n){return console.error(`Error al actualizar estado del chat ${e}:`,n),await M(),u($(n,`Error al ${t} el chat`)),!1}finally{h.current=!1,E(!1)}},[s,M,f]),k=d.useCallback((e,t=6e4)=>{if(v.current&&(clearInterval(v.current),v.current=null),h.current){console.log(`No se inicia polling para chat ${e} - operaciÃ³n en curso`);return}return L.current[e]=0,console.log(`Iniciando polling para chat ${e} cada ${t/1e3}s...`),v.current=setInterval(()=>{!h.current&&e&&s?.id===e&&document.visibilityState==="visible"?(console.log(`Actualizando mensajes del chat ${e} (polling)...`),C(e)):console.log(`Polling omitido para chat ${e} - condiciones no cumplidas`)},t),()=>{v.current&&(clearInterval(v.current),v.current=null)}},[C,s?.id]),D=d.useCallback(()=>{v.current&&(clearInterval(v.current),v.current=null,console.log("Polling de mensajes detenido"))},[]);d.useEffect(()=>{const e=new AbortController;let t=!0,n=!1;return A?.id&&t&&!n&&(n=!0,console.log(`Inicializando chats - Valor de isSellerRef.current: ${T.current}`),f(),M()),()=>{t=!1,e.abort(),h.current=!1,D(),t||(r([]),o(null),g([]),u(null))}},[A?.id]);const K=d.useCallback(e=>{if(!e){s!==null&&(console.log("Seleccionando chat: null"),o(null),g([]),D());return}if(s&&s.id===e.id){console.log(`Chat ${e.id} ya estÃ¡ seleccionado`);return}console.log("Seleccionando chat:",e),o(e),e&&e.id&&(C(e.id),k(e.id))},[C,k,D,s]),q=d.useCallback(async e=>{if(!e)return console.error("No se puede marcar mensajes como leÃ­dos: ID de chat no vÃ¡lido"),!1;try{return console.log(`Marcando todos los mensajes del chat ${e} como leÃ­dos...`),u(null),g(l=>l.map(c=>({...c,isRead:c.senderId!==A?.id?!0:c.isRead}))),r(l=>l.map(c=>c.id===e?{...c,unreadCount:0}:c)),(await f().markAllMessagesAsRead(e)).status==="success"}catch(t){return console.error(`Error al marcar mensajes como leÃ­dos en chat ${e}:`,t),u($(t,"Error al marcar mensajes como leÃ­dos")),!1}},[A?.id,f]),B=d.useCallback(async(e,t)=>{if(!e||!t)return console.error("No se puede marcar mensaje como leÃ­do: IDs no vÃ¡lidos"),!1;try{console.log(`Marcando mensaje ${t} del chat ${e} como leÃ­do...`),u(null),g(c=>c.map(S=>S.id===t?{...S,isRead:!0}:S));const l=await f().markMessageAsRead(e,t);if(l.status==="success"){const c=i.filter(S=>!S.isRead&&S.senderId!==A?.id).length;r(S=>S.map(R=>R.id===e?{...R,unreadCount:c}:R))}return l.status==="success"}catch(n){return console.error(`Error al marcar mensaje ${t} como leÃ­do:`,n),u($(n,"Error al marcar mensaje como leÃ­do")),!1}},[A?.id,i,f]),O=d.useCallback(async(e,t,n=20)=>{if(!e||h.current)return!1;try{console.log(`Cargando mÃ¡s mensajes para el chat ${e} (pÃ¡gina ${t})...`),h.current=!0,E(!0),u(null);const c=await f().getMessages(e,t,n);if(c.status==="success"&&c.data.messages){const S=c.data.messages;return g(R=>{const _=new Map;return R.forEach(m=>_.set(m.id,m)),S.forEach(m=>{_.has(m.id)||_.set(m.id,m)}),Array.from(_.values()).sort((m,Y)=>{const V=new Date(m.createdAt||0),J=new Date(Y.createdAt||0);return V.getTime()-J.getTime()})}),!0}return!1}catch(l){return console.error(`Error al cargar mÃ¡s mensajes para el chat ${e}:`,l),u($(l,"Error al cargar mÃ¡s mensajes")),!1}finally{h.current=!1,E(!1)}},[f]),F=d.useCallback(async e=>{if(!e)return console.error("No se puede eliminar chat: ID no vÃ¡lido"),!1;try{return console.log(`Eliminando chat ${e}...`),E(!0),u(null),r(l=>l.filter(c=>c.id!==e)),s&&s.id===e&&(o(null),g([]),D()),(await f().deleteChat(e)).status==="success"}catch(t){return console.error(`Error al eliminar chat ${e}:`,t),u($(t,"Error al eliminar chat")),await M(),!1}finally{E(!1)}},[s,o,D,M,f]);return{chats:a,selectedChat:s,messages:i,loading:y,error:b,fetchChats:M,fetchChatMessages:C,sendMessage:U,sendMessageForNewChat:x,createChat:P,updateChatStatus:z,setSelectedChat:K,startMessagesPolling:k,stopMessagesPolling:D,markAllAsRead:q,markMessageAsRead:B,loadMoreMessages:O,deleteChat:F}};export{re as u};
//# sourceMappingURL=useChat-DG6mL3G5.js.map
