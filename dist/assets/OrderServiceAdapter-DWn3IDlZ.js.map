{"version":3,"file":"OrderServiceAdapter-DWn3IDlZ.js","sources":["../../src/core/services/OrderService.ts","../../src/core/useCases/order/GetSellerOrdersUseCase.ts","../../src/core/useCases/order/GetOrderStatsUseCase.ts","../../src/core/useCases/order/UpdateOrderStatusUseCase.ts","../../src/core/useCases/order/GetOrderDetailUseCase.ts","../../src/core/useCases/order/GetUserOrdersUseCase.ts","../../src/core/adapters/OrderServiceAdapter.ts"],"sourcesContent":["import {API_ENDPOINTS} from \"../../constants/apiEndpoints\";\r\nimport ApiClient from \"../../infrastructure/api/apiClient\";\r\nimport type {\r\n\tOrder,\r\n\tOrderDetail,\r\n\tOrderListResponse,\r\n\tOrderStatusUpdateData,\r\n} from \"../domain/entities/Order\";\r\n\r\n/**\r\n * Servicio para gestión de órdenes\r\n */\r\nexport class OrderService {\r\n\t/**\r\n\t * Obtiene las órdenes del vendedor con filtros opcionales\r\n\t */\r\n\tasync getSellerOrders(filters?: {\r\n\t\tstatus?: string;\r\n\t\tpaymentStatus?: string;\r\n\t\tdateFrom?: string;\r\n\t\tdateTo?: string;\r\n\t\tsearch?: string;\r\n\t\tpage?: number;\r\n\t\tlimit?: number;\r\n\t}): Promise<OrderListResponse> {\r\n\t\ttry {\r\n\t\t\tconsole.log(\r\n\t\t\t\t\"OrderService: Obteniendo órdenes del vendedor con filtros:\",\r\n\t\t\t\tfilters\r\n\t\t\t);\r\n\r\n\t\t\tconst response = await ApiClient.get<any>(\r\n\t\t\t\tAPI_ENDPOINTS.ORDERS.SELLER_ORDERS,\r\n\t\t\t\tfilters\r\n\t\t\t);\r\n\r\n\t\t\tconsole.log(\"OrderService: Respuesta de órdenes:\", response);\r\n\r\n\t\t\t// Verificar la estructura de la respuesta\r\n\t\t\tconst orders = response?.data || [];\r\n\t\t\tconst pagination = response?.pagination || {\r\n\t\t\t\tcurrentPage: 1,\r\n\t\t\t\ttotalPages: 1,\r\n\t\t\t\ttotalItems: 0,\r\n\t\t\t\titemsPerPage: 10,\r\n\t\t\t};\r\n\r\n\t\t\treturn {\r\n\t\t\t\tdata: orders,\r\n\t\t\t\tmeta: {\r\n\t\t\t\t\ttotal: pagination.totalItems,\r\n\t\t\t\t\tper_page: pagination.itemsPerPage,\r\n\t\t\t\t\tcurrent_page: pagination.currentPage,\r\n\t\t\t\t\tlast_page: pagination.totalPages,\r\n\t\t\t\t},\r\n\t\t\t};\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\"OrderService: Error al obtener órdenes:\", error);\r\n\t\t\t// Devolver objeto vacío en caso de error\r\n\t\t\treturn {\r\n\t\t\t\tdata: [],\r\n\t\t\t\tmeta: {\r\n\t\t\t\t\ttotal: 0,\r\n\t\t\t\t\tper_page: 10,\r\n\t\t\t\t\tcurrent_page: 1,\r\n\t\t\t\t\tlast_page: 1,\r\n\t\t\t\t},\r\n\t\t\t};\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Obtiene el detalle de una orden específica\r\n\t */\r\n\tasync getOrderDetails(orderId: number): Promise<OrderDetail> {\r\n\t\ttry {\r\n\t\t\tconsole.log(`OrderService: Obteniendo detalle de orden ${orderId}`);\r\n\r\n\t\t\t// Usar el endpoint correcto para obtener los detalles de la orden\r\n\t\t\t// Si es una orden del cliente, usar la ruta de usuario\r\n\t\t\tconst response = await ApiClient.get<any>(\r\n\t\t\t\tAPI_ENDPOINTS.USER.ORDER_DETAILS(orderId)\r\n\t\t\t);\r\n\r\n\t\t\tconsole.log(`OrderService: Respuesta para orden ${orderId}:`, response);\r\n\r\n\t\t\t// Verificar si hay datos en la respuesta\r\n\t\t\tif (!response || !response.data) {\r\n\t\t\t\tthrow new Error(\"Respuesta vacía al obtener detalle de orden\");\r\n\t\t\t}\r\n\r\n\t\t\t// Si la respuesta viene con el total de precio incorrecto, corregirlo aquí\r\n\t\t\tlet orderData = response.data;\r\n\r\n\t\t\t// Verificar si necesitamos procesar o transformar datos\r\n\t\t\tif (orderData.items && Array.isArray(orderData.items)) {\r\n\t\t\t\t// Calcular el subtotal\r\n\t\t\t\tconst subtotal = orderData.items.reduce(\r\n\t\t\t\t\t(sum: number, item: any) => sum + item.price * item.quantity,\r\n\t\t\t\t\t0\r\n\t\t\t\t);\r\n\r\n\t\t\t\t// Calcular el IVA (15%)\r\n\t\t\t\tconst taxRate = 0.15;\r\n\t\t\t\tconst taxAmount = subtotal * taxRate;\r\n\r\n\t\t\t\t// Calcular el total correcto (subtotal + IVA)\r\n\t\t\t\tconst correctTotal = subtotal + taxAmount;\r\n\r\n\t\t\t\t// Si el total en la respuesta es incorrecto, actualizarlo\r\n\t\t\t\tif (Math.abs(orderData.total - correctTotal) > 0.01) {\r\n\t\t\t\t\torderData.total = correctTotal;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn orderData;\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\r\n\t\t\t\t`OrderService: Error al obtener detalle de orden ${orderId}:`,\r\n\t\t\t\terror\r\n\t\t\t);\r\n\t\t\tthrow error;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Actualiza el estado de una orden\r\n\t */\r\n\tasync updateOrderStatus(\r\n\t\torderId: number,\r\n\t\tdata: OrderStatusUpdateData\r\n\t): Promise<Order> {\r\n\t\ttry {\r\n\t\t\tconsole.log(\r\n\t\t\t\t`OrderService: Actualizando estado de orden ${orderId} a ${data.status}`\r\n\t\t\t);\r\n\r\n\t\t\tconst response = await ApiClient.patch<any>(\r\n\t\t\t\tAPI_ENDPOINTS.ORDERS.UPDATE_STATUS(orderId),\r\n\t\t\t\tdata\r\n\t\t\t);\r\n\r\n\t\t\tconsole.log(\r\n\t\t\t\t`OrderService: Respuesta de actualización para orden ${orderId}:`,\r\n\t\t\t\tresponse\r\n\t\t\t);\r\n\r\n\t\t\t// Verificar si hay datos en la respuesta\r\n\t\t\tif (!response || !response.data) {\r\n\t\t\t\tthrow new Error(\"Respuesta vacía al actualizar estado de orden\");\r\n\t\t\t}\r\n\r\n\t\t\treturn response.data;\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\r\n\t\t\t\t`OrderService: Error al actualizar estado de orden ${orderId}:`,\r\n\t\t\t\terror\r\n\t\t\t);\r\n\t\t\tthrow error;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Completa una orden\r\n\t */\r\n\tasync completeOrder(orderId: number): Promise<boolean> {\r\n\t\ttry {\r\n\t\t\tconsole.log(`OrderService: Completando orden ${orderId}`);\r\n\r\n\t\t\tconst response = await ApiClient.post<any>(\r\n\t\t\t\tAPI_ENDPOINTS.ORDERS.COMPLETE(orderId)\r\n\t\t\t);\r\n\r\n\t\t\tconsole.log(\r\n\t\t\t\t`OrderService: Respuesta de completar orden ${orderId}:`,\r\n\t\t\t\tresponse\r\n\t\t\t);\r\n\r\n\t\t\t// Verificar el resultado\r\n\t\t\treturn response?.success || false;\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\r\n\t\t\t\t`OrderService: Error al completar orden ${orderId}:`,\r\n\t\t\t\terror\r\n\t\t\t);\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Cancela una orden\r\n\t */\r\n\tasync cancelOrder(orderId: number, reason: string = \"\"): Promise<boolean> {\r\n\t\ttry {\r\n\t\t\tconsole.log(`OrderService: Cancelando orden ${orderId}`);\r\n\r\n\t\t\tconst response = await ApiClient.post<any>(\r\n\t\t\t\tAPI_ENDPOINTS.ORDERS.CANCEL(orderId),\r\n\t\t\t\t{reason}\r\n\t\t\t);\r\n\r\n\t\t\tconsole.log(\r\n\t\t\t\t`OrderService: Respuesta de cancelar orden ${orderId}:`,\r\n\t\t\t\tresponse\r\n\t\t\t);\r\n\r\n\t\t\t// Verificar el resultado\r\n\t\t\treturn response?.success || false;\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(`OrderService: Error al cancelar orden ${orderId}:`, error);\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Actualiza la información de envío de una orden\r\n\t */\r\n\tasync updateShippingInfo(\r\n\t\torderId: number,\r\n\t\tshippingInfo: any\r\n\t): Promise<boolean> {\r\n\t\ttry {\r\n\t\t\tconsole.log(\r\n\t\t\t\t`OrderService: Actualizando información de envío para orden ${orderId}`\r\n\t\t\t);\r\n\r\n\t\t\tconst response = await ApiClient.patch<any>(\r\n\t\t\t\tAPI_ENDPOINTS.ORDERS.UPDATE_SHIPPING(orderId),\r\n\t\t\t\tshippingInfo\r\n\t\t\t);\r\n\r\n\t\t\tconsole.log(\r\n\t\t\t\t`OrderService: Respuesta de actualización de envío para ${orderId}:`,\r\n\t\t\t\tresponse\r\n\t\t\t);\r\n\r\n\t\t\t// Verificar el resultado\r\n\t\t\treturn response?.success || false;\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\r\n\t\t\t\t`OrderService: Error al actualizar envío de orden ${orderId}:`,\r\n\t\t\t\terror\r\n\t\t\t);\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Obtiene las estadísticas de órdenes del vendedor\r\n\t */\r\n\tasync getOrderStats(): Promise<any> {\r\n\t\ttry {\r\n\t\t\tconsole.log(\"OrderService: Obteniendo estadísticas de órdenes\");\r\n\r\n\t\t\tconst response = await ApiClient.get<any>(API_ENDPOINTS.ORDERS.STATS);\r\n\r\n\t\t\tconsole.log(\"OrderService: Respuesta de estadísticas:\", response);\r\n\r\n\t\t\t// Verificar si hay datos en la respuesta\r\n\t\t\tif (!response || !response.data) {\r\n\t\t\t\tthrow new Error(\"Respuesta vacía al obtener estadísticas\");\r\n\t\t\t}\r\n\r\n\t\t\treturn response.data;\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\"OrderService: Error al obtener estadísticas:\", error);\r\n\t\t\t// Devolver objeto básico en caso de error\r\n\t\t\treturn {\r\n\t\t\t\ttotalOrders: 0,\r\n\t\t\t\tpendingOrders: 0,\r\n\t\t\t\tprocessingOrders: 0,\r\n\t\t\t\tshippedOrders: 0,\r\n\t\t\t\tdeliveredOrders: 0,\r\n\t\t\t\tcancelledOrders: 0,\r\n\t\t\t\ttotalSales: 0,\r\n\t\t\t};\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Obtiene órdenes pendientes de envío\r\n\t */\r\n\tasync getOrdersAwaitingShipment(\r\n\t\tlimit: number = 10,\r\n\t\toffset: number = 0\r\n\t): Promise<any[]> {\r\n\t\ttry {\r\n\t\t\tconsole.log(\"OrderService: Obteniendo órdenes pendientes de envío\");\r\n\r\n\t\t\tconst response = await ApiClient.get<any>(\r\n\t\t\t\tAPI_ENDPOINTS.ORDERS.AWAITING_SHIPMENT,\r\n\t\t\t\t{limit, offset}\r\n\t\t\t);\r\n\r\n\t\t\tconsole.log(\r\n\t\t\t\t\"OrderService: Respuesta de órdenes pendientes de envío:\",\r\n\t\t\t\tresponse\r\n\t\t\t);\r\n\r\n\t\t\t// Verificar si hay datos en la respuesta\r\n\t\t\tif (!response || !response.data) {\r\n\t\t\t\treturn [];\r\n\t\t\t}\r\n\r\n\t\t\treturn Array.isArray(response.data) ? response.data : [];\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\r\n\t\t\t\t\"OrderService: Error al obtener órdenes pendientes de envío:\",\r\n\t\t\t\terror\r\n\t\t\t);\r\n\t\t\treturn [];\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Obtiene clientes del vendedor con sus compras\r\n\t */\r\n\tasync getSellerCustomers(\r\n\t\tlimit: number = 10,\r\n\t\toffset: number = 0\r\n\t): Promise<any[]> {\r\n\t\ttry {\r\n\t\t\tconsole.log(\"OrderService: Obteniendo clientes del vendedor\");\r\n\r\n\t\t\tconst response = await ApiClient.get<any>(\r\n\t\t\t\tAPI_ENDPOINTS.ORDERS.CUSTOMERS,\r\n\t\t\t\t{limit, offset}\r\n\t\t\t);\r\n\r\n\t\t\tconsole.log(\"OrderService: Respuesta de clientes:\", response);\r\n\r\n\t\t\t// Verificar si hay datos en la respuesta\r\n\t\t\tif (!response || !response.data) {\r\n\t\t\t\treturn [];\r\n\t\t\t}\r\n\r\n\t\t\treturn Array.isArray(response.data) ? response.data : [];\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\"OrderService: Error al obtener clientes:\", error);\r\n\t\t\treturn [];\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Obtiene órdenes con un producto específico\r\n\t */\r\n\tasync getOrdersWithProduct(\r\n\t\tproductId: number,\r\n\t\tlimit: number = 10,\r\n\t\toffset: number = 0\r\n\t): Promise<any[]> {\r\n\t\ttry {\r\n\t\t\tconsole.log(`OrderService: Obteniendo órdenes con producto ${productId}`);\r\n\r\n\t\t\tconst response = await ApiClient.get<any>(\r\n\t\t\t\tAPI_ENDPOINTS.ORDERS.WITH_PRODUCT(productId),\r\n\t\t\t\t{limit, offset}\r\n\t\t\t);\r\n\r\n\t\t\tconsole.log(\r\n\t\t\t\t`OrderService: Respuesta de órdenes con producto ${productId}:`,\r\n\t\t\t\tresponse\r\n\t\t\t);\r\n\r\n\t\t\t// Verificar si hay datos en la respuesta\r\n\t\t\tif (!response || !response.data) {\r\n\t\t\t\treturn [];\r\n\t\t\t}\r\n\r\n\t\t\treturn Array.isArray(response.data) ? response.data : [];\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\r\n\t\t\t\t`OrderService: Error al obtener órdenes con producto ${productId}:`,\r\n\t\t\t\terror\r\n\t\t\t);\r\n\t\t\treturn [];\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * Obtiene las órdenes del cliente actual\r\n\t */\r\n\tasync getUserOrders(filters?: {\r\n\t\tstatus?: string;\r\n\t\tpage?: number;\r\n\t\tlimit?: number;\r\n\t}): Promise<OrderListResponse> {\r\n\t\ttry {\r\n\t\t\tconsole.log(\r\n\t\t\t\t\"OrderService: Obteniendo órdenes del cliente con filtros:\",\r\n\t\t\t\tfilters\r\n\t\t\t);\r\n\r\n\t\t\t// Usar la ruta correcta de las órdenes de usuario\r\n\t\t\tconst response = await ApiClient.get<any>(\r\n\t\t\t\tAPI_ENDPOINTS.USER.ORDERS,\r\n\t\t\t\tfilters\r\n\t\t\t);\r\n\r\n\t\t\tconsole.log(\"OrderService: Respuesta de órdenes de cliente:\", response);\r\n\r\n\t\t\t// Verificar la estructura de la respuesta\r\n\t\t\tconst orders = response?.data || [];\r\n\t\t\tconst pagination = response?.pagination || {\r\n\t\t\t\tcurrentPage: 1,\r\n\t\t\t\ttotalPages: 1,\r\n\t\t\t\ttotalItems: 0,\r\n\t\t\t\titemsPerPage: 10,\r\n\t\t\t};\r\n\r\n\t\t\t// Corregir los cálculos de precio si es necesario\r\n\t\t\tconst processedOrders = orders.map((order: any) => {\r\n\t\t\t\t// Si tenemos los items, verificar los totales\r\n\t\t\t\tif (order.items && Array.isArray(order.items)) {\r\n\t\t\t\t\tconst subtotal = order.items.reduce(\r\n\t\t\t\t\t\t(sum: number, item: any) => sum + item.price * item.quantity,\r\n\t\t\t\t\t\t0\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\t// IVA del 15%\r\n\t\t\t\t\tconst taxRate = 0.15;\r\n\t\t\t\t\tconst taxAmount = subtotal * taxRate;\r\n\r\n\t\t\t\t\t// Total correcto\r\n\t\t\t\t\tconst correctTotal = subtotal + taxAmount;\r\n\r\n\t\t\t\t\t// Actualizar el total si es incorrecto\r\n\t\t\t\t\tif (Math.abs(order.total - correctTotal) > 0.01) {\r\n\t\t\t\t\t\torder.total = correctTotal;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn order;\r\n\t\t\t});\r\n\r\n\t\t\treturn {\r\n\t\t\t\tdata: processedOrders,\r\n\t\t\t\tmeta: {\r\n\t\t\t\t\ttotal: pagination.totalItems,\r\n\t\t\t\t\tper_page: pagination.itemsPerPage,\r\n\t\t\t\t\tcurrent_page: pagination.currentPage,\r\n\t\t\t\t\tlast_page: pagination.totalPages,\r\n\t\t\t\t},\r\n\t\t\t};\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\r\n\t\t\t\t\"OrderService: Error al obtener órdenes del cliente:\",\r\n\t\t\t\terror\r\n\t\t\t);\r\n\t\t\treturn {\r\n\t\t\t\tdata: [],\r\n\t\t\t\tmeta: {\r\n\t\t\t\t\ttotal: 0,\r\n\t\t\t\t\tper_page: 10,\r\n\t\t\t\t\tcurrent_page: 1,\r\n\t\t\t\t\tlast_page: 1,\r\n\t\t\t\t},\r\n\t\t\t};\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default OrderService;\r\n","import {OrderService} from \"../../services/OrderService\";\r\nimport type {\r\n\tOrderListResponse,\r\n} from \"../../domain/entities/Order\";\r\n\r\n/**\r\n * Caso de uso para obtener las órdenes del vendedor\r\n */\r\nexport class GetSellerOrdersUseCase {\r\n\tprivate orderService: OrderService;\r\n\r\n\tconstructor(orderService: OrderService) {\r\n\t\tthis.orderService = orderService;\r\n\t}\r\n\r\n\t/**\r\n\t * Ejecuta el caso de uso\r\n\t * @param filters Filtros para la búsqueda de órdenes\r\n\t * @returns Lista de órdenes y metadatos de paginación\r\n\t */\r\n\tasync execute(filters?: {\r\n\t\tstatus?: string;\r\n\t\tpaymentStatus?: string;\r\n\t\tdateFrom?: string;\r\n\t\tdateTo?: string;\r\n\t\tsearch?: string;\r\n\t\tpage?: number;\r\n\t\tlimit?: number;\r\n\t}): Promise<OrderListResponse> {\r\n\t\ttry {\r\n\t\t\t// Validar filtros si es necesario\r\n\t\t\tconst validatedFilters = this.validateFilters(filters || {});\r\n\r\n\t\t\t// Llamar al servicio para obtener las órdenes\r\n\t\t\treturn await this.orderService.getSellerOrders(validatedFilters);\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\"Error en GetSellerOrdersUseCase:\", error);\r\n\r\n\t\t\t// Propagar el error para que pueda ser manejado en la capa superior\r\n\t\t\tthrow error;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Valida los filtros de búsqueda\r\n\t */\r\n\tprivate validateFilters(filters: any): any {\r\n\t\tconst validatedFilters: any = {};\r\n\r\n\t\t// Validar estado\r\n\t\tif (\r\n\t\t\tfilters.status &&\r\n\t\t\t[\r\n\t\t\t\t\"pending\",\r\n\t\t\t\t\"processing\",\r\n\t\t\t\t\"paid\",\r\n\t\t\t\t\"shipped\",\r\n\t\t\t\t\"delivered\",\r\n\t\t\t\t\"completed\",\r\n\t\t\t\t\"cancelled\",\r\n\t\t\t].includes(filters.status)\r\n\t\t) {\r\n\t\t\tvalidatedFilters.status = filters.status;\r\n\t\t}\r\n\r\n\t\t// Validar estado de pago\r\n\t\tif (\r\n\t\t\tfilters.paymentStatus &&\r\n\t\t\t[\"pending\", \"completed\", \"failed\"].includes(filters.paymentStatus)\r\n\t\t) {\r\n\t\t\tvalidatedFilters.paymentStatus = filters.paymentStatus;\r\n\t\t}\r\n\r\n\t\t// Validar fechas\r\n\t\tif (filters.dateFrom && this.isValidDate(filters.dateFrom)) {\r\n\t\t\tvalidatedFilters.dateFrom = filters.dateFrom;\r\n\t\t}\r\n\r\n\t\tif (filters.dateTo && this.isValidDate(filters.dateTo)) {\r\n\t\t\tvalidatedFilters.dateTo = filters.dateTo;\r\n\t\t}\r\n\r\n\t\t// Validar búsqueda\r\n\t\tif (filters.search && typeof filters.search === \"string\") {\r\n\t\t\tvalidatedFilters.search = filters.search.trim();\r\n\t\t}\r\n\r\n\t\t// Validar paginación\r\n\t\tif (\r\n\t\t\tfilters.page &&\r\n\t\t\tNumber.isInteger(Number(filters.page)) &&\r\n\t\t\tNumber(filters.page) > 0\r\n\t\t) {\r\n\t\t\tvalidatedFilters.page = Number(filters.page);\r\n\t\t}\r\n\r\n\t\tif (\r\n\t\t\tfilters.limit &&\r\n\t\t\tNumber.isInteger(Number(filters.limit)) &&\r\n\t\t\tNumber(filters.limit) > 0\r\n\t\t) {\r\n\t\t\tvalidatedFilters.limit = Number(filters.limit);\r\n\t\t}\r\n\r\n\t\treturn validatedFilters;\r\n\t}\r\n\r\n\t/**\r\n\t * Verifica si una cadena es una fecha válida\r\n\t */\r\n\tprivate isValidDate(dateString: string): boolean {\r\n\t\tconst date = new Date(dateString);\r\n\t\treturn !isNaN(date.getTime());\r\n\t}\r\n}\r\n","import {OrderService} from \"../../services/OrderService\";\r\nimport type {OrderStats} from \"../../domain/entities/Order\";\r\n\r\n/**\r\n * Caso de uso para obtener estadísticas de órdenes\r\n */\r\nexport class GetOrderStatsUseCase {\r\n\tprivate orderService: OrderService;\r\n\r\n\tconstructor(orderService: OrderService) {\r\n\t\tthis.orderService = orderService;\r\n\t}\r\n\r\n\t/**\r\n\t * Ejecuta el caso de uso\r\n\t * @returns Estadísticas de órdenes\r\n\t */\r\n\tasync execute(): Promise<OrderStats> {\r\n\t\ttry {\r\n\t\t\t// Obtener estadísticas del servicio\r\n\t\t\tconst stats = await this.orderService.getOrderStats();\r\n\r\n\t\t\t// Asegurarse de que todos los campos estén presentes\r\n\t\t\treturn {\r\n\t\t\t\ttotalOrders: stats.totalOrders || 0,\r\n\t\t\t\tpendingOrders: stats.pendingOrders || 0,\r\n\t\t\t\tprocessingOrders: stats.processingOrders || 0,\r\n\t\t\t\tshippedOrders: stats.shippedOrders || 0,\r\n\t\t\t\tdeliveredOrders: stats.deliveredOrders || 0,\r\n\t\t\t\tcompletedOrders: stats.completedOrders || 0,\r\n\t\t\t\tcancelledOrders: stats.cancelledOrders || 0,\r\n\t\t\t\ttotalSales: stats.totalSales || 0,\r\n\t\t\t};\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\"Error en GetOrderStatsUseCase:\", error);\r\n\r\n\t\t\t// Devolver valores por defecto en caso de error\r\n\t\t\treturn {\r\n\t\t\t\ttotalOrders: 0,\r\n\t\t\t\tpendingOrders: 0,\r\n\t\t\t\tprocessingOrders: 0,\r\n\t\t\t\tshippedOrders: 0,\r\n\t\t\t\tdeliveredOrders: 0,\r\n\t\t\t\tcompletedOrders: 0,\r\n\t\t\t\tcancelledOrders: 0,\r\n\t\t\t\ttotalSales: 0,\r\n\t\t\t};\r\n\t\t}\r\n\t}\r\n}\r\n","import {OrderService} from \"../../services/OrderService\";\r\nimport {\r\n\tisValidOrderStatus,\r\n\ttype Order,\r\n\ttype OrderStatus,\r\n} from \"../../domain/entities/Order\";\r\n\r\n/**\r\n * Caso de uso para actualizar el estado de una orden\r\n */\r\nexport class UpdateOrderStatusUseCase {\r\n\tprivate orderService: OrderService;\r\n\r\n\tconstructor(orderService: OrderService) {\r\n\t\tthis.orderService = orderService;\r\n\t}\r\n\r\n\t/**\r\n\t * Ejecuta el caso de uso\r\n\t * @param orderId ID de la orden a actualizar\r\n\t * @param status Nuevo estado de la orden\r\n\t * @returns Orden actualizada o null si falla\r\n\t */\r\n\tasync execute(orderId: number, status: OrderStatus): Promise<Order | null> {\r\n\t\ttry {\r\n\t\t\tif (!orderId || orderId <= 0) {\r\n\t\t\t\tthrow new Error(\"ID de orden inválido\");\r\n\t\t\t}\r\n\r\n\t\t\t// ✅ USAR LA FUNCIÓN HELPER IMPORTADA\r\n\t\t\tif (!isValidOrderStatus(status)) {\r\n\t\t\t\tthrow new Error(`Estado de orden '${status}' no válido`);\r\n\t\t\t}\r\n\r\n\t\t\t// Actualizar el estado de la orden\r\n\t\t\treturn await this.orderService.updateOrderStatus(orderId, {status});\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\r\n\t\t\t\t`Error en UpdateOrderStatusUseCase para orden ${orderId}:`,\r\n\t\t\t\terror\r\n\t\t\t);\r\n\r\n\t\t\t// Propagar el error para que pueda ser manejado en la capa superior\r\n\t\t\tthrow error;\r\n\t\t}\r\n\t}\r\n\r\n\t// /**\r\n\t//  * Verifica si un estado es válido\r\n\t//  * @deprecated Usar isValidOrderStatus del dominio en su lugar\r\n\t//  */\r\n\t// private isValidStatus(status: string): boolean {\r\n\t// \t// ✅ USAR LA FUNCIÓN DEL DOMINIO\r\n\t// \treturn isValidOrderStatus(status);\r\n\t// }\r\n}\r\n","import {OrderService} from \"../../services/OrderService\";\r\nimport type {OrderDetail} from \"../../domain/entities/Order\";\r\n\r\n/**\r\n * Caso de uso para obtener el detalle de una orden\r\n */\r\nexport class GetOrderDetailUseCase {\r\n\tprivate orderService: OrderService;\r\n\r\n\tconstructor(orderService: OrderService) {\r\n\t\tthis.orderService = orderService;\r\n\t}\r\n\r\n\t/**\r\n\t * Ejecuta el caso de uso\r\n\t * @param orderId ID de la orden a obtener\r\n\t * @returns Detalle completo de la orden\r\n\t */\r\n\tasync execute(orderId: number): Promise<OrderDetail> {\r\n\t\ttry {\r\n\t\t\tif (!orderId || orderId <= 0) {\r\n\t\t\t\tthrow new Error(\"ID de orden inválido\");\r\n\t\t\t}\r\n\r\n\t\t\treturn await this.orderService.getOrderDetails(orderId);\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\r\n\t\t\t\t`Error en GetOrderDetailUseCase para orden ${orderId}:`,\r\n\t\t\t\terror\r\n\t\t\t);\r\n\r\n\t\t\t// Propagar el error para que pueda ser manejado en la capa superior\r\n\t\t\tthrow error;\r\n\t\t}\r\n\t}\r\n}\r\n","import {OrderService} from \"../../services/OrderService\";\r\nimport type {OrderListResponse} from \"../../domain/entities/Order\";\r\n\r\n/**\r\n * Caso de uso para obtener las órdenes del cliente\r\n */\r\nexport class GetUserOrdersUseCase {\r\n\tprivate orderService: OrderService;\r\n\r\n\tconstructor(orderService: OrderService) {\r\n\t\tthis.orderService = orderService;\r\n\t}\r\n\r\n\t/**\r\n\t * Ejecuta el caso de uso\r\n\t * @param filters Filtros para la búsqueda de órdenes\r\n\t * @returns Lista de órdenes y metadatos de paginación\r\n\t */\r\n\tasync execute(filters?: {\r\n\t\tstatus?: string;\r\n\t\tpage?: number;\r\n\t\tlimit?: number;\r\n\t}): Promise<OrderListResponse> {\r\n\t\ttry {\r\n\t\t\treturn await this.orderService.getUserOrders(filters);\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\"Error en GetUserOrdersUseCase:\", error);\r\n\t\t\tthrow error;\r\n\t\t}\r\n\t}\r\n}\r\n","// src/core/adapters/OrderServiceAdapter.ts\r\nimport {OrderService} from \"../services/OrderService\";\r\nimport {GetSellerOrdersUseCase} from \"../useCases/order/GetSellerOrdersUseCase\";\r\nimport {GetOrderStatsUseCase} from \"../useCases/order/GetOrderStatsUseCase\";\r\nimport {UpdateOrderStatusUseCase} from \"../useCases/order/UpdateOrderStatusUseCase\";\r\nimport {GetOrderDetailUseCase} from \"../useCases/order/GetOrderDetailUseCase\";\r\nimport {GetUserOrdersUseCase} from \"../useCases/order/GetUserOrdersUseCase\";\r\nimport type {\r\n\tOrder,\r\n\tOrderDetail,\r\n\tOrderStats,\r\n\tOrderStatus,\r\n} from \"../domain/entities/Order\";\r\n\r\n// Interface para las estadísticas en la UI\r\nexport interface OrderStatUI {\r\n\tlabel: string;\r\n\tvalue: number | string;\r\n\ticon?: React.ReactNode;\r\n\tcolor: string;\r\n\tisCurrency?: boolean;\r\n}\r\n\r\n// Interface para la respuesta adaptada para la UI\r\nexport interface OrderUI {\r\n\tid: string;\r\n\torderNumber: string;\r\n\tdate: string;\r\n\tcustomer: {\r\n\t\tid: number;\r\n\t\tname: string;\r\n\t\temail: string;\r\n\t};\r\n\tsubtotal: number; // Subtotal sin IVA\r\n\ttaxAmount: number; // Monto del IVA\r\n\ttotal: number; // Total con IVA incluido\r\n\titems: {\r\n\t\tid: number;\r\n\t\tproductId: number;\r\n\t\tname: string;\r\n\t\tquantity: number;\r\n\t\tprice: number;\r\n\t\tsubtotal: number;\r\n\t\timage?: string;\r\n\t}[];\r\n\tstatus: OrderStatus;\r\n\tpaymentStatus: \"pending\" | \"paid\" | \"rejected\" | \"completed\"; // Añadido \"completed\" para compatibilidad con la API\r\n\tshippingAddress?: string;\r\n\tnotes?: string;\r\n\titemCount?: number; // Número de items en la orden - campo adicional\r\n}\r\n\r\n// Extendemos la interfaz Order para incluir el campo date que viene de la API pero no está en la definición\r\ninterface OrderWithAPIFields extends Order {\r\n\tdate?: string;\r\n\titemCount?: number; // Número de items en la orden que podría venir del API\r\n}\r\n\r\n/**\r\n * Adaptador para servicios de órdenes\r\n * Proporciona una interfaz simplificada para los componentes de UI\r\n */\r\nexport class OrderServiceAdapter {\r\n\tprivate orderService: OrderService;\r\n\tprivate sellerOrdersUseCase: GetSellerOrdersUseCase;\r\n\tprivate userOrdersUseCase: GetUserOrdersUseCase;\r\n\tprivate orderStatsUseCase: GetOrderStatsUseCase;\r\n\tprivate updateOrderStatusUseCase: UpdateOrderStatusUseCase;\r\n\tprivate getOrderDetailUseCase: GetOrderDetailUseCase;\r\n\r\n\tconstructor() {\r\n\t\tthis.orderService = new OrderService();\r\n\t\tthis.sellerOrdersUseCase = new GetSellerOrdersUseCase(this.orderService);\r\n\t\tthis.userOrdersUseCase = new GetUserOrdersUseCase(this.orderService);\r\n\t\tthis.orderStatsUseCase = new GetOrderStatsUseCase(this.orderService);\r\n\t\tthis.updateOrderStatusUseCase = new UpdateOrderStatusUseCase(\r\n\t\t\tthis.orderService\r\n\t\t);\r\n\t\tthis.getOrderDetailUseCase = new GetOrderDetailUseCase(this.orderService);\r\n\t}\r\n\r\n\t/**\r\n\t * Obtiene las órdenes del vendedor\r\n\t * @param filters Filtros para la consulta\r\n\t * @returns Órdenes adaptadas para la UI y información de paginación\r\n\t */\r\n\tasync getSellerOrders(filters?: {\r\n\t\tstatus?: string;\r\n\t\tpaymentStatus?: string;\r\n\t\tdateFrom?: string;\r\n\t\tdateTo?: string;\r\n\t\tsearch?: string;\r\n\t\tpage?: number;\r\n\t\tlimit?: number;\r\n\t}): Promise<{\r\n\t\torders: OrderUI[];\r\n\t\tpagination: {\r\n\t\t\tcurrentPage: number;\r\n\t\t\ttotalPages: number;\r\n\t\t\ttotalItems: number;\r\n\t\t\titemsPerPage: number;\r\n\t\t};\r\n\t}> {\r\n\t\ttry {\r\n\t\t\t// Utilizar el caso de uso para obtener órdenes\r\n\t\t\tconst response = await this.sellerOrdersUseCase.execute(filters);\r\n\r\n\t\t\t// Adaptar las órdenes al formato requerido por la UI\r\n\t\t\tconst orders: OrderUI[] = response.data.map((order) =>\r\n\t\t\t\tthis.adaptOrderToUI(order)\r\n\t\t\t);\r\n\r\n\t\t\t// Adaptar información de paginación\r\n\t\t\tconst pagination = {\r\n\t\t\t\tcurrentPage: response.meta.current_page,\r\n\t\t\t\ttotalPages: response.meta.last_page,\r\n\t\t\t\ttotalItems: response.meta.total,\r\n\t\t\t\titemsPerPage: response.meta.per_page,\r\n\t\t\t};\r\n\r\n\t\t\treturn {orders, pagination};\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\"Error en OrderServiceAdapter.getSellerOrders:\", error);\r\n\t\t\treturn {\r\n\t\t\t\torders: [],\r\n\t\t\t\tpagination: {\r\n\t\t\t\t\tcurrentPage: 1,\r\n\t\t\t\t\ttotalPages: 1,\r\n\t\t\t\t\ttotalItems: 0,\r\n\t\t\t\t\titemsPerPage: 10,\r\n\t\t\t\t},\r\n\t\t\t};\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Obtiene las órdenes del cliente\r\n\t * @param filters Filtros para la consulta\r\n\t * @returns Órdenes adaptadas para la UI y información de paginación\r\n\t */\r\n\tasync getUserOrders(filters?: {\r\n\t\tstatus?: string;\r\n\t\tpage?: number;\r\n\t\tlimit?: number;\r\n\t}): Promise<{\r\n\t\torders: OrderUI[];\r\n\t\tpagination: {\r\n\t\t\tcurrentPage: number;\r\n\t\t\ttotalPages: number;\r\n\t\t\ttotalItems: number;\r\n\t\t\titemsPerPage: number;\r\n\t\t};\r\n\t}> {\r\n\t\ttry {\r\n\t\t\t// Utilizar el caso de uso para obtener órdenes del cliente\r\n\t\t\tconst response = await this.userOrdersUseCase.execute(filters);\r\n\r\n\t\t\t// Adaptar las órdenes al formato requerido por la UI\r\n\t\t\tconst orders: OrderUI[] = response.data.map(\r\n\t\t\t\t(order: OrderWithAPIFields) => {\r\n\t\t\t\t\treturn this.adaptOrderToUI(order);\r\n\t\t\t\t}\r\n\t\t\t);\r\n\r\n\t\t\t// Adaptar información de paginación\r\n\t\t\tconst pagination = {\r\n\t\t\t\tcurrentPage: Number(response.meta.current_page) || 1,\r\n\t\t\t\ttotalPages: Math.ceil(\r\n\t\t\t\t\tresponse.meta.total / Number(response.meta.last_page || 10)\r\n\t\t\t\t),\r\n\t\t\t\ttotalItems: Number(response.meta.total) || 0,\r\n\t\t\t\titemsPerPage: Number(response.meta.per_page) || 10,\r\n\t\t\t};\r\n\r\n\t\t\treturn {orders, pagination};\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\"Error en OrderServiceAdapter.getUserOrders:\", error);\r\n\t\t\treturn {\r\n\t\t\t\torders: [],\r\n\t\t\t\tpagination: {\r\n\t\t\t\t\tcurrentPage: 1,\r\n\t\t\t\t\ttotalPages: 1,\r\n\t\t\t\t\ttotalItems: 0,\r\n\t\t\t\t\titemsPerPage: 10,\r\n\t\t\t\t},\r\n\t\t\t};\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Obtiene estadísticas de órdenes para el dashboard\r\n\t * @returns Estadísticas formateadas para la UI\r\n\t */\r\n\tasync getOrderStats(): Promise<OrderStatUI[]> {\r\n\t\ttry {\r\n\t\t\t// Utilizar el caso de uso para obtener estadísticas\r\n\t\t\tconst stats: OrderStats = await this.orderStatsUseCase.execute();\r\n\r\n\t\t\t// Transformar a formato para UI\r\n\t\t\treturn [\r\n\t\t\t\t{\r\n\t\t\t\t\tlabel: \"Total Pedidos\",\r\n\t\t\t\t\tvalue: stats.totalOrders,\r\n\t\t\t\t\tcolor: \"blue\",\r\n\t\t\t\t\tisCurrency: false,\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tlabel: \"Pendientes\",\r\n\t\t\t\t\tvalue: stats.pendingOrders,\r\n\t\t\t\t\tcolor: \"yellow\",\r\n\t\t\t\t\tisCurrency: false,\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tlabel: \"En Proceso\",\r\n\t\t\t\t\tvalue: stats.processingOrders,\r\n\t\t\t\t\tcolor: \"blue\",\r\n\t\t\t\t\tisCurrency: false,\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tlabel: \"Enviados\",\r\n\t\t\t\t\tvalue: stats.shippedOrders,\r\n\t\t\t\t\tcolor: \"indigo\",\r\n\t\t\t\t\tisCurrency: false,\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tlabel: \"Total Ventas\",\r\n\t\t\t\t\tvalue: stats.totalSales,\r\n\t\t\t\t\tcolor: \"green\",\r\n\t\t\t\t\tisCurrency: true,\r\n\t\t\t\t},\r\n\t\t\t];\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\"Error en OrderServiceAdapter.getOrderStats:\", error);\r\n\t\t\treturn [];\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Actualiza el estado de una orden\r\n\t * @param orderId ID de la orden a actualizar\r\n\t * @param status Nuevo estado\r\n\t * @returns true si se actualizó correctamente, false en caso contrario\r\n\t */\r\n\tasync updateOrderStatus(\r\n\t\torderId: string | number,\r\n\t\tstatus: OrderStatus\r\n\t): Promise<boolean> {\r\n\t\ttry {\r\n\t\t\t// Convertir orderId a número si viene como string\r\n\t\t\tconst id = typeof orderId === \"string\" ? parseInt(orderId) : orderId;\r\n\r\n\t\t\t// Utilizar el caso de uso para actualizar el estado\r\n\t\t\tconst updatedOrder = await this.updateOrderStatusUseCase.execute(\r\n\t\t\t\tid,\r\n\t\t\t\tstatus\r\n\t\t\t);\r\n\r\n\t\t\treturn !!updatedOrder;\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\r\n\t\t\t\t`Error en OrderServiceAdapter.updateOrderStatus para orden ${orderId}:`,\r\n\t\t\t\terror\r\n\t\t\t);\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\tasync getOrderDetails(orderId: string | number): Promise<OrderDetail> {\r\n\t\ttry {\r\n\t\t\t// Convertir orderId a número si viene como string\r\n\t\t\tconst id = typeof orderId === \"string\" ? parseInt(orderId) : orderId;\r\n\r\n\t\t\t// Utilizar el caso de uso para obtener los detalles\r\n\t\t\tconst response = await this.getOrderDetailUseCase.execute(id);\r\n\r\n\t\t\t// Los datos vienen directamente del backend, asegurémonos de adaptarlos correctamente\r\n\t\t\t// a la estructura que espera la interfaz de usuario\r\n\t\t\tif (response) {\r\n\t\t\t\t// Crear un objeto con estructura adecuada manteniendo la compatibilidad\r\n\t\t\t\tconst orderDetail = {\r\n\t\t\t\t\t...response,\r\n\r\n\t\t\t\t\t// Adaptaciones necesarias:\r\n\t\t\t\t\tuserId: response.userId,\r\n\t\t\t\t\tsellerId: response.sellerId,\r\n\t\t\t\t\tpaymentId: response.paymentId,\r\n\t\t\t\t\tpaymentMethod: response.paymentMethod,\r\n\t\t\t\t\tpaymentStatus: response.paymentStatus,\r\n\t\t\t\t\tcreatedAt: response.createdAt,\r\n\t\t\t\t\tupdatedAt: response.updatedAt,\r\n\t\t\t\t\torderNumber: response.orderNumber,\r\n\t\t\t\t\tshippingData: response.shippingData,\r\n\r\n\t\t\t\t\t// Procesar items con el formato esperado\r\n\t\t\t\t\titems:\r\n\t\t\t\t\t\tresponse.items?.map((item) => ({\r\n\t\t\t\t\t\t\t...item,\r\n\t\t\t\t\t\t\tproductId: item.productId,\r\n\t\t\t\t\t\t\tproduct: {\r\n\t\t\t\t\t\t\t\tname: item.product?.name || item.product_name || 'Unknown Product',\r\n\t\t\t\t\t\t\t\timage: item.product?.image || item.product_image,\r\n\t\t\t\t\t\t\t\tslug: item.product?.slug,\r\n\t\t\t\t\t\t\t\tsku: item.product?.sku || item.product_sku,\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tproduct_name: item.product_name,\r\n\t\t\t\t\t\t\tproduct_sku: item.product_sku,\r\n\t\t\t\t\t\t\tproduct_image: item.product_image\r\n\t\t\t\t\t\t})) || [],\r\n\t\t\t\t};\r\n\r\n\t\t\t\tconsole.log(\"Orden adaptada para UI:\", orderDetail);\r\n\r\n\t\t\t\t// Verificar si los cálculos son correctos\r\n\t\t\t\tconst subtotal =\r\n\t\t\t\t\torderDetail.items?.reduce(\r\n\t\t\t\t\t\t(sum, item) => sum + item.price * item.quantity,\r\n\t\t\t\t\t\t0\r\n\t\t\t\t\t) || 0;\r\n\r\n\t\t\t\t// Si el total parece incorrecto, corregirlo (asumiendo IVA del 15%)\r\n\t\t\t\tconst taxRate = 0.15;\r\n\t\t\t\tconst taxAmount = subtotal * taxRate;\r\n\t\t\t\tconst calculatedTotal = subtotal + taxAmount;\r\n\r\n\t\t\t\tif (Math.abs(orderDetail.total - calculatedTotal) > 0.01) {\r\n\t\t\t\t\torderDetail.total = calculatedTotal;\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn orderDetail;\r\n\t\t\t}\r\n\r\n\t\t\treturn response;\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\r\n\t\t\t\t`Error en OrderServiceAdapter.getOrderDetails para orden ${orderId}:`,\r\n\t\t\t\terror\r\n\t\t\t);\r\n\t\t\tthrow error;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Adapta una orden al formato requerido por la UI\r\n\t * @param order Orden proveniente del backend\r\n\t * @returns Orden formateada para la UI\r\n\t */\r\n\tprivate adaptOrderToUI(order: OrderWithAPIFields): OrderUI {\r\n\t\t// Calcular subtotal y monto de impuesto\r\n\t\tconst subtotal =\r\n\t\t\torder.items?.reduce((sum, item) => sum + item.price * item.quantity, 0) ||\r\n\t\t\t0;\r\n\r\n\t\tconst taxRate = 0.15; // 15% IVA\r\n\t\tconst taxAmount = subtotal * taxRate;\r\n\r\n\t\t// Asegurarse de que el total incluya el impuesto\r\n\t\t// Si no hay subtotal calculado, usar directamente el total de la orden\r\n\t\tconst total = subtotal > 0 ? subtotal + taxAmount : order.total || 0;\r\n\r\n\t\t// Determinar el número de ítems\r\n\t\t// Si tenemos items, usar la longitud del array\r\n\t\t// Si no, usar itemCount si existe, si no, no proporcionar un valor\r\n\t\tconst itemCount = order.items?.length || order.itemCount || undefined;\r\n\r\n\t\t// Adaptar los items - si no hay items, dejamos un array vacío\r\n\t\tconst adaptedItems =\r\n\t\t\torder.items?.map((item) => ({\r\n\t\t\t\tid: item.id || 0,\r\n\t\t\t\tproductId: item.productId,\r\n\t\t\t\tname: item.product?.name || item.product_name || \"Producto\",\r\n\t\t\t\tquantity: item.quantity,\r\n\t\t\t\tprice: item.price,\r\n\t\t\t\tsubtotal: item.price * item.quantity,\r\n\t\t\t\timage: item.product?.image || item.product_image,\r\n\t\t\t})) || [];\r\n\r\n\t\t// Construir dirección de envío\r\n\t\tconst shippingAddress = order.shippingData\r\n\t\t\t? `${order.shippingData.address}, ${order.shippingData.city}, ${order.shippingData.state}, ${order.shippingData.country}`\r\n\t\t\t: undefined;\r\n\r\n\t\t// Manejar el estado de pago (compatibilidad con \"completed\" de la API)\r\n\t\tconst paymentStatus = order.paymentStatus as\r\n\t\t\t| \"pending\"\r\n\t\t\t| \"paid\"\r\n\t\t\t| \"rejected\"\r\n\t\t\t| \"completed\";\r\n\r\n\t\t// Construir objeto final\r\n\t\treturn {\r\n\t\t\tid: String(order.id),\r\n\t\t\torderNumber: order.orderNumber,\r\n\t\t\t// Usar la fecha que viene de la API o caer en la fecha actual si no existe\r\n\t\t\tdate: order.date || order.createdAt || new Date().toISOString(),\r\n\t\t\tcustomer: {\r\n\t\t\t\tid: order.userId,\r\n\t\t\t\tname: order.user_name || \"Cliente\",\r\n\t\t\t\temail: order.user_email || \"email@example.com\",\r\n\t\t\t},\r\n\t\t\tsubtotal,\r\n\t\t\ttaxAmount,\r\n\t\t\ttotal,\r\n\t\t\titems: adaptedItems,\r\n\t\t\tstatus: order.status || \"pending\",\r\n\t\t\tpaymentStatus,\r\n\t\t\tshippingAddress,\r\n\t\t\tnotes: order.shippingData?.notes,\r\n\t\t\titemCount: itemCount,\r\n\t\t};\r\n\t}\r\n}\r\n\r\nexport default OrderServiceAdapter;\r\n"],"names":["OrderService","filters","response","ApiClient","API_ENDPOINTS","orders","pagination","error","orderId","orderData","subtotal","sum","item","taxAmount","correctTotal","data","reason","shippingInfo","limit","offset","productId","order","GetSellerOrdersUseCase","orderService","validatedFilters","dateString","date","GetOrderStatsUseCase","stats","UpdateOrderStatusUseCase","status","isValidOrderStatus","GetOrderDetailUseCase","GetUserOrdersUseCase","OrderServiceAdapter","id","orderDetail","calculatedTotal","total","itemCount","adaptedItems","shippingAddress","paymentStatus"],"mappings":"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"}