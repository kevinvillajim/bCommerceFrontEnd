{"version":3,"file":"useAdminCategories-D_zTNu7p.js","sources":["../../src/core/services/AdminCategoryService.ts","../../src/core/useCases/admin/category/GetAllCategoriesUseCase.ts","../../src/core/useCases/admin/category/CreateCategoryAsAdminUseCase.ts","../../src/core/useCases/admin/category/UpdateAnyCategoryUseCase.ts","../../src/core/useCases/admin/category/DeleteAnyCategoryUseCase.ts","../../src/core/useCases/admin/category/ToggleCategoryActiveUseCase.ts","../../src/core/useCases/admin/category/ToggleCategoryFeaturedUseCase.ts","../../src/core/useCases/admin/category/GetCategoryByIdUseCase.ts","../../src/presentation/hooks/useAdminCategories.ts"],"sourcesContent":["// src/core/services/AdminCategoryService.ts - NUEVO\r\n\r\nimport ApiClient from \"../../infrastructure/api/apiClient\";\r\nimport {API_ENDPOINTS} from \"../../constants/apiEndpoints\";\r\nimport type {\r\n\tCategory,\r\n\tCategoryListResponse,\r\n\tCategoryCreationData,\r\n\tCategoryUpdateData,\r\n\tCategoryFilterParams,\r\n} from \"../domain/entities/Category\";\r\n\r\n/**\r\n * Servicio de administraci√≥n de categor√≠as - Solo para administradores\r\n * Permite gestionar cualquier categor√≠a en el sistema usando las rutas de admin\r\n */\r\nexport class AdminCategoryService {\r\n\t/**\r\n\t * Obtiene todas las categor√≠as del sistema (como admin)\r\n\t */\r\n\tasync getAllCategories(\r\n\t\tfilterParams?: CategoryFilterParams\r\n\t): Promise<CategoryListResponse | null> {\r\n\t\ttry {\r\n\t\t\tconsole.log(\r\n\t\t\t\t\"üì§ AdminCategoryService: Obteniendo todas las categor√≠as como admin:\",\r\n\t\t\t\tfilterParams\r\n\t\t\t);\r\n\r\n\t\t\t// Usar la ruta p√∫blica pero con permisos de admin\r\n\t\t\tconst response = await ApiClient.get<CategoryListResponse>(\r\n\t\t\t\tAPI_ENDPOINTS.CATEGORIES.LIST,\r\n\t\t\t\tfilterParams\r\n\t\t\t);\r\n\r\n\t\t\tconsole.log(\"üì• AdminCategoryService: Respuesta del servidor:\", response);\r\n\t\t\treturn response;\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\r\n\t\t\t\t\"‚ùå Error en AdminCategoryService.getAllCategories:\",\r\n\t\t\t\terror\r\n\t\t\t);\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Obtiene una categor√≠a por ID (como admin)\r\n\t */\r\n\tasync getCategoryById(id: number): Promise<Category | null> {\r\n\t\ttry {\r\n\t\t\tconsole.log(\r\n\t\t\t\t`üì§ AdminCategoryService: Obteniendo categor√≠a ${id} como admin`\r\n\t\t\t);\r\n\r\n\t\t\tconst response = await ApiClient.get<Category>(\r\n\t\t\t\tAPI_ENDPOINTS.CATEGORIES.DETAILS(id)\r\n\t\t\t);\r\n\r\n\t\t\tconsole.log(\"‚úÖ AdminCategoryService: Categor√≠a obtenida:\", response);\r\n\t\t\treturn response;\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\"‚ùå Error en AdminCategoryService.getCategoryById:\", error);\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Crea una categor√≠a (como admin)\r\n\t */\r\n\tasync createCategory(data: CategoryCreationData): Promise<Category | null> {\r\n\t\ttry {\r\n\t\t\tconsole.log(\r\n\t\t\t\t\"üì§ AdminCategoryService: Creando categor√≠a como admin:\",\r\n\t\t\t\tdata\r\n\t\t\t);\r\n\r\n\t\t\t// USAR RUTA ADMIN ESPEC√çFICA\r\n\t\t\tconst response = await ApiClient.post<Category>(\r\n\t\t\t\tAPI_ENDPOINTS.ADMIN.CATEGORIES.CREATE,\r\n\t\t\t\tdata\r\n\t\t\t);\r\n\r\n\t\t\tconsole.log(\"‚úÖ AdminCategoryService: Categor√≠a creada:\", response);\r\n\t\t\treturn response;\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\"‚ùå Error en AdminCategoryService.createCategory:\", error);\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Actualiza cualquier categor√≠a (como admin)\r\n\t */\r\n\tasync updateCategory(data: CategoryUpdateData): Promise<Category | null> {\r\n\t\ttry {\r\n\t\t\tconsole.log(\r\n\t\t\t\t`üì§ AdminCategoryService: Actualizando categor√≠a ${data.id} como admin:`,\r\n\t\t\t\tdata\r\n\t\t\t);\r\n\r\n\t\t\tif (!data.id) {\r\n\t\t\t\tthrow new Error(\"ID de categor√≠a requerido para actualizaci√≥n\");\r\n\t\t\t}\r\n\r\n\t\t\t// USAR RUTA ADMIN ESPEC√çFICA\r\n\t\t\tconst response = await ApiClient.put<Category>(\r\n\t\t\t\tAPI_ENDPOINTS.ADMIN.CATEGORIES.UPDATE(data.id),\r\n\t\t\t\tdata\r\n\t\t\t);\r\n\r\n\t\t\tconsole.log(\"‚úÖ AdminCategoryService: Categor√≠a actualizada:\", response);\r\n\t\t\treturn response;\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\"‚ùå Error en AdminCategoryService.updateCategory:\", error);\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Actualizaci√≥n parcial de categor√≠a (como admin) - PATCH\r\n\t */\r\n\tasync partialUpdateCategory(\r\n\t\tid: number,\r\n\t\tdata: Partial<CategoryUpdateData>\r\n\t): Promise<Category | null> {\r\n\t\ttry {\r\n\t\t\tconsole.log(\r\n\t\t\t\t`üì§ AdminCategoryService: Actualizando parcialmente categor√≠a ${id} como admin:`,\r\n\t\t\t\tdata\r\n\t\t\t);\r\n\r\n\t\t\t// USAR RUTA ADMIN PATCH ESPEC√çFICA\r\n\t\t\tconst response = await ApiClient.patch<Category>(\r\n\t\t\t\tAPI_ENDPOINTS.ADMIN.CATEGORIES.PARTIAL_UPDATE(id),\r\n\t\t\t\tdata\r\n\t\t\t);\r\n\r\n\t\t\tconsole.log(\r\n\t\t\t\t\"‚úÖ AdminCategoryService: Categor√≠a actualizada parcialmente:\",\r\n\t\t\t\tresponse\r\n\t\t\t);\r\n\t\t\treturn response;\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\r\n\t\t\t\t\"‚ùå Error en AdminCategoryService.partialUpdateCategory:\",\r\n\t\t\t\terror\r\n\t\t\t);\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Elimina cualquier categor√≠a (como admin)\r\n\t */\r\n\tasync deleteCategory(id: number): Promise<boolean> {\r\n\t\ttry {\r\n\t\t\tconsole.log(\r\n\t\t\t\t`üì§ AdminCategoryService: Eliminando categor√≠a ${id} como admin`\r\n\t\t\t);\r\n\r\n\t\t\t// USAR RUTA ADMIN ESPEC√çFICA\r\n\t\t\tconst response = await ApiClient.delete(\r\n\t\t\t\tAPI_ENDPOINTS.ADMIN.CATEGORIES.DELETE(id)\r\n\t\t\t);\r\n\r\n\t\t\tconsole.log(\"‚úÖ AdminCategoryService: Categor√≠a eliminada:\", response);\r\n\t\t\treturn true;\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\"‚ùå Error en AdminCategoryService.deleteCategory:\", error);\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Cambia el estado activo de una categor√≠a - PATCH\r\n\t */\r\n\tasync toggleActive(id: number, is_active: boolean): Promise<boolean> {\r\n\t\ttry {\r\n\t\t\tconsole.log(\r\n\t\t\t\t`üì§ AdminCategoryService: Cambiando estado activo de categor√≠a ${id} a ${is_active}`\r\n\t\t\t);\r\n\r\n\t\t\t// USAR RUTA ADMIN PATCH ESPEC√çFICA\r\n\t\t\tconst response = await ApiClient.patch(\r\n\t\t\t\tAPI_ENDPOINTS.ADMIN.CATEGORIES.PARTIAL_UPDATE(id),\r\n\t\t\t\t{is_active: is_active}\r\n\t\t\t);\r\n\r\n\t\t\tconsole.log(\r\n\t\t\t\t\"‚úÖ AdminCategoryService: Estado activo actualizado:\",\r\n\t\t\t\tresponse\r\n\t\t\t);\r\n\t\t\treturn true;\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\"‚ùå Error en AdminCategoryService.toggleActive:\", error);\r\n\t\t\tif (error instanceof Error) {\r\n\t\t\t\tconsole.error(\"Error message:\", error.message);\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Cambia el estado destacado de una categor√≠a - PATCH\r\n\t */\r\n\tasync toggleFeatured(id: number, featured: boolean): Promise<boolean> {\r\n\t\ttry {\r\n\t\t\tconsole.log(\r\n\t\t\t\t`üì§ AdminCategoryService: Cambiando estado destacado de categor√≠a ${id} a ${featured}`\r\n\t\t\t);\r\n\r\n\t\t\t// USAR RUTA ADMIN PATCH ESPEC√çFICA\r\n\t\t\tconst response = await ApiClient.patch(\r\n\t\t\t\tAPI_ENDPOINTS.ADMIN.CATEGORIES.PARTIAL_UPDATE(id),\r\n\t\t\t\t{featured: featured}\r\n\t\t\t);\r\n\r\n\t\t\tconsole.log(\r\n\t\t\t\t\"‚úÖ AdminCategoryService: Estado destacado actualizado:\",\r\n\t\t\t\tresponse\r\n\t\t\t);\r\n\t\t\treturn true;\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\"‚ùå Error en AdminCategoryService.toggleFeatured:\", error);\r\n\t\t\tif (error instanceof Error) {\r\n\t\t\t\tconsole.error(\"Error message:\", error.message);\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Actualiza el orden de una categor√≠a - PATCH\r\n\t */\r\n\tasync updateOrder(id: number, order: number): Promise<boolean> {\r\n\t\ttry {\r\n\t\t\tconsole.log(\r\n\t\t\t\t`üì§ AdminCategoryService: Actualizando orden de categor√≠a ${id} a ${order}`\r\n\t\t\t);\r\n\r\n\t\t\t// USAR RUTA ADMIN PATCH ESPEC√çFICA\r\n\t\t\tconst response = await ApiClient.patch(\r\n\t\t\t\tAPI_ENDPOINTS.ADMIN.CATEGORIES.PARTIAL_UPDATE(id),\r\n\t\t\t\t{order: order}\r\n\t\t\t);\r\n\r\n\t\t\tconsole.log(\"‚úÖ AdminCategoryService: Orden actualizado:\", response);\r\n\t\t\treturn true;\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\"‚ùå Error en AdminCategoryService.updateOrder:\", error);\r\n\t\t\tif (error instanceof Error) {\r\n\t\t\t\tconsole.error(\"Error message:\", error.message);\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Obtiene categor√≠as principales (como admin)\r\n\t */\r\n\tasync getMainCategories(withCounts: boolean = true): Promise<Category[]> {\r\n\t\ttry {\r\n\t\t\tconsole.log(\r\n\t\t\t\t\"üì§ AdminCategoryService: Obteniendo categor√≠as principales como admin\"\r\n\t\t\t);\r\n\r\n\t\t\tconst response = await ApiClient.get<Category[]>(\r\n\t\t\t\tAPI_ENDPOINTS.CATEGORIES.MAIN,\r\n\t\t\t\t{with_counts: withCounts}\r\n\t\t\t);\r\n\r\n\t\t\tconsole.log(\r\n\t\t\t\t\"‚úÖ AdminCategoryService: Categor√≠as principales obtenidas:\",\r\n\t\t\t\tresponse\r\n\t\t\t);\r\n\t\t\treturn response || [];\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\r\n\t\t\t\t\"‚ùå Error en AdminCategoryService.getMainCategories:\",\r\n\t\t\t\terror\r\n\t\t\t);\r\n\t\t\treturn [];\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Obtiene subcategor√≠as de una categor√≠a (como admin)\r\n\t */\r\n\tasync getSubcategories(parentId: number): Promise<Category[]> {\r\n\t\ttry {\r\n\t\t\tconsole.log(\r\n\t\t\t\t`üì§ AdminCategoryService: Obteniendo subcategor√≠as de ${parentId} como admin`\r\n\t\t\t);\r\n\r\n\t\t\tconst response = await ApiClient.get<Category[]>(\r\n\t\t\t\tAPI_ENDPOINTS.CATEGORIES.SUBCATEGORIES(parentId)\r\n\t\t\t);\r\n\r\n\t\t\tconsole.log(\r\n\t\t\t\t\"‚úÖ AdminCategoryService: Subcategor√≠as obtenidas:\",\r\n\t\t\t\tresponse\r\n\t\t\t);\r\n\t\t\treturn response || [];\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\r\n\t\t\t\t\"‚ùå Error en AdminCategoryService.getSubcategories:\",\r\n\t\t\t\terror\r\n\t\t\t);\r\n\t\t\treturn [];\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default AdminCategoryService;\r\n","// src/core/useCases/admin/category/GetAllCategoriesUseCase.ts\r\n\r\nimport {AdminCategoryService} from \"../../../services/AdminCategoryService\";\r\nimport type {\r\n\tCategoryListResponse,\r\n\tCategoryFilterParams,\r\n} from \"../../../domain/entities/Category\";\r\n\r\nexport class GetAllCategoriesUseCase {\r\n\tprivate adminCategoryService: AdminCategoryService;\r\n\r\n\tconstructor(adminCategoryService: AdminCategoryService) {\r\n\t\tthis.adminCategoryService = adminCategoryService;\r\n\t}\r\n\r\n\tasync execute(\r\n\t\tfilterParams?: CategoryFilterParams\r\n\t): Promise<CategoryListResponse | null> {\r\n\t\tconsole.log(\r\n\t\t\t\"GetAllCategoriesUseCase: Obteniendo todas las categor√≠as como admin\"\r\n\t\t);\r\n\t\ttry {\r\n\t\t\tconst categories =\r\n\t\t\t\tawait this.adminCategoryService.getAllCategories(filterParams);\r\n\t\t\tconsole.log(\r\n\t\t\t\t\"GetAllCategoriesUseCase: Categor√≠as obtenidas correctamente:\",\r\n\t\t\t\tcategories\r\n\t\t\t);\r\n\t\t\treturn categories;\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\r\n\t\t\t\t\"GetAllCategoriesUseCase: Error al obtener categor√≠as:\",\r\n\t\t\t\terror\r\n\t\t\t);\r\n\t\t\tthrow error;\r\n\t\t}\r\n\t}\r\n}\r\n","// src/core/useCases/admin/category/CreateCategoryAsAdminUseCase.ts\r\n\r\nimport {AdminCategoryService} from \"../../../services/AdminCategoryService\";\r\nimport type {\r\n\tCategory,\r\n\tCategoryCreationData,\r\n} from \"../../../domain/entities/Category\";\r\n\r\nexport class CreateCategoryAsAdminUseCase {\r\n\tprivate adminCategoryService: AdminCategoryService;\r\n\r\n\tconstructor(adminCategoryService: AdminCategoryService) {\r\n\t\tthis.adminCategoryService = adminCategoryService;\r\n\t}\r\n\r\n\tasync execute(data: CategoryCreationData): Promise<Category | null> {\r\n\t\tconsole.log(\r\n\t\t\t\"CreateCategoryAsAdminUseCase: Creando categor√≠a como admin:\",\r\n\t\t\tdata\r\n\t\t);\r\n\t\ttry {\r\n\t\t\tconst category = await this.adminCategoryService.createCategory(data);\r\n\t\t\tconsole.log(\r\n\t\t\t\t\"CreateCategoryAsAdminUseCase: Categor√≠a creada correctamente:\",\r\n\t\t\t\tcategory\r\n\t\t\t);\r\n\t\t\treturn category;\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\r\n\t\t\t\t\"CreateCategoryAsAdminUseCase: Error al crear categor√≠a:\",\r\n\t\t\t\terror\r\n\t\t\t);\r\n\t\t\tthrow error;\r\n\t\t}\r\n\t}\r\n}\r\n","// src/core/useCases/admin/category/UpdateAnyCategoryUseCase.ts\r\n\r\nimport {AdminCategoryService} from \"../../../services/AdminCategoryService\";\r\nimport type {\r\n    Category,\r\n    CategoryUpdateData,\r\n} from \"../../../domain/entities/Category\";\r\n\r\nexport class UpdateAnyCategoryUseCase {\r\n    private adminCategoryService: AdminCategoryService;\r\n\r\n    constructor(adminCategoryService: AdminCategoryService) {\r\n        this.adminCategoryService = adminCategoryService;\r\n    }\r\n\r\n    async execute(data: CategoryUpdateData): Promise<Category | null> {\r\n        console.log(\r\n            `UpdateAnyCategoryUseCase: Actualizando categor√≠a ${data.id} como admin:`,\r\n            data\r\n        );\r\n        try {\r\n            const category = await this.adminCategoryService.updateCategory(data);\r\n            console.log(\r\n                \"UpdateAnyCategoryUseCase: Categor√≠a actualizada correctamente:\",\r\n                category\r\n            );\r\n            return category;\r\n        } catch (error) {\r\n            console.error(\r\n                \"UpdateAnyCategoryUseCase: Error al actualizar categor√≠a:\",\r\n                error\r\n            );\r\n            throw error;\r\n        }\r\n    }\r\n}","// src/core/useCases/admin/category/DeleteAnyCategoryUseCase.ts\r\n\r\nimport {AdminCategoryService} from \"../../../services/AdminCategoryService\";\r\n\r\nexport class DeleteAnyCategoryUseCase {\r\n    private adminCategoryService: AdminCategoryService;\r\n\r\n    constructor(adminCategoryService: AdminCategoryService) {\r\n        this.adminCategoryService = adminCategoryService;\r\n    }\r\n\r\n    async execute(id: number): Promise<boolean> {\r\n        console.log(\r\n            `DeleteAnyCategoryUseCase: Eliminando categor√≠a ${id} como admin`\r\n        );\r\n        try {\r\n            const result = await this.adminCategoryService.deleteCategory(id);\r\n            console.log(\r\n                \"DeleteAnyCategoryUseCase: Categor√≠a eliminada correctamente:\",\r\n                result\r\n            );\r\n            return result;\r\n        } catch (error) {\r\n            console.error(\r\n                \"DeleteAnyCategoryUseCase: Error al eliminar categor√≠a:\",\r\n                error\r\n            );\r\n            throw error;\r\n        }\r\n    }\r\n}","// src/core/useCases/admin/category/ToggleCategoryActiveUseCase.ts\r\n\r\nimport {AdminCategoryService} from \"../../../services/AdminCategoryService\";\r\n\r\nexport class ToggleCategoryActiveUseCase {\r\n    private adminCategoryService: AdminCategoryService;\r\n\r\n    constructor(adminCategoryService: AdminCategoryService) {\r\n        this.adminCategoryService = adminCategoryService;\r\n    }\r\n\r\n    async execute(id: number, is_active: boolean): Promise<boolean> {\r\n        console.log(\r\n            `ToggleCategoryActiveUseCase: Cambiando estado activo de categor√≠a ${id} a ${is_active}`\r\n        );\r\n        try {\r\n            const result = await this.adminCategoryService.toggleActive(\r\n                id,\r\n                is_active\r\n            );\r\n            console.log(\r\n                \"ToggleCategoryActiveUseCase: Estado activo actualizado correctamente:\",\r\n                result\r\n            );\r\n            return result;\r\n        } catch (error) {\r\n            console.error(\r\n                \"ToggleCategoryActiveUseCase: Error al cambiar estado activo:\",\r\n                error\r\n            );\r\n            throw error;\r\n        }\r\n    }\r\n}","// src/core/useCases/admin/category/ToggleCategoryFeaturedUseCase.ts\r\n\r\nimport {AdminCategoryService} from \"../../../services/AdminCategoryService\";\r\n\r\nexport class ToggleCategoryFeaturedUseCase {\r\n    private adminCategoryService: AdminCategoryService;\r\n\r\n    constructor(adminCategoryService: AdminCategoryService) {\r\n        this.adminCategoryService = adminCategoryService;\r\n    }\r\n\r\n    async execute(id: number, featured: boolean): Promise<boolean> {\r\n        console.log(\r\n            `ToggleCategoryFeaturedUseCase: Cambiando estado destacado de categor√≠a ${id} a ${featured}`\r\n        );\r\n        try {\r\n            const result = await this.adminCategoryService.toggleFeatured(\r\n                id,\r\n                featured\r\n            );\r\n            console.log(\r\n                \"ToggleCategoryFeaturedUseCase: Estado destacado actualizado correctamente:\",\r\n                result\r\n            );\r\n            return result;\r\n        } catch (error) {\r\n            console.error(\r\n                \"ToggleCategoryFeaturedUseCase: Error al cambiar estado destacado:\",\r\n                error\r\n            );\r\n            throw error;\r\n        }\r\n    }\r\n}","// src/core/useCases/admin/category/GetCategoryByIdUseCase.ts\r\n\r\nimport {AdminCategoryService} from \"../../../services/AdminCategoryService\";\r\nimport type {Category} from \"../../../domain/entities/Category\";\r\n\r\nexport class GetCategoryByIdUseCase {\r\n\tprivate adminCategoryService: AdminCategoryService;\r\n\r\n\tconstructor(adminCategoryService: AdminCategoryService) {\r\n\t\tthis.adminCategoryService = adminCategoryService;\r\n\t}\r\n\r\n\tasync execute(id: number): Promise<Category | null> {\r\n\t\tconsole.log(\r\n\t\t\t`GetCategoryByIdUseCase: Obteniendo categor√≠a ${id} como admin`\r\n\t\t);\r\n\t\ttry {\r\n\t\t\tconst category = await this.adminCategoryService.getCategoryById(id);\r\n\t\t\tconsole.log(\r\n\t\t\t\t\"GetCategoryByIdUseCase: Categor√≠a obtenida correctamente:\",\r\n\t\t\t\tcategory\r\n\t\t\t);\r\n\t\t\treturn category;\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\r\n\t\t\t\t\"GetCategoryByIdUseCase: Error al obtener categor√≠a:\",\r\n\t\t\t\terror\r\n\t\t\t);\r\n\t\t\tthrow error;\r\n\t\t}\r\n\t}\r\n}\r\n","// src/presentation/hooks/useAdminCategories.ts - ACTUALIZADO\r\n\r\nimport {useState, useCallback} from \"react\";\r\nimport {AdminCategoryService} from \"../../core/services/AdminCategoryService\";\r\nimport CacheService from \"../../infrastructure/services/CacheService\";\r\nimport appConfig from \"../../config/appConfig\";\r\n\r\n// Use Cases\r\nimport {GetAllCategoriesUseCase} from \"../../core/useCases/admin/category/GetAllCategoriesUseCase\";\r\nimport {CreateCategoryAsAdminUseCase} from \"../../core/useCases/admin/category/CreateCategoryAsAdminUseCase\";\r\nimport {UpdateAnyCategoryUseCase} from \"../../core/useCases/admin/category/UpdateAnyCategoryUseCase\";\r\nimport {DeleteAnyCategoryUseCase} from \"../../core/useCases/admin/category/DeleteAnyCategoryUseCase\";\r\nimport {ToggleCategoryActiveUseCase} from \"../../core/useCases/admin/category/ToggleCategoryActiveUseCase\";\r\nimport {ToggleCategoryFeaturedUseCase} from \"../../core/useCases/admin/category/ToggleCategoryFeaturedUseCase\";\r\nimport {GetCategoryByIdUseCase} from \"../../core/useCases/admin/category/GetCategoryByIdUseCase\";\r\n\r\nimport type {\r\n\tCategory,\r\n\tCategoryListResponse,\r\n\tCategoryCreationData,\r\n\tCategoryUpdateData,\r\n\tCategoryFilterParams,\r\n} from \"../../core/domain/entities/Category\";\r\n\r\n// Instanciar el servicio y use cases\r\nconst adminCategoryService = new AdminCategoryService();\r\n\r\nconst getAllCategoriesUseCase = new GetAllCategoriesUseCase(\r\n\tadminCategoryService\r\n);\r\nconst createCategoryAsAdminUseCase = new CreateCategoryAsAdminUseCase(\r\n\tadminCategoryService\r\n);\r\nconst updateAnyCategoryUseCase = new UpdateAnyCategoryUseCase(\r\n\tadminCategoryService\r\n);\r\nconst deleteAnyCategoryUseCase = new DeleteAnyCategoryUseCase(\r\n\tadminCategoryService\r\n);\r\nconst toggleCategoryActiveUseCase = new ToggleCategoryActiveUseCase(\r\n\tadminCategoryService\r\n);\r\nconst toggleCategoryFeaturedUseCase = new ToggleCategoryFeaturedUseCase(\r\n\tadminCategoryService\r\n);\r\nconst getCategoryByIdUseCase = new GetCategoryByIdUseCase(adminCategoryService);\r\n\r\n/**\r\n * Hook para gesti√≥n administrativa de categor√≠as\r\n * Solo para usuarios con rol de administrador\r\n */\r\nexport const useAdminCategories = () => {\r\n\tconst [loading, setLoading] = useState<boolean>(false);\r\n\tconst [error, setError] = useState<string | null>(null);\r\n\tconst [categories, setCategories] = useState<Category[]>([]);\r\n\tconst [mainCategories, setMainCategories] = useState<Category[]>([]);\r\n\tconst [categoryDetail, setCategoryDetail] = useState<Category | null>(null);\r\n\r\n\t/**\r\n\t * Adaptador para normalizar los datos de categor√≠as\r\n\t */\r\n\tconst adaptCategory = useCallback((apiCategory: any): Category => {\r\n\t\tif (!apiCategory || typeof apiCategory !== \"object\") {\r\n\t\t\tconsole.error(\"Categor√≠a inv√°lida para adaptar:\", apiCategory);\r\n\t\t\treturn {} as Category;\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\tid: apiCategory.id,\r\n\t\t\tname: apiCategory.name || \"\",\r\n\t\t\tslug: apiCategory.slug || \"\",\r\n\t\t\tdescription: apiCategory.description || \"\",\r\n\t\t\tparent_id: apiCategory.parent_id,\r\n\t\t\ticon: apiCategory.icon,\r\n\t\t\timage: apiCategory.image,\r\n\t\t\torder: apiCategory.order,\r\n\t\t\tis_active: Boolean(apiCategory.is_active ?? true),\r\n\t\t\tfeatured: Boolean(apiCategory.featured ?? false),\r\n\t\t\tcreated_at: apiCategory.created_at,\r\n\t\t\tupdated_at: apiCategory.updated_at,\r\n\t\t\t// API response specific fields\r\n\t\t\tsubcategories: Array.isArray(apiCategory.subcategories)\r\n\t\t\t\t? apiCategory.subcategories.map((sub: any) => adaptCategory(sub))\r\n\t\t\t\t: undefined,\r\n\t\t\tproduct_count: apiCategory.product_count || 0,\r\n\t\t\tfull_path: apiCategory.full_path,\r\n\t\t\thas_children: Boolean(apiCategory.has_children),\r\n\t\t\turl: apiCategory.url,\r\n\t\t\tparent: apiCategory.parent\r\n\t\t\t\t? adaptCategory(apiCategory.parent)\r\n\t\t\t\t: undefined,\r\n\t\t\timage_url: apiCategory.image_url,\r\n\t\t\ticon_url: apiCategory.icon_url,\r\n\t\t};\r\n\t}, []);\r\n\r\n\t/**\r\n\t * Obtiene todas las categor√≠as (como admin)\r\n\t */\r\n\tconst fetchAllCategories = useCallback(\r\n\t\tasync (\r\n\t\t\tparams?: CategoryFilterParams,\r\n\t\t\tforceRefresh: boolean = false\r\n\t\t): Promise<CategoryListResponse> => {\r\n\t\t\tsetLoading(true);\r\n\t\t\tsetError(null);\r\n\r\n\t\t\tconst cacheKey = `admin_categories_${JSON.stringify(params)}`;\r\n\r\n\t\t\ttry {\r\n\t\t\t\t// Verificar cach√© si no se fuerza refresh\r\n\t\t\t\tif (!forceRefresh) {\r\n\t\t\t\t\tconst cachedData = CacheService.getItem(cacheKey);\r\n\t\t\t\t\tif (cachedData && cachedData.data) {\r\n\t\t\t\t\t\tconsole.log(\"üíæ useAdminCategories: Usando categor√≠as en cach√©\");\r\n\t\t\t\t\t\tsetCategories(cachedData.data || []);\r\n\t\t\t\t\t\tsetLoading(false);\r\n\t\t\t\t\t\treturn cachedData;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconsole.log(\"üåê useAdminCategories: Obteniendo categor√≠as desde API\");\r\n\t\t\t\t// USAR USE CASE\r\n\t\t\t\tconst response = await getAllCategoriesUseCase.execute({\r\n\t\t\t\t\t...params,\r\n\t\t\t\t\t// No filtrar por is_active para que admin vea todas\r\n\t\t\t\t});\r\n\r\n\t\t\t\tif (response && response.data && Array.isArray(response.data)) {\r\n\t\t\t\t\tconst adaptedCategories = response.data.map(adaptCategory);\r\n\r\n\t\t\t\t\tconst result = {\r\n\t\t\t\t\t\tdata: adaptedCategories,\r\n\t\t\t\t\t\tmeta: response.meta || {total: adaptedCategories.length},\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t\t// Guardar en cach√©\r\n\t\t\t\t\tCacheService.setItem(\r\n\t\t\t\t\t\tcacheKey,\r\n\t\t\t\t\t\tresult,\r\n\t\t\t\t\t\tappConfig.cache.categoryCacheTime\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\tsetCategories(adaptedCategories);\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconsole.warn(\r\n\t\t\t\t\t\t\"Respuesta de categor√≠as no tiene el formato esperado:\",\r\n\t\t\t\t\t\tresponse\r\n\t\t\t\t\t);\r\n\t\t\t\t\tsetCategories([]);\r\n\t\t\t\t\treturn {data: [], meta: {total: 0}};\r\n\t\t\t\t}\r\n\t\t\t} catch (err) {\r\n\t\t\t\tconst errorMessage =\r\n\t\t\t\t\terr instanceof Error ? err.message : \"Error al obtener categor√≠as\";\r\n\t\t\t\tsetError(errorMessage);\r\n\t\t\t\tconsole.error(\"Error al obtener categor√≠as:\", err);\r\n\t\t\t\tsetCategories([]);\r\n\t\t\t\treturn {data: [], meta: {total: 0}};\r\n\t\t\t} finally {\r\n\t\t\t\tsetLoading(false);\r\n\t\t\t}\r\n\t\t},\r\n\t\t[adaptCategory]\r\n\t);\r\n\r\n\t/**\r\n\t * Obtiene categor√≠as principales (como admin)\r\n\t */\r\n\tconst fetchMainCategories = useCallback(\r\n\t\tasync (\r\n\t\t\twithCounts: boolean = true,\r\n\t\t\tforceRefresh: boolean = false\r\n\t\t): Promise<Category[]> => {\r\n\t\t\tsetLoading(true);\r\n\t\t\tsetError(null);\r\n\r\n\t\t\tconst cacheKey = `admin_main_categories_${withCounts ? \"with_counts\" : \"no_counts\"}`;\r\n\r\n\t\t\ttry {\r\n\t\t\t\t// Verificar cach√© si no se fuerza refresh\r\n\t\t\t\tif (!forceRefresh) {\r\n\t\t\t\t\tconst cachedData = CacheService.getItem(cacheKey);\r\n\t\t\t\t\tif (cachedData) {\r\n\t\t\t\t\t\tconsole.log(\r\n\t\t\t\t\t\t\t\"üíæ useAdminCategories: Usando categor√≠as principales en cach√©\"\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\tsetMainCategories(cachedData);\r\n\t\t\t\t\t\tsetLoading(false);\r\n\t\t\t\t\t\treturn cachedData;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconsole.log(\r\n\t\t\t\t\t\"üåê useAdminCategories: Obteniendo categor√≠as principales desde API\"\r\n\t\t\t\t);\r\n\t\t\t\t// USAR SERVICIO ADMIN\r\n\t\t\t\tconst response =\r\n\t\t\t\t\tawait adminCategoryService.getMainCategories(withCounts);\r\n\r\n\t\t\t\tif (response && Array.isArray(response)) {\r\n\t\t\t\t\tconst adaptedCategories = response.map(adaptCategory);\r\n\r\n\t\t\t\t\t// Guardar en cach√©\r\n\t\t\t\t\tCacheService.setItem(\r\n\t\t\t\t\t\tcacheKey,\r\n\t\t\t\t\t\tadaptedCategories,\r\n\t\t\t\t\t\tappConfig.cache.categoryCacheTime\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\tsetMainCategories(adaptedCategories);\r\n\t\t\t\t\treturn adaptedCategories;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconsole.warn(\r\n\t\t\t\t\t\t\"Respuesta de categor√≠as principales no tiene el formato esperado:\",\r\n\t\t\t\t\t\tresponse\r\n\t\t\t\t\t);\r\n\t\t\t\t\tsetMainCategories([]);\r\n\t\t\t\t\treturn [];\r\n\t\t\t\t}\r\n\t\t\t} catch (err) {\r\n\t\t\t\tconst errorMessage =\r\n\t\t\t\t\terr instanceof Error\r\n\t\t\t\t\t\t? err.message\r\n\t\t\t\t\t\t: \"Error al obtener categor√≠as principales\";\r\n\t\t\t\tsetError(errorMessage);\r\n\t\t\t\tconsole.error(\"Error al obtener categor√≠as principales:\", err);\r\n\t\t\t\tsetMainCategories([]);\r\n\t\t\t\treturn [];\r\n\t\t\t} finally {\r\n\t\t\t\tsetLoading(false);\r\n\t\t\t}\r\n\t\t},\r\n\t\t[adaptCategory]\r\n\t);\r\n\r\n\t/**\r\n\t * Obtiene una categor√≠a por ID (como admin)\r\n\t */\r\n\tconst fetchCategoryById = useCallback(\r\n\t\tasync (id: number): Promise<Category | null> => {\r\n\t\t\tsetLoading(true);\r\n\t\t\tsetError(null);\r\n\r\n\t\t\tconst cacheKey = `admin_category_${id}`;\r\n\r\n\t\t\ttry {\r\n\t\t\t\t// Verificar cach√© primero\r\n\t\t\t\tconst cachedData = CacheService.getItem(cacheKey);\r\n\t\t\t\tif (cachedData) {\r\n\t\t\t\t\tconsole.log(`üíæ useAdminCategories: Usando categor√≠a ${id} en cach√©`);\r\n\t\t\t\t\tsetCategoryDetail(cachedData);\r\n\t\t\t\t\tsetLoading(false);\r\n\t\t\t\t\treturn cachedData;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconsole.log(\r\n\t\t\t\t\t`üåê useAdminCategories: Obteniendo categor√≠a ${id} desde API`\r\n\t\t\t\t);\r\n\t\t\t\t// USAR USE CASE\r\n\t\t\t\tconst response = await getCategoryByIdUseCase.execute(id);\r\n\r\n\t\t\t\tif (response) {\r\n\t\t\t\t\tconst adaptedCategory = adaptCategory(response);\r\n\r\n\t\t\t\t\t// Guardar en cach√©\r\n\t\t\t\t\tCacheService.setItem(\r\n\t\t\t\t\t\tcacheKey,\r\n\t\t\t\t\t\tadaptedCategory,\r\n\t\t\t\t\t\tappConfig.cache.categoryCacheTime\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\tsetCategoryDetail(adaptedCategory);\r\n\t\t\t\t\treturn adaptedCategory;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tsetCategoryDetail(null);\r\n\t\t\t\treturn null;\r\n\t\t\t} catch (err) {\r\n\t\t\t\tconst errorMessage =\r\n\t\t\t\t\terr instanceof Error ? err.message : \"Error al obtener categor√≠a\";\r\n\t\t\t\tsetError(errorMessage);\r\n\t\t\t\tconsole.error(\"Error al obtener categor√≠a:\", err);\r\n\t\t\t\tsetCategoryDetail(null);\r\n\t\t\t\treturn null;\r\n\t\t\t} finally {\r\n\t\t\t\tsetLoading(false);\r\n\t\t\t}\r\n\t\t},\r\n\t\t[adaptCategory]\r\n\t);\r\n\r\n\t/**\r\n\t * Crea una nueva categor√≠a (como admin)\r\n\t */\r\n\tconst createCategory = useCallback(\r\n\t\tasync (data: CategoryCreationData): Promise<Category | null> => {\r\n\t\t\tsetLoading(true);\r\n\t\t\tsetError(null);\r\n\r\n\t\t\ttry {\r\n\t\t\t\tconsole.log(\"üåê useAdminCategories: Creando nueva categor√≠a:\", data);\r\n\t\t\t\t// USAR USE CASE\r\n\t\t\t\tconst response = await createCategoryAsAdminUseCase.execute(data);\r\n\r\n\t\t\t\tif (response) {\r\n\t\t\t\t\tconst adaptedCategory = adaptCategory(response);\r\n\r\n\t\t\t\t\t// Actualizar la lista de categor√≠as\r\n\t\t\t\t\tsetCategories((prev) => [...prev, adaptedCategory]);\r\n\r\n\t\t\t\t\t// Si es una categor√≠a principal, tambi√©n actualizar esa lista\r\n\t\t\t\t\tif (!data.parent_id) {\r\n\t\t\t\t\t\tsetMainCategories((prev) => [...prev, adaptedCategory]);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Limpiar cach√© relacionada\r\n\t\t\t\t\tclearCategoryCache();\r\n\r\n\t\t\t\t\treturn adaptedCategory;\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn null;\r\n\t\t\t} catch (err) {\r\n\t\t\t\tconst errorMessage =\r\n\t\t\t\t\terr instanceof Error ? err.message : \"Error al crear categor√≠a\";\r\n\t\t\t\tsetError(errorMessage);\r\n\t\t\t\tconsole.error(\"Error al crear categor√≠a:\", err);\r\n\t\t\t\treturn null;\r\n\t\t\t} finally {\r\n\t\t\t\tsetLoading(false);\r\n\t\t\t}\r\n\t\t},\r\n\t\t[adaptCategory]\r\n\t);\r\n\r\n\t/**\r\n\t * Actualiza una categor√≠a (como admin)\r\n\t */\r\n\tconst updateCategory = useCallback(\r\n\t\tasync (data: CategoryUpdateData): Promise<Category | null> => {\r\n\t\t\tsetLoading(true);\r\n\t\t\tsetError(null);\r\n\r\n\t\t\ttry {\r\n\t\t\t\tconsole.log(\r\n\t\t\t\t\t`üåê useAdminCategories: Actualizando categor√≠a ${data.id}:`,\r\n\t\t\t\t\tdata\r\n\t\t\t\t);\r\n\t\t\t\t// USAR USE CASE\r\n\t\t\t\tconst response = await updateAnyCategoryUseCase.execute(data);\r\n\r\n\t\t\t\tif (response) {\r\n\t\t\t\t\tconst adaptedCategory = adaptCategory(response);\r\n\r\n\t\t\t\t\t// Actualizar en las listas actuales\r\n\t\t\t\t\tsetCategories((prev) =>\r\n\t\t\t\t\t\tprev.map((cat) => (cat.id === data.id ? adaptedCategory : cat))\r\n\t\t\t\t\t);\r\n\t\t\t\t\tsetMainCategories((prev) =>\r\n\t\t\t\t\t\tprev.map((cat) => (cat.id === data.id ? adaptedCategory : cat))\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\t// Actualizar detalle si coincide\r\n\t\t\t\t\tif (categoryDetail?.id === data.id) {\r\n\t\t\t\t\t\tsetCategoryDetail(adaptedCategory);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Limpiar cach√© relacionada\r\n\t\t\t\t\tclearCategoryCache();\r\n\r\n\t\t\t\t\treturn adaptedCategory;\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn null;\r\n\t\t\t} catch (err) {\r\n\t\t\t\tconst errorMessage =\r\n\t\t\t\t\terr instanceof Error ? err.message : \"Error al actualizar categor√≠a\";\r\n\t\t\t\tsetError(errorMessage);\r\n\t\t\t\tconsole.error(\"Error al actualizar categor√≠a:\", err);\r\n\t\t\t\treturn null;\r\n\t\t\t} finally {\r\n\t\t\t\tsetLoading(false);\r\n\t\t\t}\r\n\t\t},\r\n\t\t[adaptCategory, categoryDetail]\r\n\t);\r\n\r\n\t/**\r\n\t * Elimina una categor√≠a (como admin)\r\n\t */\r\n\tconst deleteCategory = useCallback(\r\n\t\tasync (id: number): Promise<boolean> => {\r\n\t\t\tsetLoading(true);\r\n\t\t\tsetError(null);\r\n\r\n\t\t\ttry {\r\n\t\t\t\tconsole.log(`üåê useAdminCategories: Eliminando categor√≠a ${id}`);\r\n\t\t\t\t// USAR USE CASE\r\n\t\t\t\tconst result = await deleteAnyCategoryUseCase.execute(id);\r\n\r\n\t\t\t\tif (result) {\r\n\t\t\t\t\t// Remover de las listas actuales\r\n\t\t\t\t\tsetCategories((prev) => prev.filter((cat) => cat.id !== id));\r\n\t\t\t\t\tsetMainCategories((prev) => prev.filter((cat) => cat.id !== id));\r\n\r\n\t\t\t\t\t// Limpiar detalle si coincide\r\n\t\t\t\t\tif (categoryDetail?.id === id) {\r\n\t\t\t\t\t\tsetCategoryDetail(null);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Limpiar cach√© relacionada\r\n\t\t\t\t\tclearCategoryCache();\r\n\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn false;\r\n\t\t\t} catch (err) {\r\n\t\t\t\tconst errorMessage =\r\n\t\t\t\t\terr instanceof Error ? err.message : \"Error al eliminar categor√≠a\";\r\n\t\t\t\tsetError(errorMessage);\r\n\t\t\t\tconsole.error(\"Error al eliminar categor√≠a:\", err);\r\n\t\t\t\treturn false;\r\n\t\t\t} finally {\r\n\t\t\t\tsetLoading(false);\r\n\t\t\t}\r\n\t\t},\r\n\t\t[categoryDetail]\r\n\t);\r\n\r\n\t/**\r\n\t * Alterna el estado activo de una categor√≠a\r\n\t */\r\n\tconst toggleActive = useCallback(\r\n\t\tasync (id: number, is_active: boolean): Promise<boolean> => {\r\n\t\t\tsetLoading(true);\r\n\t\t\tsetError(null);\r\n\r\n\t\t\ttry {\r\n\t\t\t\tconsole.log(\r\n\t\t\t\t\t`üåê useAdminCategories: Cambiando estado activo de categor√≠a ${id} a ${is_active}`\r\n\t\t\t\t);\r\n\t\t\t\t// USAR USE CASE\r\n\t\t\t\tconst result = await toggleCategoryActiveUseCase.execute(id, is_active);\r\n\r\n\t\t\t\tif (result) {\r\n\t\t\t\t\t// Actualizar en las listas actuales\r\n\t\t\t\t\tconst updateCategory = (cat: Category) =>\r\n\t\t\t\t\t\tcat.id === id ? {...cat, is_active} : cat;\r\n\r\n\t\t\t\t\tsetCategories((prev) => prev.map(updateCategory));\r\n\t\t\t\t\tsetMainCategories((prev) => prev.map(updateCategory));\r\n\r\n\t\t\t\t\t// Actualizar detalle si coincide\r\n\t\t\t\t\tif (categoryDetail?.id === id) {\r\n\t\t\t\t\t\tsetCategoryDetail((prev) => (prev ? {...prev, is_active} : prev));\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Limpiar cach√© relacionada\r\n\t\t\t\t\tclearCategoryCache();\r\n\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn false;\r\n\t\t\t} catch (err) {\r\n\t\t\t\tconst errorMessage =\r\n\t\t\t\t\terr instanceof Error ? err.message : \"Error al cambiar estado activo\";\r\n\t\t\t\tsetError(errorMessage);\r\n\t\t\t\tconsole.error(\"Error al cambiar estado activo:\", err);\r\n\t\t\t\treturn false;\r\n\t\t\t} finally {\r\n\t\t\t\tsetLoading(false);\r\n\t\t\t}\r\n\t\t},\r\n\t\t[categoryDetail]\r\n\t);\r\n\r\n\t/**\r\n\t * Alterna el estado destacado de una categor√≠a\r\n\t */\r\n\tconst toggleFeatured = useCallback(\r\n\t\tasync (id: number, featured: boolean): Promise<boolean> => {\r\n\t\t\tsetLoading(true);\r\n\t\t\tsetError(null);\r\n\r\n\t\t\ttry {\r\n\t\t\t\tconsole.log(\r\n\t\t\t\t\t`üåê useAdminCategories: Cambiando estado destacado de categor√≠a ${id} a ${featured}`\r\n\t\t\t\t);\r\n\t\t\t\t// USAR USE CASE\r\n\t\t\t\tconst result = await toggleCategoryFeaturedUseCase.execute(\r\n\t\t\t\t\tid,\r\n\t\t\t\t\tfeatured\r\n\t\t\t\t);\r\n\r\n\t\t\t\tif (result) {\r\n\t\t\t\t\t// Actualizar en las listas actuales\r\n\t\t\t\t\tconst updateCategory = (cat: Category) =>\r\n\t\t\t\t\t\tcat.id === id ? {...cat, featured} : cat;\r\n\r\n\t\t\t\t\tsetCategories((prev) => prev.map(updateCategory));\r\n\t\t\t\t\tsetMainCategories((prev) => prev.map(updateCategory));\r\n\r\n\t\t\t\t\t// Actualizar detalle si coincide\r\n\t\t\t\t\tif (categoryDetail?.id === id) {\r\n\t\t\t\t\t\tsetCategoryDetail((prev) => (prev ? {...prev, featured} : prev));\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Limpiar cach√© relacionada\r\n\t\t\t\t\tclearCategoryCache();\r\n\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn false;\r\n\t\t\t} catch (err) {\r\n\t\t\t\tconst errorMessage =\r\n\t\t\t\t\terr instanceof Error\r\n\t\t\t\t\t\t? err.message\r\n\t\t\t\t\t\t: \"Error al cambiar estado destacado\";\r\n\t\t\t\tsetError(errorMessage);\r\n\t\t\t\tconsole.error(\"Error al cambiar estado destacado:\", err);\r\n\t\t\t\treturn false;\r\n\t\t\t} finally {\r\n\t\t\t\tsetLoading(false);\r\n\t\t\t}\r\n\t\t},\r\n\t\t[categoryDetail]\r\n\t);\r\n\r\n\t/**\r\n\t * Limpia la cach√© de categor√≠as de admin\r\n\t */\r\n\tconst clearCategoryCache = useCallback(() => {\r\n\t\tconst allKeys = Object.keys(localStorage);\r\n\t\tconst adminCategoryKeys = allKeys.filter(\r\n\t\t\t(key) =>\r\n\t\t\t\tkey.startsWith(\"admin_categories_\") ||\r\n\t\t\t\tkey.startsWith(\"admin_category_\") ||\r\n\t\t\t\tkey.startsWith(\"admin_main_categories_\") ||\r\n\t\t\t\tkey.startsWith(\"category_\") ||\r\n\t\t\t\tkey.startsWith(\"categories_\")\r\n\t\t);\r\n\r\n\t\tadminCategoryKeys.forEach((key) => {\r\n\t\t\tCacheService.removeItem(key);\r\n\t\t});\r\n\r\n\t\tconsole.log(\r\n\t\t\t`üóëÔ∏è ${adminCategoryKeys.length} claves de cach√© de categor√≠as de admin eliminadas`\r\n\t\t);\r\n\t}, []);\r\n\r\n\treturn {\r\n\t\t// Estado\r\n\t\tloading,\r\n\t\terror,\r\n\t\tcategories,\r\n\t\tmainCategories,\r\n\t\tcategoryDetail,\r\n\r\n\t\t// M√©todos\r\n\t\tfetchAllCategories,\r\n\t\tfetchMainCategories,\r\n\t\tfetchCategoryById,\r\n\t\tcreateCategory,\r\n\t\tupdateCategory,\r\n\t\tdeleteCategory,\r\n\t\ttoggleActive,\r\n\t\ttoggleFeatured,\r\n\t\tclearCategoryCache,\r\n\r\n\t\t// Utilidades\r\n\t\tsetError: (error: string | null) => setError(error),\r\n\t\tsetLoading: (loading: boolean) => setLoading(loading),\r\n\t};\r\n};\r\n\r\nexport default useAdminCategories;\r\n"],"names":["AdminCategoryService","filterParams","response","ApiClient","API_ENDPOINTS","error","id","data","is_active","featured","order","withCounts","parentId","GetAllCategoriesUseCase","adminCategoryService","categories","CreateCategoryAsAdminUseCase","category","UpdateAnyCategoryUseCase","DeleteAnyCategoryUseCase","result","ToggleCategoryActiveUseCase","ToggleCategoryFeaturedUseCase","GetCategoryByIdUseCase","getAllCategoriesUseCase","createCategoryAsAdminUseCase","updateAnyCategoryUseCase","deleteAnyCategoryUseCase","toggleCategoryActiveUseCase","toggleCategoryFeaturedUseCase","getCategoryByIdUseCase","useAdminCategories","loading","setLoading","useState","setError","setCategories","mainCategories","setMainCategories","categoryDetail","setCategoryDetail","adaptCategory","useCallback","apiCategory","sub","fetchAllCategories","params","forceRefresh","cacheKey","cachedData","CacheService","adaptedCategories","appConfig","err","errorMessage","fetchMainCategories","fetchCategoryById","adaptedCategory","createCategory","prev","clearCategoryCache","updateCategory","cat","deleteCategory","toggleActive","toggleFeatured","adminCategoryKeys","key"],"mappings":"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"}