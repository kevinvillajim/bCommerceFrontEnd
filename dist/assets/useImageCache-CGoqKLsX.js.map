{"version":3,"file":"useImageCache-CGoqKLsX.js","sources":["../../src/presentation/hooks/useImageCache.ts"],"sourcesContent":["import {useCallback} from \"react\";\r\nimport {getImageUrl} from \"../../utils/imageManager\";\r\n\r\n/**\r\n * Hook optimizado para gestión de imágenes con cache\r\n * Evita recálculos innecesarios de URLs de imagen\r\n */\r\n\r\ninterface ImageCacheEntry {\r\n\turl: string;\r\n\ttimestamp: number;\r\n}\r\n\r\n// Cache simple en memoria para URLs de imagen\r\nconst imageUrlCache = new Map<string, ImageCacheEntry>();\r\nconst CACHE_DURATION = 5 * 60 * 1000; // 5 minutos\r\n\r\n/**\r\n * Limpia entradas expiradas del cache\r\n */\r\nconst cleanExpiredCache = (): void => {\r\n\tconst now = Date.now();\r\n\tconst keysToDelete: string[] = [];\r\n\r\n\timageUrlCache.forEach((entry, key) => {\r\n\t\tif (now - entry.timestamp > CACHE_DURATION) {\r\n\t\t\tkeysToDelete.push(key);\r\n\t\t}\r\n\t});\r\n\r\n\tkeysToDelete.forEach((key) => imageUrlCache.delete(key));\r\n};\r\n\r\n/**\r\n * Interfaz para producto con imágenes\r\n */\r\ninterface ProductWithImages {\r\n\timage?: string;\r\n\tmain_image?: string;\r\n\timages?: Array<\r\n\t\t| string\r\n\t\t| {\r\n\t\t\t\toriginal?: string;\r\n\t\t\t\tmedium?: string;\r\n\t\t\t\tthumbnail?: string;\r\n\t\t\t\tlarge?: string;\r\n\t\t\t\turl?: string;\r\n\t\t\t\tpath?: string;\r\n\t\t\t\tsrc?: string;\r\n\t\t  }\r\n\t>;\r\n\tfeatured_image?: string;\r\n\tthumbnail?: string;\r\n}\r\n\r\nexport const useImageCache = () => {\r\n\t/**\r\n\t * Obtiene la URL optimizada de imagen con cache\r\n\t */\r\n\tconst getOptimizedImageUrl = useCallback(\r\n\t\t(\r\n\t\t\tproduct: ProductWithImages | null | undefined,\r\n\t\t\tpriority: \"thumbnail\" | \"medium\" | \"original\" = \"medium\"\r\n\t\t): string => {\r\n\t\t\tif (!product) return getImageUrl(\"\");\r\n\r\n\t\t\t// Crear clave de cache basada en el producto y prioridad\r\n\t\t\tconst cacheKey = `${JSON.stringify(product)}_${priority}`;\r\n\r\n\t\t\t// Verificar cache\r\n\t\t\tconst cached = imageUrlCache.get(cacheKey);\r\n\t\t\tif (cached && Date.now() - cached.timestamp < CACHE_DURATION) {\r\n\t\t\t\treturn cached.url;\r\n\t\t\t}\r\n\r\n\t\t\tlet imagePath = \"\";\r\n\r\n\t\t\t// Estrategia basada en prioridad\r\n\t\t\tif (priority === \"thumbnail\") {\r\n\t\t\t\t// Para thumbnails: priorizar imágenes pequeñas\r\n\t\t\t\tif (product.thumbnail) {\r\n\t\t\t\t\timagePath = product.thumbnail;\r\n\t\t\t\t} else if (product.image) {\r\n\t\t\t\t\timagePath = product.image;\r\n\t\t\t\t} else if (\r\n\t\t\t\t\tproduct.images &&\r\n\t\t\t\t\tArray.isArray(product.images) &&\r\n\t\t\t\t\tproduct.images.length > 0\r\n\t\t\t\t) {\r\n\t\t\t\t\tconst firstImage = product.images[0];\r\n\t\t\t\t\tif (typeof firstImage === \"string\") {\r\n\t\t\t\t\t\timagePath = firstImage;\r\n\t\t\t\t\t} else if (typeof firstImage === \"object\" && firstImage !== null) {\r\n\t\t\t\t\t\timagePath =\r\n\t\t\t\t\t\t\tfirstImage.thumbnail ||\r\n\t\t\t\t\t\t\tfirstImage.medium ||\r\n\t\t\t\t\t\t\tfirstImage.original ||\r\n\t\t\t\t\t\t\t\"\";\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else if (priority === \"original\") {\r\n\t\t\t\t// Para imágenes originales: priorizar calidad\r\n\t\t\t\tif (\r\n\t\t\t\t\tproduct.images &&\r\n\t\t\t\t\tArray.isArray(product.images) &&\r\n\t\t\t\t\tproduct.images.length > 0\r\n\t\t\t\t) {\r\n\t\t\t\t\tconst firstImage = product.images[0];\r\n\t\t\t\t\tif (typeof firstImage === \"string\") {\r\n\t\t\t\t\t\timagePath = firstImage;\r\n\t\t\t\t\t} else if (typeof firstImage === \"object\" && firstImage !== null) {\r\n\t\t\t\t\t\timagePath =\r\n\t\t\t\t\t\t\tfirstImage.original ||\r\n\t\t\t\t\t\t\tfirstImage.large ||\r\n\t\t\t\t\t\t\tfirstImage.medium ||\r\n\t\t\t\t\t\t\t\"\";\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (product.image) {\r\n\t\t\t\t\timagePath = product.image;\r\n\t\t\t\t} else if (product.main_image) {\r\n\t\t\t\t\timagePath = product.main_image;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t// Para medium (default): balance entre calidad y tamaño\r\n\t\t\t\tif (product.image) {\r\n\t\t\t\t\timagePath = product.image;\r\n\t\t\t\t} else if (product.main_image) {\r\n\t\t\t\t\timagePath = product.main_image;\r\n\t\t\t\t} else if (\r\n\t\t\t\t\tproduct.images &&\r\n\t\t\t\t\tArray.isArray(product.images) &&\r\n\t\t\t\t\tproduct.images.length > 0\r\n\t\t\t\t) {\r\n\t\t\t\t\tconst firstImage = product.images[0];\r\n\t\t\t\t\tif (typeof firstImage === \"string\") {\r\n\t\t\t\t\t\timagePath = firstImage;\r\n\t\t\t\t\t} else if (typeof firstImage === \"object\" && firstImage !== null) {\r\n\t\t\t\t\t\timagePath =\r\n\t\t\t\t\t\t\tfirstImage.original ||\r\n\t\t\t\t\t\t\tfirstImage.large ||\r\n\t\t\t\t\t\t\tfirstImage.medium ||\r\n\t\t\t\t\t\t\t\"\";\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (product.featured_image) {\r\n\t\t\t\t\timagePath = product.featured_image;\r\n\t\t\t\t} else if (product.thumbnail) {\r\n\t\t\t\t\timagePath = product.thumbnail;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tconst finalUrl = getImageUrl(imagePath);\r\n\r\n\t\t\t// Guardar en cache\r\n\t\t\timageUrlCache.set(cacheKey, {\r\n\t\t\t\turl: finalUrl,\r\n\t\t\t\ttimestamp: Date.now(),\r\n\t\t\t});\r\n\r\n\t\t\t// Limpiar cache expirado ocasionalmente\r\n\t\t\tif (imageUrlCache.size > 100) {\r\n\t\t\t\tcleanExpiredCache();\r\n\t\t\t}\r\n\r\n\t\t\treturn finalUrl;\r\n\t\t},\r\n\t\t[]\r\n\t);\r\n\r\n\t/**\r\n\t * Hook para obtener múltiples URLs de imagen optimizadas\r\n\t */\r\n\tconst getMultipleImageUrls = useCallback(\r\n\t\t(\r\n\t\t\tproducts: ProductWithImages[],\r\n\t\t\tpriority: \"thumbnail\" | \"medium\" | \"original\" = \"medium\"\r\n\t\t): string[] => {\r\n\t\t\treturn products.map((product) => getOptimizedImageUrl(product, priority));\r\n\t\t},\r\n\t\t[getOptimizedImageUrl]\r\n\t);\r\n\r\n\t/**\r\n\t * Hook para precargar imágenes\r\n\t */\r\n\tconst preloadImages = useCallback((urls: string[]): Promise<void[]> => {\r\n\t\tconst loadPromises = urls.map((url) => {\r\n\t\t\treturn new Promise<void>((resolve, reject) => {\r\n\t\t\t\tconst img = new Image();\r\n\t\t\t\timg.onload = () => resolve();\r\n\t\t\t\timg.onerror = () => reject(new Error(`Failed to load image: ${url}`));\r\n\t\t\t\timg.src = url;\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\treturn Promise.all(loadPromises);\r\n\t}, []);\r\n\r\n\t/**\r\n\t * Estadísticas del cache\r\n\t */\r\n\tconst getCacheStats = useCallback(() => {\r\n\t\tconst now = Date.now();\r\n\t\tlet activeEntries = 0;\r\n\t\tlet expiredEntries = 0;\r\n\r\n\t\timageUrlCache.forEach((entry) => {\r\n\t\t\tif (now - entry.timestamp < CACHE_DURATION) {\r\n\t\t\t\tactiveEntries++;\r\n\t\t\t} else {\r\n\t\t\t\texpiredEntries++;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn {\r\n\t\t\ttotal: imageUrlCache.size,\r\n\t\t\tactive: activeEntries,\r\n\t\t\texpired: expiredEntries,\r\n\t\t\tcacheDuration: CACHE_DURATION,\r\n\t\t};\r\n\t}, []);\r\n\r\n\t/**\r\n\t * Limpiar todo el cache\r\n\t */\r\n\tconst clearImageCache = useCallback(() => {\r\n\t\timageUrlCache.clear();\r\n\t}, []);\r\n\r\n\treturn {\r\n\t\tgetOptimizedImageUrl,\r\n\t\tgetMultipleImageUrls,\r\n\t\tpreloadImages,\r\n\t\tgetCacheStats,\r\n\t\tclearImageCache,\r\n\t};\r\n};\r\n"],"names":["imageUrlCache","CACHE_DURATION","cleanExpiredCache","now","keysToDelete","entry","key","useImageCache","getOptimizedImageUrl","useCallback","product","priority","getImageUrl","cacheKey","cached","imagePath","firstImage","finalUrl","getMultipleImageUrls","products","preloadImages","urls","loadPromises","url","resolve","reject","img","getCacheStats","activeEntries","expiredEntries","clearImageCache"],"mappings":"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"}