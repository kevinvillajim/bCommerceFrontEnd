{"version":3,"file":"SellerMessagesPage-DBa3x-Og.js","sources":["../../src/presentation/pages/seller/SellerMessagesPage.tsx"],"sourcesContent":["// src/presentation/pages/seller/SellerMessagesPage.tsx - LOADING INFINITO CORREGIDO\r\n\r\nimport React, {useState, useEffect, useRef, useCallback} from \"react\";\r\nimport {useParams, useNavigate} from \"react-router-dom\";\r\nimport {MessageSquare, ArrowLeft, RefreshCw} from \"lucide-react\";\r\nimport {useChat} from \"../../hooks/useChat\";\r\nimport {useAuth} from \"../../hooks/useAuth\";\r\nimport ChatList from \"../../components/chat/ChatList\";\r\nimport ChatMessages from \"../../components/chat/ChatMessages\";\r\nimport ChatHeader from \"../../components/chat/ChatHeader\";\r\nimport MessageForm from \"../../components/chat/MessageForm\";\r\nimport {useChatFilterNotifications} from \"../../components/notifications/ChatFilterToast\";\r\nimport type {Chat} from \"../../../core/domain/entities/Chat\";\r\n\r\nconst SellerMessagesPage: React.FC = () => {\r\n\tconst navigate = useNavigate();\r\n\tconst {chatId: chatIdParam} = useParams<{chatId?: string}>();\r\n\tconst {user} = useAuth();\r\n\r\n\t// Estados para filtros y búsqueda\r\n\tconst [searchTerm, setSearchTerm] = useState<string>(\"\");\r\n\tconst [statusFilter, setStatusFilter] = useState<string>(\"all\");\r\n\tconst [unreadFilter, setUnreadFilter] = useState<boolean>(false);\r\n\tconst [isMobileView, setIsMobileView] = useState<boolean>(\r\n\t\twindow.innerWidth < 768\r\n\t);\r\n\tconst [showChatList, setShowChatList] = useState<boolean>(!chatIdParam);\r\n\tconst [isLoadingChat, setIsLoadingChat] = useState<boolean>(false);\r\n\tconst [loadingMessage, setLoadingMessage] = useState<string>(\r\n\t\t\"Cargando conversaciones...\"\r\n\t);\r\n\r\n\t// Referencias para evitar bucles infinitos\r\n\tconst initialLoadComplete = useRef<boolean>(false);\r\n\tconst chatIdRef = useRef<string | undefined>(chatIdParam);\r\n\tconst loadAttempts = useRef<number>(0);\r\n\tconst isInitialNavRef = useRef<boolean>(true);\r\n\tconst markAllAsReadCalledRef = useRef<Record<number, boolean>>({});\r\n\tconst lastSelectedChatRef = useRef<number | null>(null);\r\n\r\n\t// Hook para notificaciones de filtro\r\n\tconst {\r\n\t\tshowSellerStrike,\r\n\t\tshowSellerBlocked,\r\n\t\tNotificationComponent\r\n\t} = useChatFilterNotifications();\r\n\r\n\t// Obtener datos del chat usando el hook personalizado para vendedores\r\n\tconst {\r\n\t\tchats,\r\n\t\tselectedChat,\r\n\t\tmessages,\r\n\t\tloading,\r\n\t\terror,\r\n\t\tfetchChats,\r\n\t\tfetchChatMessages,\r\n\t\tsendMessage,\r\n\t\tupdateChatStatus,\r\n\t\tsetSelectedChat,\r\n\t\tstartMessagesPolling,\r\n\t\tstopMessagesPolling,\r\n\t\tmarkAllAsRead,\r\n\t} = useChat(true); // IMPORTANTE: true para vendedor\r\n\r\n\t// Función para detectar cambios en el tamaño de la ventana\r\n\tuseEffect(() => {\r\n\t\tconst handleResize = () => {\r\n\t\t\tsetIsMobileView(window.innerWidth < 768);\r\n\t\t};\r\n\r\n\t\twindow.addEventListener(\"resize\", handleResize);\r\n\t\treturn () => window.removeEventListener(\"resize\", handleResize);\r\n\t}, []);\r\n\r\n\t// Cargar chats al iniciar\r\n\tuseEffect(() => {\r\n\t\tif (!initialLoadComplete.current && user?.id) {\r\n\t\t\tconsole.log(\"Cargando lista inicial de chats para vendedor...\");\r\n\t\t\tsetIsLoadingChat(true);\r\n\r\n\t\t\tfetchChats()\r\n\t\t\t\t.then((fetchedChats) => {\r\n\t\t\t\t\tinitialLoadComplete.current = true;\r\n\t\t\t\t\tsetIsLoadingChat(false);\r\n\t\t\t\t\tconsole.log(`Lista inicial de ${fetchedChats.length} chats cargada`);\r\n\r\n\t\t\t\t\tif (chatIdParam && fetchedChats.length > 0) {\r\n\t\t\t\t\t\tconst chatId = parseInt(chatIdParam, 10);\r\n\t\t\t\t\t\tconst chat = fetchedChats.find((c) => c.id === chatId);\r\n\r\n\t\t\t\t\t\tif (chat) {\r\n\t\t\t\t\t\t\tconsole.log(\r\n\t\t\t\t\t\t\t\t`Chat ${chatId} encontrado en carga inicial, seleccionando...`\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\tsetSelectedChat(chat);\r\n\t\t\t\t\t\t\tsetShowChatList(false);\r\n\t\t\t\t\t\t\tlastSelectedChatRef.current = chatId;\r\n\r\n\t\t\t\t\t\t\t// Marcar como leído después de un delay\r\n\t\t\t\t\t\t\tif (chat.unreadCount && chat.unreadCount > 0 && !markAllAsReadCalledRef.current[chatId]) {\r\n\t\t\t\t\t\t\t\tmarkAllAsReadCalledRef.current[chatId] = true;\r\n\t\t\t\t\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\t\t\t\t\tmarkAllAsRead(chatId).catch(console.error);\r\n\t\t\t\t\t\t\t\t}, 1000);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tconsole.log(\r\n\t\t\t\t\t\t\t\t`Chat ${chatId} no encontrado en lista inicial, intentando carga directa...`\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\tloadSpecificChat(chatId);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t\t.catch((err) => {\r\n\t\t\t\t\tconsole.error(\"Error al cargar chats iniciales:\", err);\r\n\t\t\t\t\tsetIsLoadingChat(false);\r\n\t\t\t\t\tinitialLoadComplete.current = true;\r\n\t\t\t\t});\r\n\t\t}\r\n\t}, [fetchChats, chatIdParam, setSelectedChat, user?.id, markAllAsRead]);\r\n\r\n\t// Función para cargar un chat específico\r\n\tconst loadSpecificChat = useCallback(\r\n\t\tasync (chatId: number) => {\r\n\t\t\tif (lastSelectedChatRef.current === chatId) {\r\n\t\t\t\tconsole.log(`Chat ${chatId} ya está seleccionado, omitiendo carga.`);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tif (!user?.id) return;\r\n\r\n\t\t\tconsole.log(`Intentando cargar chat específico ${chatId}...`);\r\n\t\t\tsetIsLoadingChat(true);\r\n\t\t\tsetLoadingMessage(`Cargando conversación #${chatId}...`);\r\n\t\t\tloadAttempts.current += 1;\r\n\r\n\t\t\ttry {\r\n\t\t\t\tconst chat = chats.find((c) => c.id === chatId);\r\n\r\n\t\t\t\tif (chat) {\r\n\t\t\t\t\tconsole.log(`Chat ${chatId} encontrado en la lista, seleccionando...`);\r\n\t\t\t\t\tsetSelectedChat(chat);\r\n\t\t\t\t\tsetShowChatList(false);\r\n\t\t\t\t\tlastSelectedChatRef.current = chatId;\r\n\r\n\t\t\t\t\tstartMessagesPolling(chatId);\r\n\r\n\t\t\t\t\t// Marcar como leído\r\n\t\t\t\t\tif (chat.unreadCount && chat.unreadCount > 0 && !markAllAsReadCalledRef.current[chatId]) {\r\n\t\t\t\t\t\tmarkAllAsReadCalledRef.current[chatId] = true;\r\n\t\t\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\t\t\tmarkAllAsRead(chatId).catch(console.error);\r\n\t\t\t\t\t\t}, 1000);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconsole.log(`Chat ${chatId} no encontrado en la lista, cargando desde API...`);\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tconst result = await fetchChatMessages(chatId);\r\n\r\n\t\t\t\t\t\tif (result) {\r\n\t\t\t\t\t\t\tconsole.log(`Chat ${chatId} cargado correctamente desde API`);\r\n\t\t\t\t\t\t\tsetShowChatList(false);\r\n\t\t\t\t\t\t\tlastSelectedChatRef.current = chatId;\r\n\t\t\t\t\t\t\tstartMessagesPolling(chatId);\r\n\r\n\t\t\t\t\t\t\t// Marcar como leído\r\n\t\t\t\t\t\t\tif (!markAllAsReadCalledRef.current[chatId]) {\r\n\t\t\t\t\t\t\t\tmarkAllAsReadCalledRef.current[chatId] = true;\r\n\t\t\t\t\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\t\t\t\t\tmarkAllAsRead(chatId).catch(console.error);\r\n\t\t\t\t\t\t\t\t}, 1000);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tconsole.warn(`Chat ${chatId} no encontrado en API`);\r\n\r\n\t\t\t\t\t\t\tif (loadAttempts.current >= 3) {\r\n\t\t\t\t\t\t\t\tnavigate(\"/seller/messages\", {replace: true});\r\n\t\t\t\t\t\t\t\tlastSelectedChatRef.current = null;\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tconst updatedChats = await fetchChats();\r\n\t\t\t\t\t\t\t\tconst updatedChat = updatedChats.find((c) => c.id === chatId);\r\n\t\t\t\t\t\t\t\tif (updatedChat) {\r\n\t\t\t\t\t\t\t\t\tsetSelectedChat(updatedChat);\r\n\t\t\t\t\t\t\t\t\tsetShowChatList(false);\r\n\t\t\t\t\t\t\t\t\tlastSelectedChatRef.current = chatId;\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\tnavigate(\"/seller/messages\", {replace: true});\r\n\t\t\t\t\t\t\t\t\tlastSelectedChatRef.current = null;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} catch (error) {\r\n\t\t\t\t\t\tconsole.error(`Error al cargar chat ${chatId} desde API:`, error);\r\n\t\t\t\t\t\tnavigate(\"/seller/messages\", {replace: true});\r\n\t\t\t\t\t\tlastSelectedChatRef.current = null;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} catch (error) {\r\n\t\t\t\tconsole.error(`Error al cargar chat ${chatId}:`, error);\r\n\t\t\t\tnavigate(\"/seller/messages\", {replace: true});\r\n\t\t\t\tlastSelectedChatRef.current = null;\r\n\t\t\t} finally {\r\n\t\t\t\tsetIsLoadingChat(false);\r\n\t\t\t}\r\n\t\t},\r\n\t\t[\r\n\t\t\tchats,\r\n\t\t\tfetchChatMessages,\r\n\t\t\tnavigate,\r\n\t\t\tsetSelectedChat,\r\n\t\t\tfetchChats,\r\n\t\t\tstartMessagesPolling,\r\n\t\t\tmarkAllAsRead,\r\n\t\t\tuser?.id,\r\n\t\t]\r\n\t);\r\n\r\n\t// Manejar cambios en la URL\r\n\tuseEffect(() => {\r\n\t\tif (!initialLoadComplete.current || !user?.id) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (isInitialNavRef.current) {\r\n\t\t\tisInitialNavRef.current = false;\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (chatIdParam === chatIdRef.current && lastSelectedChatRef.current !== null) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tstopMessagesPolling();\r\n\t\tchatIdRef.current = chatIdParam;\r\n\t\tloadAttempts.current = 0;\r\n\r\n\t\tif (chatIdParam) {\r\n\t\t\tconst chatId = parseInt(chatIdParam, 10);\r\n\r\n\t\t\tif (isNaN(chatId)) {\r\n\t\t\t\tnavigate(\"/seller/messages\", {replace: true});\r\n\t\t\t\tlastSelectedChatRef.current = null;\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tif (lastSelectedChatRef.current !== chatId) {\r\n\t\t\t\tmarkAllAsReadCalledRef.current[chatId] = false;\r\n\t\t\t\tloadSpecificChat(chatId);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tif (lastSelectedChatRef.current !== null) {\r\n\t\t\t\tsetSelectedChat(null);\r\n\t\t\t\tlastSelectedChatRef.current = null;\r\n\t\t\t\tsetShowChatList(true);\r\n\t\t\t}\r\n\t\t}\r\n\t}, [\r\n\t\tchatIdParam,\r\n\t\tloadSpecificChat,\r\n\t\tnavigate,\r\n\t\tsetSelectedChat,\r\n\t\tstopMessagesPolling,\r\n\t\tuser?.id,\r\n\t]);\r\n\r\n\t// Filtrar chats según los criterios - OPTIMIZADO con useMemo\r\n\tconst filteredChats = React.useMemo(() => {\r\n\t\treturn chats.filter((chat) => {\r\n\t\t\tconst matchesStatus = statusFilter === \"all\" || chat.status === statusFilter;\r\n\t\t\t// Filtro por mensajes no leídos - CORREGIDO como UserChatPage\r\n\t\t\tconst matchesUnread = unreadFilter ? (chat.unreadCount ?? 0) > 0 : true;\r\n\r\n\t\t\t// Búsqueda por nombre de usuario y producto\r\n\t\t\tconst matchesSearch =\r\n\t\t\t\tsearchTerm === \"\" ||\r\n\t\t\t\t(chat.product?.name &&\r\n\t\t\t\t\tchat.product.name.toLowerCase().includes(searchTerm.toLowerCase())) ||\r\n\t\t\t\t(chat.user?.name &&\r\n\t\t\t\t\tchat.user.name.toLowerCase().includes(searchTerm.toLowerCase()));\r\n\r\n\t\t\treturn matchesStatus && matchesUnread && matchesSearch;\r\n\t\t});\r\n\t}, [chats, statusFilter, unreadFilter, searchTerm]);\r\n\r\n\t// Seleccionar un chat\r\n\tconst handleSelectChat = (chat: Chat) => {\r\n\t\tif (chat && chat.id) {\r\n\t\t\tif (lastSelectedChatRef.current === chat.id) {\r\n\t\t\t\tconsole.log(`Chat ${chat.id} ya está seleccionado, omitiendo selección.`);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tconsole.log(`Vendedor seleccionó chat ${chat.id}`);\r\n\r\n\t\t\tstopMessagesPolling();\r\n\r\n\t\t\tnavigate(`/seller/messages/${chat.id}`, {replace: true});\r\n\t\t\tchatIdRef.current = String(chat.id);\r\n\t\t\tlastSelectedChatRef.current = chat.id;\r\n\r\n\t\t\tsetSelectedChat(chat);\r\n\r\n\t\t\tif (isMobileView) {\r\n\t\t\t\tsetShowChatList(false);\r\n\t\t\t}\r\n\r\n\t\t\t// Marcar como leído\r\n\t\t\tif (chat.unreadCount && chat.unreadCount > 0 && !markAllAsReadCalledRef.current[chat.id]) {\r\n\t\t\t\tmarkAllAsReadCalledRef.current[chat.id] = true;\r\n\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\tif (chat.id !== undefined) {\r\n\t\t\t\t\t\tmarkAllAsRead(chat.id).catch(console.error);\r\n\t\t\t\t\t}\r\n\t\t\t\t}, 1000);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t// CORREGIDO: Enviar mensaje sin estado local de loading\r\n\tconst handleSendMessage = async (content: string): Promise<boolean> => {\r\n\t\tconsole.log(\"Enviando mensaje como vendedor...\");\r\n\r\n\t\ttry {\r\n\t\t\tconst result = await sendMessage(content);\r\n\t\t\t\r\n\t\t\tif (result && selectedChat?.id) {\r\n\t\t\t\t// Recargar mensajes después de enviar exitosamente\r\n\t\t\t\tawait fetchChatMessages(selectedChat.id);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn result;\r\n\t\t} catch (error: any) {\r\n\t\t\tconsole.error(\"Error al enviar mensaje:\", error);\r\n\r\n\t\t\t// Manejar errores específicos del filtro de chat\r\n\t\t\tif (error?.response?.data?.status === 'error') {\r\n\t\t\t\tconst errorData = error.response.data;\r\n\t\t\t\tconst strikeCount = errorData.data?.strike_count || 0;\r\n\t\t\t\tconst isBlocked = errorData.data?.is_blocked || false;\r\n\t\t\t\tconst censoredContent = errorData.data?.censored_content;\r\n\r\n\t\t\t\tif (isBlocked) {\r\n\t\t\t\t\t// Cuenta bloqueada\r\n\t\t\t\t\tshowSellerBlocked(\r\n\t\t\t\t\t\t\"Tu cuenta ha sido bloqueada por acumular múltiples strikes. Contacta al soporte.\"\r\n\t\t\t\t\t);\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// Strike aplicado\r\n\t\t\t\t\tshowSellerStrike(\r\n\t\t\t\t\t\terrorData.message,\r\n\t\t\t\t\t\tstrikeCount,\r\n\t\t\t\t\t\tcensoredContent\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn false;\r\n\t\t}\r\n\t};\r\n\r\n\t// Actualizar estado del chat\r\n\tconst handleUpdateStatus = async (\r\n\t\tchatId: number,\r\n\t\tstatus: \"active\" | \"closed\" | \"archived\"\r\n\t) => {\r\n\t\tconsole.log(`Actualizando estado de chat ${chatId} a ${status}...`);\r\n\t\treturn await updateChatStatus(chatId, status);\r\n\t};\r\n\r\n\t// Volver a la lista en móvil\r\n\tconst handleBackToList = () => {\r\n\t\tconsole.log(\"Volviendo a lista de chats\");\r\n\r\n\t\tstopMessagesPolling();\r\n\t\tsetShowChatList(true);\r\n\t\tnavigate(\"/seller/messages\", {replace: true});\r\n\t\tchatIdRef.current = undefined;\r\n\t\tlastSelectedChatRef.current = null;\r\n\t};\r\n\r\n\t// Refrescar lista de chats\r\n\tconst refreshChats = () => {\r\n\t\tconsole.log(\"Refrescando lista de chats\");\r\n\r\n\t\tif (selectedChat && selectedChat.id) {\r\n\t\t\tmarkAllAsReadCalledRef.current[selectedChat.id] = false;\r\n\t\t}\r\n\r\n\t\tfetchChats().then(() => {\r\n\t\t\tconsole.log(\"Lista de chats refrescada\");\r\n\t\t});\r\n\t};\r\n\r\n\t// Contenido principal a renderizar\r\n\tconst renderChatContent = () => {\r\n\t\tif ((loading || isLoadingChat) && !selectedChat) {\r\n\t\t\treturn (\r\n\t\t\t\t<div className=\"flex flex-col justify-center items-center h-full\">\r\n\t\t\t\t\t<div className=\"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-primary-600 mb-4\"></div>\r\n\t\t\t\t\t<p className=\"text-gray-600\">{loadingMessage}</p>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tif (selectedChat) {\r\n\t\t\treturn (\r\n\t\t\t\t<>\r\n\t\t\t\t\t<ChatHeader\r\n\t\t\t\t\t\tchat={selectedChat}\r\n\t\t\t\t\t\tisSeller={true}\r\n\t\t\t\t\t\tonUpdateStatus={handleUpdateStatus}\r\n\t\t\t\t\t\tloading={loading}\r\n\t\t\t\t\t/>\r\n\r\n\t\t\t\t\t<div className=\"flex-1 overflow-y-auto\">\r\n\t\t\t\t\t\t<ChatMessages\r\n\t\t\t\t\t\t\tmessages={messages}\r\n\t\t\t\t\t\t\tloading={loading}\r\n\t\t\t\t\t\t\tnoMessagesText=\"No hay mensajes todavía\"\r\n\t\t\t\t\t\t\tcurrentUserId={user?.id ?? undefined} // ← CORREGIDO: Manejar null como undefined\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t<MessageForm\r\n\t\t\t\t\t\tonSendMessage={handleSendMessage}\r\n\t\t\t\t\t\tisDisabled={selectedChat.status !== \"active\"}\r\n\t\t\t\t\t\tdisabledText={\r\n\t\t\t\t\t\t\tselectedChat.status === \"closed\"\r\n\t\t\t\t\t\t\t\t? \"Esta conversación está cerrada\"\r\n\t\t\t\t\t\t\t\t: \"Esta conversación está archivada\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tisLoading={loading}\r\n\t\t\t\t\t\tchatId={selectedChat.id} // ← NUEVO: Para indicador de escritura\r\n\t\t\t\t\t/>\r\n\t\t\t\t</>\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\treturn (\r\n\t\t\t<div className=\"flex flex-col items-center justify-center h-full p-4 text-center\">\r\n\t\t\t\t<div className=\"w-16 h-16 bg-gray-200 rounded-full flex items-center justify-center mb-4\">\r\n\t\t\t\t\t<MessageSquare className=\"h-8 w-8 text-gray-500\" />\r\n\t\t\t\t</div>\r\n\t\t\t\t<h3 className=\"text-lg font-medium text-gray-900\">\r\n\t\t\t\t\tSelecciona una conversación\r\n\t\t\t\t</h3>\r\n\t\t\t\t<p className=\"text-gray-500 mt-2 max-w-md\">\r\n\t\t\t\t\t{chats.length > 0\r\n\t\t\t\t\t\t? \"Elige una conversación de la lista para ver los mensajes y responder a tus clientes\"\r\n\t\t\t\t\t\t: \"No tienes conversaciones activas. Cuando los clientes inicien conversaciones sobre tus productos, aparecerán aquí.\"}\r\n\t\t\t\t</p>\r\n\t\t\t</div>\r\n\t\t);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className=\"container mx-auto p-6 max-w-7xl\">\r\n\t\t\t<div className=\"mb-6 flex justify-between items-center\">\r\n\t\t\t\t<div className=\"flex items-center space-x-3\">\r\n\t\t\t\t\t<div className=\"h-10 w-10 bg-primary-100 rounded-lg flex items-center justify-center\">\r\n\t\t\t\t\t\t<MessageSquare className=\"w-5 h-5 text-primary-600\" />\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<h1 className=\"text-2xl font-bold text-gray-900\">Conversaciones con Clientes</h1>\r\n\t\t\t\t\t\t<p className=\"text-sm text-gray-500\">Gestiona tus chats con compradores</p>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"flex items-center space-x-3\">\r\n\t\t\t\t\t{isMobileView && selectedChat && !showChatList && (\r\n\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\tonClick={handleBackToList}\r\n\t\t\t\t\t\t\tclassName=\"inline-flex items-center px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors\"\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<ArrowLeft size={16} className=\"mr-2\" />\r\n\t\t\t\t\t\t\tVolver\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t)}\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\tonClick={refreshChats}\r\n\t\t\t\t\t\tclassName=\"inline-flex items-center px-4 py-2 bg-primary-600 text-white rounded-lg hover:bg-primary-700 transition-colors shadow-sm\"\r\n\t\t\t\t\t\tdisabled={loading || isLoadingChat}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<RefreshCw\r\n\t\t\t\t\t\t\tsize={16}\r\n\t\t\t\t\t\t\tclassName={`mr-2 ${loading || isLoadingChat ? \"animate-spin\" : \"\"}`}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\tActualizar\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\r\n\t\t\t{error && (\r\n\t\t\t\t<div className=\"bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg relative mb-6 flex items-start space-x-3\">\r\n\t\t\t\t\t<div className=\"flex-shrink-0\">\r\n\t\t\t\t\t\t<svg className=\"h-5 w-5 text-red-500\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\r\n\t\t\t\t\t\t\t<path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\" clipRule=\"evenodd\" />\r\n\t\t\t\t\t\t</svg>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"flex-1\">\r\n\t\t\t\t\t\t<h3 className=\"text-sm font-medium text-red-800\">Error al cargar conversaciones</h3>\r\n\t\t\t\t\t\t<p className=\"text-sm text-red-700 mt-1\">{error}</p>\r\n\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\tonClick={refreshChats}\r\n\t\t\t\t\t\t\tclassName=\"text-sm text-red-700 hover:text-red-900 underline mt-2 inline-block\"\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\tReintentar\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t)}\r\n\r\n\t\t\t<div\r\n\t\t\t\tclassName=\"bg-white rounded-xl shadow-sm border border-gray-200 flex flex-col md:flex-row overflow-hidden\"\r\n\t\t\t\tstyle={{minHeight: \"75vh\"}}\r\n\t\t\t>\r\n\t\t\t\t{(!isMobileView || showChatList) && (\r\n\t\t\t\t\t<div className=\"w-full md:w-1/3 border-r border-gray-200 flex flex-col bg-white\">\r\n\t\t\t\t\t\t<ChatList\r\n\t\t\t\t\t\t\tchats={filteredChats}\r\n\t\t\t\t\t\t\tselectedChatId={selectedChat?.id}\r\n\t\t\t\t\t\t\tonSelectChat={handleSelectChat}\r\n\t\t\t\t\t\t\tloading={loading || isLoadingChat}\r\n\t\t\t\t\t\t\tsearchTerm={searchTerm}\r\n\t\t\t\t\t\t\tonSearchChange={setSearchTerm}\r\n\t\t\t\t\t\t\tstatusFilter={statusFilter}\r\n\t\t\t\t\t\t\tonStatusFilterChange={setStatusFilter}\r\n\t\t\t\t\t\t\tunreadFilter={unreadFilter}\r\n\t\t\t\t\t\t\tonUnreadFilterChange={setUnreadFilter}\r\n\t\t\t\t\t\t\tisSeller={true}\r\n\t\t\t\t\t\t\tshowTabs={true}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t)}\r\n\r\n\t\t\t\t{(!isMobileView || !showChatList) && (\r\n\t\t\t\t\t<div className=\"w-full md:w-2/3 flex flex-col\">\r\n\t\t\t\t\t\t{renderChatContent()}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t)}\r\n\t\t\t</div>\r\n\r\n\t\t\t{/* Componente de notificaciones flotantes */}\r\n\t\t\t<NotificationComponent />\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default SellerMessagesPage;"],"names":["SellerMessagesPage","navigate","useNavigate","chatIdParam","useParams","user","useAuth","searchTerm","setSearchTerm","useState","statusFilter","setStatusFilter","unreadFilter","setUnreadFilter","isMobileView","setIsMobileView","showChatList","setShowChatList","isLoadingChat","setIsLoadingChat","loadingMessage","setLoadingMessage","initialLoadComplete","useRef","chatIdRef","loadAttempts","isInitialNavRef","markAllAsReadCalledRef","lastSelectedChatRef","showSellerStrike","showSellerBlocked","NotificationComponent","useChatFilterNotifications","chats","selectedChat","messages","loading","error","fetchChats","fetchChatMessages","sendMessage","updateChatStatus","setSelectedChat","startMessagesPolling","stopMessagesPolling","markAllAsRead","useChat","useEffect","handleResize","fetchedChats","chatId","chat","c","loadSpecificChat","err","useCallback","updatedChat","filteredChats","React","matchesStatus","matchesUnread","matchesSearch","handleSelectChat","handleSendMessage","content","result","errorData","strikeCount","isBlocked","censoredContent","handleUpdateStatus","status","handleBackToList","refreshChats","renderChatContent","jsxs","jsx","Fragment","ChatHeader","ChatMessages","MessageForm","MessageSquare","ArrowLeft","RefreshCw","ChatList"],"mappings":"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"}