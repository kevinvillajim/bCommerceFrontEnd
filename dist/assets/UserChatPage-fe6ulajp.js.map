{"version":3,"file":"UserChatPage-fe6ulajp.js","sources":["../../src/presentation/pages/UserChatPage.tsx"],"sourcesContent":["// src/presentation/pages/UserChatPage.tsx - CORREGIDO\r\n\r\nimport React, {useState, useEffect, useRef, useCallback} from \"react\";\r\nimport {useParams, useNavigate} from \"react-router-dom\";\r\nimport {MessageSquare, ArrowLeft, RefreshCw} from \"lucide-react\";\r\nimport {useChat} from \"../hooks/useChat\";\r\nimport {useAuth} from \"../hooks/useAuth\";\r\nimport ChatList from \"../components/chat/ChatList\";\r\nimport ChatMessages from \"../components/chat/ChatMessages\";\r\nimport ChatHeader from \"../components/chat/ChatHeader\";\r\nimport MessageForm from \"../components/chat/MessageForm\";\r\nimport {useChatFilterNotifications} from \"../components/notifications/ChatFilterToast\";\r\nimport type { Chat } from \"../../core/domain/entities/Chat\";\r\n\r\nconst UserChatPage: React.FC = () => {\r\n\tconst navigate = useNavigate();\r\n\tconst {chatId: chatIdParam} = useParams<{chatId?: string}>();\r\n\tconst {user} = useAuth();\r\n\r\n\t// Estados para filtros y búsqueda\r\n\tconst [searchTerm, setSearchTerm] = useState<string>(\"\");\r\n\tconst [statusFilter, setStatusFilter] = useState<string>(\"all\");\r\n\tconst [unreadFilter, setUnreadFilter] = useState<boolean>(false);\r\n\tconst [isMobileView, setIsMobileView] = useState<boolean>(\r\n\t\twindow.innerWidth < 768\r\n\t);\r\n\tconst [showChatList, setShowChatList] = useState<boolean>(!chatIdParam);\r\n\tconst [isLoadingChat, setIsLoadingChat] = useState<boolean>(false);\r\n\tconst [loadingMessage, setLoadingMessage] = useState<string>(\r\n\t\t\"Cargando conversaciones...\"\r\n\t);\r\n\r\n\t// Referencias para evitar bucles infinitos\r\n\tconst initialLoadComplete = useRef<boolean>(false);\r\n\tconst chatIdRef = useRef<string | undefined>(chatIdParam);\r\n\tconst loadAttempts = useRef<number>(0);\r\n\tconst isInitialNavRef = useRef<boolean>(true);\r\n\r\n\t// Hook para notificaciones de filtro\r\n\tconst {\r\n\t\tshowUserWarning,\r\n\t\tNotificationComponent\r\n\t} = useChatFilterNotifications();\r\n\r\n\t// Obtener datos del chat usando el hook personalizado\r\n\tconst {\r\n\t\tchats,\r\n\t\tselectedChat,\r\n\t\tmessages,\r\n\t\tloading,\r\n\t\terror,\r\n\t\tfetchChats,\r\n\t\tfetchChatMessages,\r\n\t\tsendMessage,\r\n\t\tupdateChatStatus,\r\n\t\tsetSelectedChat,\r\n\t\tstartMessagesPolling,\r\n\t\tstopMessagesPolling,\r\n\t\tmarkAllAsRead,\r\n\t} = useChat();\r\n\r\n\t// Función para detectar cambios en el tamaño de la ventana\r\n\tuseEffect(() => {\r\n\t\tconst handleResize = () => {\r\n\t\t\tsetIsMobileView(window.innerWidth < 768);\r\n\t\t};\r\n\r\n\t\twindow.addEventListener(\"resize\", handleResize);\r\n\t\treturn () => window.removeEventListener(\"resize\", handleResize);\r\n\t}, []);\r\n\r\n\t// Cargar chats al iniciar\r\n\tuseEffect(() => {\r\n\t\tif (!initialLoadComplete.current && user?.id) {\r\n\t\t\tconsole.log(\"Cargando lista inicial de chats...\");\r\n\t\t\tsetIsLoadingChat(true);\r\n\r\n\t\t\tfetchChats()\r\n\t\t\t\t.then((fetchedChats) => {\r\n\t\t\t\t\tinitialLoadComplete.current = true;\r\n\t\t\t\t\tsetIsLoadingChat(false);\r\n\t\t\t\t\tconsole.log(`Lista inicial de ${fetchedChats.length} chats cargada`);\r\n\r\n\t\t\t\t\t// Si hay un chatId en la URL, seleccionarlo tras cargar la lista\r\n\t\t\t\t\tif (chatIdParam && fetchedChats.length > 0) {\r\n\t\t\t\t\t\tconst chatId = parseInt(chatIdParam, 10);\r\n\t\t\t\t\t\tconst chat = fetchedChats.find((c) => c.id === chatId);\r\n\r\n\t\t\t\t\t\tif (chat) {\r\n\t\t\t\t\t\t\tconsole.log(\r\n\t\t\t\t\t\t\t\t`Chat ${chatId} encontrado en carga inicial, seleccionando...`\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\tsetSelectedChat(chat);\r\n\t\t\t\t\t\t\tsetShowChatList(false);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tconsole.log(\r\n\t\t\t\t\t\t\t\t`Chat ${chatId} no encontrado en lista inicial, intentando carga directa...`\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\tloadSpecificChat(chatId);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t\t.catch((err) => {\r\n\t\t\t\t\tconsole.error(\"Error al cargar chats iniciales:\", err);\r\n\t\t\t\t\tsetIsLoadingChat(false);\r\n\t\t\t\t\tinitialLoadComplete.current = true;\r\n\t\t\t\t});\r\n\t\t}\r\n\t}, [fetchChats, chatIdParam, setSelectedChat, user?.id]);\r\n\r\n\t// Función para cargar un chat específico\r\n\tconst loadSpecificChat = useCallback(\r\n\t\tasync (chatId: number) => {\r\n\t\t\tif (!user?.id) return;\r\n\r\n\t\t\tconsole.log(`Intentando cargar chat específico ${chatId}...`);\r\n\t\t\tsetIsLoadingChat(true);\r\n\t\t\tsetLoadingMessage(`Cargando conversación #${chatId}...`);\r\n\t\t\tloadAttempts.current += 1;\r\n\r\n\t\t\ttry {\r\n\t\t\t\t// Buscar el chat en la lista de chats\r\n\t\t\t\tconst chat = chats.find((c) => c.id === chatId);\r\n\r\n\t\t\t\tif (chat) {\r\n\t\t\t\t\tconsole.log(\r\n\t\t\t\t\t\t`Chat ${chatId} encontrado en la lista, seleccionando...`\r\n\t\t\t\t\t);\r\n\t\t\t\t\tsetSelectedChat(chat);\r\n\t\t\t\t\tsetShowChatList(false);\r\n\t\t\t\t\tstartMessagesPolling(chatId);\r\n\r\n\t\t\t\t\t// Marcar como leído\r\n\t\t\t\t\tif (chat.unreadCount && chat.unreadCount > 0) {\r\n\t\t\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\t\t\tmarkAllAsRead(chatId).catch(console.error);\r\n\t\t\t\t\t\t}, 1000);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconsole.log(\r\n\t\t\t\t\t\t`Chat ${chatId} no encontrado en la lista, cargando desde API...`\r\n\t\t\t\t\t);\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tconst result = await fetchChatMessages(chatId);\r\n\r\n\t\t\t\t\t\tif (result) {\r\n\t\t\t\t\t\t\tconsole.log(`Chat ${chatId} cargado correctamente desde API`);\r\n\t\t\t\t\t\t\tsetShowChatList(false);\r\n\t\t\t\t\t\t\tstartMessagesPolling(chatId);\r\n\r\n\t\t\t\t\t\t\t// Marcar como leído\r\n\t\t\t\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\t\t\t\tmarkAllAsRead(chatId).catch(console.error);\r\n\t\t\t\t\t\t\t}, 1000);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tconsole.warn(\r\n\t\t\t\t\t\t\t\t`Chat ${chatId} no encontrado en API, mostrando lista de chats`\r\n\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\tif (loadAttempts.current >= 3) {\r\n\t\t\t\t\t\t\t\tnavigate(\"/chats\", {replace: true});\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tconst updatedChats = await fetchChats();\r\n\t\t\t\t\t\t\t\tconst updatedChat = updatedChats.find((c) => c.id === chatId);\r\n\t\t\t\t\t\t\t\tif (updatedChat) {\r\n\t\t\t\t\t\t\t\t\tsetSelectedChat(updatedChat);\r\n\t\t\t\t\t\t\t\t\tsetShowChatList(false);\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\tnavigate(\"/chats\", {replace: true});\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} catch (error) {\r\n\t\t\t\t\t\tconsole.error(`Error al cargar chat ${chatId} desde API:`, error);\r\n\t\t\t\t\t\tnavigate(\"/chats\", {replace: true});\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} catch (error) {\r\n\t\t\t\tconsole.error(`Error al cargar chat ${chatId}:`, error);\r\n\t\t\t\tnavigate(\"/chats\", {replace: true});\r\n\t\t\t} finally {\r\n\t\t\t\tsetIsLoadingChat(false);\r\n\t\t\t}\r\n\t\t},\r\n\t\t[\r\n\t\t\tchats,\r\n\t\t\tfetchChatMessages,\r\n\t\t\tnavigate,\r\n\t\t\tsetSelectedChat,\r\n\t\t\tfetchChats,\r\n\t\t\tstartMessagesPolling,\r\n\t\t\tmarkAllAsRead,\r\n\t\t\tuser?.id,\r\n\t\t]\r\n\t);\r\n\r\n\t// Cargar chat específico cuando cambia el ID en la URL\r\n\tuseEffect(() => {\r\n\t\tif (!initialLoadComplete.current || !user?.id) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (isInitialNavRef.current) {\r\n\t\t\tisInitialNavRef.current = false;\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (chatIdParam === chatIdRef.current && selectedChat) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Detener cualquier polling activo al cambiar de chat\r\n\t\tstopMessagesPolling();\r\n\r\n\t\t// Actualizar la referencia\r\n\t\tchatIdRef.current = chatIdParam;\r\n\t\tloadAttempts.current = 0;\r\n\r\n\t\t// Si hay un ID de chat en la URL\r\n\t\tif (chatIdParam) {\r\n\t\t\tconst chatId = parseInt(chatIdParam, 10);\r\n\r\n\t\t\tif (isNaN(chatId)) {\r\n\t\t\t\tnavigate(\"/chats\", {replace: true});\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tloadSpecificChat(chatId);\r\n\t\t} else {\r\n\t\t\tsetSelectedChat(null);\r\n\t\t\tsetShowChatList(true);\r\n\t\t}\r\n\t}, [\r\n\t\tchatIdParam,\r\n\t\tloadSpecificChat,\r\n\t\tnavigate,\r\n\t\tselectedChat,\r\n\t\tsetSelectedChat,\r\n\t\tstopMessagesPolling,\r\n\t\tuser?.id,\r\n\t]);\r\n\r\n\t// Filtrar chats según los criterios\r\n\tconst filteredChats = chats.filter((chat) => {\r\n\t\t// Filtro por estado\r\n\t\tconst matchesStatus =\r\n\t\t\tstatusFilter === \"all\" || chat.status === statusFilter;\r\n\r\n\t\t// Filtro por mensajes no leídos\r\n\t\tconst matchesUnread = unreadFilter\r\n\t\t\t? chat.unreadCount && chat.unreadCount > 0\r\n\t\t\t: true;\r\n\r\n\t\t// Búsqueda por nombre de vendedor o producto - CORREGIDO\r\n\t\tconst matchesSearch =\r\n\t\t\tsearchTerm === \"\" ||\r\n\t\t\t(chat.product?.name &&\r\n\t\t\t\tchat.product.name.toLowerCase().includes(searchTerm.toLowerCase())) ||\r\n\t\t\t(chat.seller?.storeName &&\r\n\t\t\t\tchat.seller.storeName.toLowerCase().includes(searchTerm.toLowerCase()));\r\n\r\n\t\treturn matchesStatus && matchesUnread && matchesSearch;\r\n\t});\r\n\r\n\t// Seleccionar un chat\r\n\tconst handleSelectChat = (chat: Chat) => {\r\n\t\tif (chat && chat.id) {\r\n\t\t\tconsole.log(`Usuario seleccionó chat ${chat.id}`);\r\n\r\n\t\t\t// Detener cualquier polling activo\r\n\t\t\tstopMessagesPolling();\r\n\r\n\t\t\t// Actualizar la URL\r\n\t\t\tnavigate(`/chats/${chat.id}`, {replace: true});\r\n\t\t\tchatIdRef.current = String(chat.id);\r\n\r\n\t\t\t// Seleccionar chat y cargar mensajes\r\n\t\t\tsetSelectedChat(chat);\r\n\r\n\t\t\t// En móvil, ocultar la lista\r\n\t\t\tif (isMobileView) {\r\n\t\t\t\tsetShowChatList(false);\r\n\t\t\t}\r\n\r\n\t\t\t// Marcar como leído\r\n\t\t\tif (chat.unreadCount && chat.unreadCount > 0) {\r\n\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\tif (chat.id !== undefined) {\r\n\t\t\t\t\t\tmarkAllAsRead(chat.id).catch(console.error);\r\n\t\t\t\t\t}\r\n\t\t\t\t}, 1000);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t// CORREGIDO: Enviar un mensaje sin loading infinito\r\n\tconst handleSendMessage = async (content: string): Promise<boolean> => {\r\n\t\tconsole.log(\"Enviando mensaje...\");\r\n\t\t\r\n\t\ttry {\r\n\t\t\tconst result = await sendMessage(content);\r\n\r\n\t\t\t// Si el mensaje se envió correctamente, recargar mensajes\r\n\t\t\tif (result && selectedChat?.id) {\r\n\t\t\t\tawait fetchChatMessages(selectedChat.id);\r\n\t\t\t}\r\n\r\n\t\t\treturn result;\r\n\t\t} catch (error: any) {\r\n\t\t\tconsole.error(\"Error al enviar mensaje:\", error);\r\n\r\n\t\t\t// Manejar errores específicos del filtro de chat\r\n\t\t\tif (error?.response?.data?.status === 'error') {\r\n\t\t\t\tconst errorData = error.response.data;\r\n\t\t\t\tconst censoredContent = errorData.data?.censored_content;\r\n\t\t\t\t\r\n\t\t\t\t// Para usuarios normales: solo advertencia\r\n\t\t\t\tshowUserWarning(errorData.message, censoredContent);\r\n\t\t\t}\r\n\r\n\t\t\treturn false;\r\n\t\t}\r\n\t};\r\n\r\n\t// Actualizar estado del chat\r\n\tconst handleUpdateStatus = async (\r\n\t\tchatId: number,\r\n\t\tstatus: \"active\" | \"closed\" | \"archived\"\r\n\t) => {\r\n\t\tconsole.log(`Actualizando estado de chat ${chatId} a ${status}...`);\r\n\t\treturn await updateChatStatus(chatId, status);\r\n\t};\r\n\r\n\t// Volver a la lista en móvil\r\n\tconst handleBackToList = () => {\r\n\t\tconsole.log(\"Volviendo a lista de chats\");\r\n\r\n\t\t// Detener polling de mensajes\r\n\t\tstopMessagesPolling();\r\n\r\n\t\tsetShowChatList(true);\r\n\t\tnavigate(\"/chats\", {replace: true});\r\n\t\tchatIdRef.current = undefined;\r\n\t};\r\n\r\n\t// Refrescar lista de chats\r\n\tconst refreshChats = () => {\r\n\t\tconsole.log(\"Refrescando lista de chats\");\r\n\t\tfetchChats();\r\n\r\n\t\t// Si hay un chat seleccionado, recargar sus mensajes\r\n\t\tif (selectedChat && selectedChat.id) {\r\n\t\t\tfetchChatMessages(selectedChat.id);\r\n\t\t}\r\n\t};\r\n\r\n\t// Contenido principal a renderizar\r\n\tconst renderChatContent = () => {\r\n\t\t// Si estamos cargando inicialmente y no hay selectedChat\r\n\t\tif ((loading || isLoadingChat) && !selectedChat) {\r\n\t\t\treturn (\r\n\t\t\t\t<div className=\"flex flex-col justify-center items-center h-full\">\r\n\t\t\t\t\t<div className=\"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-primary-600 mb-4\"></div>\r\n\t\t\t\t\t<p className=\"text-gray-600\">{loadingMessage}</p>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\t// Si hay un chat seleccionado\r\n\t\tif (selectedChat) {\r\n\t\t\treturn (\r\n\t\t\t\t<>\r\n\t\t\t\t\t{/* Encabezado del chat */}\r\n\t\t\t\t\t<ChatHeader\r\n\t\t\t\t\t\tchat={selectedChat}\r\n\t\t\t\t\t\tisSeller={false}\r\n\t\t\t\t\t\tonUpdateStatus={handleUpdateStatus}\r\n\t\t\t\t\t\tloading={loading}\r\n\t\t\t\t\t/>\r\n\r\n\t\t\t\t\t{/* Mensajes */}\r\n\t\t\t\t\t<div className=\"flex-1 overflow-y-auto\">\r\n\t\t\t\t\t\t<ChatMessages\r\n\t\t\t\t\t\t\tmessages={messages}\r\n\t\t\t\t\t\t\tloading={loading}\r\n\t\t\t\t\t\t\tnoMessagesText=\"No hay mensajes todavía\"\r\n\t\t\t\t\t\t\tcurrentUserId={user?.id ?? undefined} // ← CORREGIDO: Asegurar que sea 'number | undefined'\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t{/* Formulario de mensajes */}\r\n\t\t\t\t\t<MessageForm\r\n\t\t\t\t\t\tonSendMessage={handleSendMessage}\r\n\t\t\t\t\t\tisDisabled={selectedChat.status !== \"active\"}\r\n\t\t\t\t\t\tdisabledText={\r\n\t\t\t\t\t\t\tselectedChat.status === \"closed\"\r\n\t\t\t\t\t\t\t\t? \"Esta conversación está cerrada\"\r\n\t\t\t\t\t\t\t\t: \"Esta conversación está archivada\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tisLoading={loading}\r\n\t\t\t\t\t\tchatId={selectedChat.id} // ← NUEVO: Para indicador de escritura\r\n\t\t\t\t\t/>\r\n\t\t\t\t</>\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\t// Si no hay chat seleccionado (mensaje de bienvenida)\r\n\t\treturn (\r\n\t\t\t<div className=\"flex flex-col items-center justify-center h-full p-4 text-center\">\r\n\t\t\t\t<div className=\"w-16 h-16 bg-gray-200 rounded-full flex items-center justify-center mb-4\">\r\n\t\t\t\t\t<MessageSquare className=\"h-8 w-8 text-gray-500\" />\r\n\t\t\t\t</div>\r\n\t\t\t\t<h3 className=\"text-lg font-medium text-gray-900\">\r\n\t\t\t\t\tSelecciona una conversación\r\n\t\t\t\t</h3>\r\n\t\t\t\t<p className=\"text-gray-500 mt-2 max-w-md\">\r\n\t\t\t\t\t{chats.length > 0\r\n\t\t\t\t\t\t? \"Elige una conversación de la lista para ver los mensajes y responder\"\r\n\t\t\t\t\t\t: \"No tienes conversaciones activas. Puedes iniciar una desde la página de un producto.\"}\r\n\t\t\t\t</p>\r\n\t\t\t</div>\r\n\t\t);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className=\"container mx-auto p-4\">\r\n\t\t\t<div className=\"mb-4 flex justify-between items-center\">\r\n\t\t\t\t<h1 className=\"text-2xl font-bold text-gray-900 flex items-center\">\r\n\t\t\t\t\t<MessageSquare className=\"w-6 h-6 mr-2\" />\r\n\t\t\t\t\tMis Conversaciones\r\n\t\t\t\t</h1>\r\n\t\t\t\t<div className=\"flex space-x-2\">\r\n\t\t\t\t\t{isMobileView && selectedChat && !showChatList && (\r\n\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\tonClick={handleBackToList}\r\n\t\t\t\t\t\t\tclassName=\"px-3 py-2 bg-gray-200 text-gray-800 rounded-lg hover:bg-gray-300 flex items-center\"\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<ArrowLeft size={16} className=\"mr-1\" />\r\n\t\t\t\t\t\t\tVolver\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t)}\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\tonClick={refreshChats}\r\n\t\t\t\t\t\tclassName=\"px-3 py-2 bg-primary-600 text-white rounded-lg hover:bg-primary-700 transition-colors flex items-center\"\r\n\t\t\t\t\t\tdisabled={loading || isLoadingChat}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<RefreshCw\r\n\t\t\t\t\t\t\tsize={16}\r\n\t\t\t\t\t\t\tclassName={`mr-1 ${loading || isLoadingChat ? \"animate-spin\" : \"\"}`}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\tActualizar\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\r\n\t\t\t{error && (\r\n\t\t\t\t<div className=\"bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4\">\r\n\t\t\t\t\t<strong className=\"font-bold\">Error: </strong>\r\n\t\t\t\t\t<span className=\"block sm:inline\">{error}</span>\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\tonClick={refreshChats}\r\n\t\t\t\t\t\tclassName=\"underline ml-2 text-red-700 hover:text-red-900\"\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tReintentar\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</div>\r\n\t\t\t)}\r\n\r\n\t\t\t<div\r\n\t\t\t\tclassName=\"bg-white rounded-lg shadow-sm flex flex-col md:flex-row overflow-hidden\"\r\n\t\t\t\tstyle={{minHeight: \"70vh\"}}\r\n\t\t\t>\r\n\t\t\t\t{/* Lista de chats (visible en escritorio o cuando está activa en móvil) */}\r\n\t\t\t\t{(!isMobileView || showChatList) && (\r\n\t\t\t\t\t<div className=\"w-full md:w-1/3 border-r border-gray-200 flex flex-col scrollable-container\">\r\n\t\t\t\t\t\t<ChatList\r\n\t\t\t\t\t\t\tchats={filteredChats}\r\n\t\t\t\t\t\t\tselectedChatId={selectedChat?.id}\r\n\t\t\t\t\t\t\tonSelectChat={handleSelectChat}\r\n\t\t\t\t\t\t\tloading={loading || isLoadingChat}\r\n\t\t\t\t\t\t\tsearchTerm={searchTerm}\r\n\t\t\t\t\t\t\tonSearchChange={setSearchTerm}\r\n\t\t\t\t\t\t\tstatusFilter={statusFilter}\r\n\t\t\t\t\t\t\tonStatusFilterChange={setStatusFilter}\r\n\t\t\t\t\t\t\tunreadFilter={unreadFilter}\r\n\t\t\t\t\t\t\tonUnreadFilterChange={setUnreadFilter}\r\n\t\t\t\t\t\t\tisSeller={false}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t)}\r\n\r\n\t\t\t\t{/* Área de chat (visible en escritorio o cuando está activa en móvil) */}\r\n\t\t\t\t{(!isMobileView || !showChatList) && (\r\n\t\t\t\t\t<div className=\"w-full md:w-2/3 flex flex-col\">\r\n\t\t\t\t\t\t{renderChatContent()}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t)}\r\n\t\t\t</div>\r\n\r\n\t\t\t{/* Componente de notificaciones flotantes */}\r\n\t\t\t<NotificationComponent />\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default UserChatPage;"],"names":["UserChatPage","navigate","useNavigate","chatIdParam","useParams","user","useAuth","searchTerm","setSearchTerm","useState","statusFilter","setStatusFilter","unreadFilter","setUnreadFilter","isMobileView","setIsMobileView","showChatList","setShowChatList","isLoadingChat","setIsLoadingChat","loadingMessage","setLoadingMessage","initialLoadComplete","useRef","chatIdRef","loadAttempts","isInitialNavRef","showUserWarning","NotificationComponent","useChatFilterNotifications","chats","selectedChat","messages","loading","error","fetchChats","fetchChatMessages","sendMessage","updateChatStatus","setSelectedChat","startMessagesPolling","stopMessagesPolling","markAllAsRead","useChat","useEffect","handleResize","fetchedChats","chatId","chat","c","loadSpecificChat","err","useCallback","updatedChat","filteredChats","matchesStatus","matchesUnread","matchesSearch","handleSelectChat","handleSendMessage","content","result","errorData","censoredContent","handleUpdateStatus","status","handleBackToList","refreshChats","renderChatContent","jsxs","jsx","Fragment","ChatHeader","ChatMessages","MessageForm","MessageSquare","ArrowLeft","RefreshCw","ChatList"],"mappings":"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"}