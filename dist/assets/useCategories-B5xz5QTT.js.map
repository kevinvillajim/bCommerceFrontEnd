{"version":3,"file":"useCategories-B5xz5QTT.js","sources":["../../src/core/services/CategoryService.ts","../../src/presentation/hooks/useCategories.ts"],"sourcesContent":["// src/core/services/CategoryService.ts - ACTUALIZADO\r\n\r\nimport ApiClient from \"../../infrastructure/api/apiClient\";\r\nimport {API_ENDPOINTS} from \"../../constants/apiEndpoints\";\r\nimport type {\r\n\tCategory,\r\n\tCategoryListResponse,\r\n\tCategoryFilterParams,\r\n} from \"../domain/entities/Category\";\r\n\r\n/**\r\n * Servicio de categor√≠as - Para usuarios normales y operaciones de solo lectura\r\n * NO incluye operaciones de creaci√≥n, actualizaci√≥n o eliminaci√≥n\r\n * Esas operaciones est√°n en AdminCategoryService\r\n */\r\nexport class CategoryService {\r\n\t/**\r\n\t * Obtiene categor√≠as (solo lectura)\r\n\t */\r\n\tasync getCategories(\r\n\t\tfilterParams?: CategoryFilterParams\r\n\t): Promise<CategoryListResponse | null> {\r\n\t\ttry {\r\n\t\t\tconsole.log(\"üì§ CategoryService: Obteniendo categor√≠as:\", filterParams);\r\n\r\n\t\t\tconst response = await ApiClient.get<CategoryListResponse>(\r\n\t\t\t\tAPI_ENDPOINTS.CATEGORIES.LIST,\r\n\t\t\t\tfilterParams\r\n\t\t\t);\r\n\r\n\t\t\tconsole.log(\"üì• CategoryService: Respuesta del servidor:\", response);\r\n\t\t\treturn response;\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\"‚ùå Error en CategoryService.getCategories:\", error);\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Obtiene una categor√≠a por ID (solo lectura)\r\n\t */\r\n\tasync getCategoryById(id: number): Promise<Category | null> {\r\n\t\ttry {\r\n\t\t\tconsole.log(`üì§ CategoryService: Obteniendo categor√≠a ${id}`);\r\n\r\n\t\t\tconst response = await ApiClient.get<Category>(\r\n\t\t\t\tAPI_ENDPOINTS.CATEGORIES.DETAILS(id)\r\n\t\t\t);\r\n\r\n\t\t\tconsole.log(\"‚úÖ CategoryService: Categor√≠a obtenida:\", response);\r\n\t\t\treturn response;\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\"‚ùå Error en CategoryService.getCategoryById:\", error);\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Obtiene una categor√≠a por slug (solo lectura)\r\n\t */\r\n\tasync getCategoryBySlug(slug: string): Promise<Category | null> {\r\n\t\ttry {\r\n\t\t\tconsole.log(`üì§ CategoryService: Obteniendo categor√≠a por slug ${slug}`);\r\n\r\n\t\t\tconst response = await ApiClient.get<Category>(\r\n\t\t\t\tAPI_ENDPOINTS.CATEGORIES.SLUG(slug)\r\n\t\t\t);\r\n\r\n\t\t\tconsole.log(\"‚úÖ CategoryService: Categor√≠a obtenida por slug:\", response);\r\n\t\t\treturn response;\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\"‚ùå Error en CategoryService.getCategoryBySlug:\", error);\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Obtiene categor√≠as principales (solo lectura)\r\n\t */\r\n\tasync getMainCategories(withCounts: boolean = true): Promise<Category[]> {\r\n\t\ttry {\r\n\t\t\tconsole.log(\"üì§ CategoryService: Obteniendo categor√≠as principales\");\r\n\r\n\t\t\tconst response = await ApiClient.get<Category[]>(\r\n\t\t\t\tAPI_ENDPOINTS.CATEGORIES.MAIN,\r\n\t\t\t\t{with_counts: withCounts}\r\n\t\t\t);\r\n\r\n\t\t\tconsole.log(\r\n\t\t\t\t\"‚úÖ CategoryService: Categor√≠as principales obtenidas:\",\r\n\t\t\t\tresponse\r\n\t\t\t);\r\n\t\t\treturn response || [];\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\"‚ùå Error en CategoryService.getMainCategories:\", error);\r\n\t\t\treturn [];\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Obtiene categor√≠as destacadas (solo lectura)\r\n\t */\r\n\tasync getFeaturedCategories(limit: number = 8): Promise<Category[]> {\r\n\t\ttry {\r\n\t\t\tconsole.log(\"üì§ CategoryService: Obteniendo categor√≠as destacadas\");\r\n\r\n\t\t\tconst response = await ApiClient.get<Category[]>(\r\n\t\t\t\tAPI_ENDPOINTS.CATEGORIES.FEATURED, {limit}\r\n\t\t\t);\r\n\r\n\t\t\tconsole.log(\r\n\t\t\t\t\"‚úÖ CategoryService: Categor√≠as destacadas obtenidas:\",\r\n\t\t\t\tresponse\r\n\t\t\t);\r\n\t\t\treturn response || [];\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\r\n\t\t\t\t\"‚ùå Error en CategoryService.getFeaturedCategories:\",\r\n\t\t\t\terror\r\n\t\t\t);\r\n\t\t\treturn [];\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Obtiene subcategor√≠as de una categor√≠a (solo lectura)\r\n\t */\r\n\tasync getSubcategories(parentId: number): Promise<Category[]> {\r\n\t\ttry {\r\n\t\t\tconsole.log(\r\n\t\t\t\t`üì§ CategoryService: Obteniendo subcategor√≠as de ${parentId}`\r\n\t\t\t);\r\n\r\n\t\t\tconst response = await ApiClient.get<Category[]>(\r\n\t\t\t\tAPI_ENDPOINTS.CATEGORIES.SUBCATEGORIES(parentId)\r\n\t\t\t);\r\n\r\n\t\t\tconsole.log(\"‚úÖ CategoryService: Subcategor√≠as obtenidas:\", response);\r\n\t\t\treturn response || [];\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\"‚ùå Error en CategoryService.getSubcategories:\", error);\r\n\t\t\treturn [];\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Obtiene productos de una categor√≠a (solo lectura)\r\n\t */\r\n\tasync getCategoryProducts(\r\n\t\tcategoryId: number,\r\n\t\tfilterParams?: any\r\n\t): Promise<any> {\r\n\t\ttry {\r\n\t\t\tconsole.log(\r\n\t\t\t\t`üì§ CategoryService: Obteniendo productos de categor√≠a ${categoryId}`\r\n\t\t\t);\r\n\r\n\t\t\tconst response = await ApiClient.get(\r\n\t\t\t\tAPI_ENDPOINTS.CATEGORIES.PRODUCTS(categoryId),\r\n\t\t\t\tfilterParams\r\n\t\t\t);\r\n\r\n\t\t\tconsole.log(\r\n\t\t\t\t\"‚úÖ CategoryService: Productos de categor√≠a obtenidos:\",\r\n\t\t\t\tresponse\r\n\t\t\t);\r\n\t\t\treturn response;\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\"‚ùå Error en CategoryService.getCategoryProducts:\", error);\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default CategoryService;\r\n","// src/presentation/hooks/useCategories.ts\r\nimport {useState, useCallback, useEffect} from \"react\";\r\nimport CacheService from \"../../infrastructure/services/CacheService\";\r\nimport appConfig from \"../../config/appConfig\";\r\nimport {CategoryService} from \"../../core/services/CategoryService\";\r\nimport type {\r\n\tCategory,\r\n} from \"../../core/domain/entities/Category\";\r\n\r\n// Instanciar el servicio de categor√≠as\r\nconst categoryService = new CategoryService();\r\n\r\n/**\r\n * Hook para gestionar operaciones con categor√≠as\r\n */\r\nexport const useCategories = () => {\r\n\tconst [loading, setLoading] = useState<boolean>(false);\r\n\tconst [error, setError] = useState<string | null>(null);\r\n\tconst [categories, setCategories] = useState<Category[]>([]);\r\n\tconst [mainCategories, setMainCategories] = useState<Category[]>([]);\r\n\tconst [featuredCategories, setFeaturedCategories] = useState<Category[]>([]);\r\n\tconst [categoryDetail, setCategoryDetail] = useState<Category | null>(null);\r\n\tconst [isInitialized, setIsInitialized] = useState<boolean>(false);\r\n\r\n\t// Adaptador para normalizar los datos de categor√≠as\r\n\tconst adaptCategory = useCallback((apiCategory: any): Category => {\r\n\t\t// Verificar que sea un objeto para prevenir errores\r\n\t\tif (!apiCategory || typeof apiCategory !== \"object\") {\r\n\t\t\tconsole.error(\"Categor√≠a inv√°lida para adaptar:\", apiCategory);\r\n\t\t\treturn {} as Category;\r\n\t\t}\r\n\r\n\t\t// Mapeo de propiedades, respetando snake_case del backend\r\n\t\treturn {\r\n\t\t\tid: apiCategory.id,\r\n\t\t\tname: apiCategory.name || \"\",\r\n\t\t\tslug: apiCategory.slug || \"\",\r\n\t\t\tdescription: apiCategory.description || \"\",\r\n\t\t\tparent_id: apiCategory.parent_id,\r\n\t\t\ticon: apiCategory.icon,\r\n\t\t\timage: apiCategory.image,\r\n\t\t\torder: apiCategory.order,\r\n\t\t\tis_active: Boolean(apiCategory.is_active ?? true),\r\n\t\t\tfeatured: Boolean(apiCategory.featured ?? false),\r\n\t\t\tcreated_at: apiCategory.created_at,\r\n\t\t\tupdated_at: apiCategory.updated_at,\r\n\t\t\t// API response specific fields\r\n\t\t\tsubcategories: Array.isArray(apiCategory.subcategories)\r\n\t\t\t\t? apiCategory.subcategories.map((sub: any) => adaptCategory(sub))\r\n\t\t\t\t: undefined,\r\n\t\t\tproduct_count: apiCategory.product_count || 0,\r\n\t\t\tfull_path: apiCategory.full_path,\r\n\t\t\thas_children: Boolean(apiCategory.has_children),\r\n\t\t\turl: apiCategory.url,\r\n\t\t\tparent: apiCategory.parent\r\n\t\t\t\t? adaptCategory(apiCategory.parent)\r\n\t\t\t\t: undefined,\r\n\t\t\timage_url: apiCategory.image_url,\r\n\t\t\ticon_url: apiCategory.icon_url,\r\n\t\t};\r\n\t}, []);\r\n\r\n\t// Inicializaci√≥n - cargar categor√≠as si hay datos en cach√©\r\n\tuseEffect(() => {\r\n\t\tif (!isInitialized) {\r\n\t\t\t// Verificar si hay categor√≠as en cach√©\r\n\t\t\tconst cachedCategories = CacheService.getItem(\"categories_all\");\r\n\t\t\tif (cachedCategories && cachedCategories.data) {\r\n\t\t\t\tsetCategories(cachedCategories.data || []);\r\n\t\t\t}\r\n\r\n\t\t\t// Verificar si hay categor√≠as principales en cach√©\r\n\t\t\tconst cachedMainCategories = CacheService.getItem(\"categories_main\");\r\n\t\t\tif (cachedMainCategories) {\r\n\t\t\t\tsetMainCategories(cachedMainCategories);\r\n\t\t\t}\r\n\r\n\t\t\t// Verificar si hay categor√≠as destacadas en cach√©\r\n\t\t\tconst cachedFeaturedCategories = CacheService.getItem(\r\n\t\t\t\t\"categories_featured\"\r\n\t\t\t);\r\n\t\t\tif (cachedFeaturedCategories) {\r\n\t\t\t\tsetFeaturedCategories(cachedFeaturedCategories);\r\n\t\t\t}\r\n\r\n\t\t\tsetIsInitialized(true);\r\n\t\t}\r\n\t}, [isInitialized]);\r\n\r\n\t/**\r\n\t * Obtener todas las categor√≠as\r\n\t */\r\n\tconst fetchCategories = useCallback(\r\n\t\tasync (withCounts: boolean = true, forceRefresh: boolean = false) => {\r\n\t\t\tsetLoading(true);\r\n\t\t\tsetError(null);\r\n\r\n\t\t\tconst cacheKey = `categories_all_${withCounts ? \"with_counts\" : \"no_counts\"}`;\r\n\r\n\t\t\ttry {\r\n\t\t\t\t// Intentar obtener datos de la cach√© primero si no se fuerza refresh\r\n\t\t\t\tif (!forceRefresh) {\r\n\t\t\t\t\tconst cachedData = CacheService.getItem(cacheKey);\r\n\t\t\t\t\tif (cachedData && cachedData.data) {\r\n\t\t\t\t\t\tconsole.log(\"Usando categor√≠as en cach√©\");\r\n\t\t\t\t\t\tsetCategories(cachedData.data || []);\r\n\t\t\t\t\t\tsetLoading(false);\r\n\t\t\t\t\t\treturn cachedData;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconsole.log(\"Obteniendo categor√≠as desde API con withCounts:\", withCounts);\r\n\t\t\t\t\r\n\t\t\t\t// Hacer la petici√≥n a la API\r\n\t\t\t\tconst response = await categoryService.getCategories({\r\n\t\t\t\t\twith_counts: withCounts,\r\n\t\t\t\t\tis_active: true\r\n\t\t\t\t});\r\n\r\n\t\t\t\tconsole.log(\"Respuesta de categor√≠as desde API:\", response);\r\n\r\n\t\t\t\tif (response && response.data && Array.isArray(response.data)) {\r\n\t\t\t\t\t// Adaptar datos\r\n\t\t\t\t\tconst adaptedCategories = response.data.map(adaptCategory);\r\n\r\n\t\t\t\t\tconst result = {\r\n\t\t\t\t\t\tdata: adaptedCategories,\r\n\t\t\t\t\t\tmeta: response.meta || {total: adaptedCategories.length},\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t\t// Guardar en cach√©\r\n\t\t\t\t\tCacheService.setItem(\r\n\t\t\t\t\t\tcacheKey,\r\n\t\t\t\t\t\tresult,\r\n\t\t\t\t\t\tappConfig.cache.categoryCacheTime\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\tsetCategories(adaptedCategories);\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconsole.warn(\"Respuesta de categor√≠as no tiene el formato esperado:\", response);\r\n\t\t\t\t\tsetCategories([]);\r\n\t\t\t\t\treturn {data: [], meta: {total: 0}};\r\n\t\t\t\t}\r\n\t\t\t} catch (err) {\r\n\t\t\t\tconst errorMessage =\r\n\t\t\t\t\terr instanceof Error ? err.message : \"Error al obtener categor√≠as\";\r\n\t\t\t\tsetError(errorMessage);\r\n\t\t\t\tconsole.error(\"Error al obtener categor√≠as:\", err);\r\n\t\t\t\tsetCategories([]);\r\n\t\t\t\treturn {data: [], meta: {total: 0}};\r\n\t\t\t} finally {\r\n\t\t\t\tsetLoading(false);\r\n\t\t\t}\r\n\t\t},\r\n\t\t[adaptCategory]\r\n\t);\r\n\r\n\t/**\r\n\t * Obtener categor√≠as principales\r\n\t */\r\n\tconst fetchMainCategories = useCallback(\r\n\t\tasync (withCounts: boolean = true, forceRefresh: boolean = false) => {\r\n\t\t\tsetLoading(true);\r\n\t\t\tsetError(null);\r\n\r\n\t\t\tconst cacheKey = `categories_main_${withCounts ? \"with_counts\" : \"no_counts\"}`;\r\n\r\n\t\t\ttry {\r\n\t\t\t\t// Intentar obtener datos de la cach√© primero\r\n\t\t\t\tif (!forceRefresh) {\r\n\t\t\t\t\tconst cachedData = CacheService.getItem(cacheKey);\r\n\t\t\t\t\tif (cachedData) {\r\n\t\t\t\t\t\tconsole.log(\"Usando categor√≠as principales en cach√©\");\r\n\t\t\t\t\t\tsetMainCategories(cachedData);\r\n\t\t\t\t\t\tsetLoading(false);\r\n\t\t\t\t\t\treturn cachedData;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconsole.log(\"Obteniendo categor√≠as principales desde API\");\r\n\t\t\t\t\r\n\t\t\t\t// Hacer la petici√≥n a la API para categor√≠as principales\r\n\t\t\t\tconst response = await categoryService.getMainCategories(withCounts);\r\n\r\n\t\t\t\tconsole.log(\"Respuesta de categor√≠as principales desde API:\", response);\r\n\r\n\t\t\t\tif (response && Array.isArray(response)) {\r\n\t\t\t\t\t// Adaptar datos si es necesario\r\n\t\t\t\t\tconst adaptedCategories = response.map(adaptCategory);\r\n\r\n\t\t\t\t\t// Guardar en cach√©\r\n\t\t\t\t\tCacheService.setItem(\r\n\t\t\t\t\t\tcacheKey,\r\n\t\t\t\t\t\tadaptedCategories,\r\n\t\t\t\t\t\tappConfig.cache.categoryCacheTime\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\tsetMainCategories(adaptedCategories);\r\n\t\t\t\t\treturn adaptedCategories;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconsole.warn(\"Respuesta de categor√≠as principales no tiene el formato esperado:\", response);\r\n\t\t\t\t\tsetMainCategories([]);\r\n\t\t\t\t\treturn [];\r\n\t\t\t\t}\r\n\t\t\t} catch (err) {\r\n\t\t\t\tconst errorMessage =\r\n\t\t\t\t\terr instanceof Error\r\n\t\t\t\t\t\t? err.message\r\n\t\t\t\t\t\t: \"Error al obtener categor√≠as principales\";\r\n\t\t\t\tsetError(errorMessage);\r\n\t\t\t\tconsole.error(\"Error al obtener categor√≠as principales:\", err);\r\n\t\t\t\tsetMainCategories([]);\r\n\t\t\t\treturn [];\r\n\t\t\t} finally {\r\n\t\t\t\tsetLoading(false);\r\n\t\t\t}\r\n\t\t},\r\n\t\t[adaptCategory]\r\n\t);\r\n\r\n\t/**\r\n\t * Obtener categor√≠as destacadas\r\n\t */\r\n\tconst fetchFeaturedCategories = useCallback(\r\n\t\tasync (limit: number = 8, forceRefresh: boolean = false) => {\r\n\t\t\tsetLoading(true);\r\n\t\t\tsetError(null);\r\n\r\n\t\t\tconst cacheKey = `categories_featured_${limit}`;\r\n\r\n\t\t\ttry {\r\n\t\t\t\t// Intentar obtener datos de la cach√© primero\r\n\t\t\t\tif (!forceRefresh) {\r\n\t\t\t\t\tconst cachedData = CacheService.getItem(cacheKey);\r\n\t\t\t\t\tif (cachedData) {\r\n\t\t\t\t\t\tconsole.log(\"Usando categor√≠as destacadas en cach√©\");\r\n\t\t\t\t\t\tsetFeaturedCategories(cachedData);\r\n\t\t\t\t\t\tsetLoading(false);\r\n\t\t\t\t\t\treturn cachedData;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconsole.log(\"Obteniendo categor√≠as destacadas desde API\");\r\n\t\t\t\t\r\n\t\t\t\t// Hacer la petici√≥n a la API\r\n\t\t\t\tconst response = await categoryService.getFeaturedCategories(limit);\r\n\r\n\t\t\t\tconsole.log(\"Respuesta de categor√≠as destacadas desde API:\", response);\r\n\r\n\t\t\t\tif (response && Array.isArray(response)) {\r\n\t\t\t\t\t// Adaptar datos si es necesario\r\n\t\t\t\t\tconst adaptedCategories = response.map(adaptCategory);\r\n\r\n\t\t\t\t\t// Guardar en cach√©\r\n\t\t\t\t\tCacheService.setItem(\r\n\t\t\t\t\t\tcacheKey,\r\n\t\t\t\t\t\tadaptedCategories,\r\n\t\t\t\t\t\tappConfig.cache.categoryCacheTime\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\tsetFeaturedCategories(adaptedCategories);\r\n\t\t\t\t\treturn adaptedCategories;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconsole.warn(\"Respuesta de categor√≠as destacadas no tiene el formato esperado:\", response);\r\n\t\t\t\t\tsetFeaturedCategories([]);\r\n\t\t\t\t\treturn [];\r\n\t\t\t\t}\r\n\t\t\t} catch (err) {\r\n\t\t\t\tconst errorMessage =\r\n\t\t\t\t\terr instanceof Error\r\n\t\t\t\t\t\t? err.message\r\n\t\t\t\t\t\t: \"Error al obtener categor√≠as destacadas\";\r\n\t\t\t\tsetError(errorMessage);\r\n\t\t\t\tconsole.error(\"Error al obtener categor√≠as destacadas:\", err);\r\n\t\t\t\tsetFeaturedCategories([]);\r\n\t\t\t\treturn [];\r\n\t\t\t} finally {\r\n\t\t\t\tsetLoading(false);\r\n\t\t\t}\r\n\t\t},\r\n\t\t[adaptCategory]\r\n\t);\r\n\r\n\t/**\r\n\t * Obtener subcategor√≠as de una categor√≠a\r\n\t */\r\n\tconst fetchSubcategories = useCallback(\r\n\t\tasync (categoryId: number) => {\r\n\t\t\tsetLoading(true);\r\n\t\t\tsetError(null);\r\n\r\n\t\t\tconst cacheKey = `categories_subcats_${categoryId}`;\r\n\r\n\t\t\ttry {\r\n\t\t\t\t// Intentar obtener datos de la cach√© primero\r\n\t\t\t\tconst cachedData = CacheService.getItem(cacheKey);\r\n\r\n\t\t\t\tif (cachedData) {\r\n\t\t\t\t\tconsole.log(\r\n\t\t\t\t\t\t`Usando subcategor√≠as en cach√© para categor√≠a ${categoryId}`\r\n\t\t\t\t\t);\r\n\t\t\t\t\tsetLoading(false);\r\n\t\t\t\t\treturn cachedData;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Si no hay cach√©, hacer la petici√≥n a la API\r\n\t\t\t\tconst response = await categoryService.getSubcategories(categoryId);\r\n\r\n\t\t\t\tconsole.log(\r\n\t\t\t\t\t`Respuesta de subcategor√≠as para categor√≠a ${categoryId}:`,\r\n\t\t\t\t\tresponse\r\n\t\t\t\t);\r\n\r\n\t\t\t\tif (response && response.length > 0) {\r\n\t\t\t\t\t// Adaptar datos si es necesario\r\n\t\t\t\t\tconst adaptedCategories = response.map(adaptCategory);\r\n\r\n\t\t\t\t\t// Guardar en cach√©\r\n\t\t\t\t\tCacheService.setItem(\r\n\t\t\t\t\t\tcacheKey,\r\n\t\t\t\t\t\tadaptedCategories,\r\n\t\t\t\t\t\tappConfig.cache.categoryCacheTime\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\treturn adaptedCategories;\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn [];\r\n\t\t\t} catch (err) {\r\n\t\t\t\tconst errorMessage =\r\n\t\t\t\t\terr instanceof Error ? err.message : \"Error al obtener subcategor√≠as\";\r\n\t\t\t\tsetError(errorMessage);\r\n\t\t\t\tconsole.error(\"Error al obtener subcategor√≠as:\", err);\r\n\t\t\t\treturn [];\r\n\t\t\t} finally {\r\n\t\t\t\tsetLoading(false);\r\n\t\t\t}\r\n\t\t},\r\n\t\t[adaptCategory]\r\n\t);\r\n\r\n\t/**\r\n\t * Obtener categor√≠a por su slug\r\n\t */\r\n\tconst fetchCategoryBySlug = useCallback(\r\n\t\tasync (slug: string) => {\r\n\t\t\tsetLoading(true);\r\n\t\t\tsetError(null);\r\n\r\n\t\t\tconst cacheKey = `category_slug_${slug}`;\r\n\r\n\t\t\ttry {\r\n\t\t\t\t// Intentar obtener datos de la cach√© primero\r\n\t\t\t\tconst cachedData = CacheService.getItem(cacheKey);\r\n\r\n\t\t\t\tif (cachedData) {\r\n\t\t\t\t\tconsole.log(`Usando categor√≠a en cach√© para slug ${slug}`);\r\n\t\t\t\t\tsetCategoryDetail(cachedData);\r\n\t\t\t\t\tsetLoading(false);\r\n\t\t\t\t\treturn cachedData;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Si no hay cach√©, hacer la petici√≥n a la API\r\n\t\t\t\tconst response = await categoryService.getCategoryBySlug(slug);\r\n\r\n\t\t\t\tconsole.log(`Respuesta de categor√≠a con slug ${slug}:`, response);\r\n\r\n\t\t\t\tif (response) {\r\n\t\t\t\t\t// Adaptar datos si es necesario\r\n\t\t\t\t\tconst adaptedCategory = adaptCategory(response);\r\n\r\n\t\t\t\t\t// Guardar en cach√©\r\n\t\t\t\t\tCacheService.setItem(\r\n\t\t\t\t\t\tcacheKey,\r\n\t\t\t\t\t\tadaptedCategory,\r\n\t\t\t\t\t\tappConfig.cache.categoryCacheTime\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\tsetCategoryDetail(adaptedCategory);\r\n\t\t\t\t\treturn adaptedCategory;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tsetCategoryDetail(null);\r\n\t\t\t\treturn null;\r\n\t\t\t} catch (err) {\r\n\t\t\t\tconst errorMessage =\r\n\t\t\t\t\terr instanceof Error\r\n\t\t\t\t\t\t? err.message\r\n\t\t\t\t\t\t: \"Error al obtener categor√≠a por slug\";\r\n\t\t\t\tsetError(errorMessage);\r\n\t\t\t\tconsole.error(\"Error al obtener categor√≠a por slug:\", err);\r\n\t\t\t\tsetCategoryDetail(null);\r\n\t\t\t\treturn null;\r\n\t\t\t} finally {\r\n\t\t\t\tsetLoading(false);\r\n\t\t\t}\r\n\t\t},\r\n\t\t[adaptCategory]\r\n\t);\r\n\r\n\t/**\r\n\t * Limpiar cach√© de categor√≠as\r\n\t */\r\n\tconst clearCategoryCache = useCallback(() => {\r\n\t\t// Identificar y limpiar todas las claves de cach√© relacionadas con categor√≠as\r\n\t\tconst allKeys = Object.keys(localStorage);\r\n\t\tconst categoryKeys = allKeys.filter(\r\n\t\t\t(key) => key.startsWith(\"category_\") || key.startsWith(\"categories_\")\r\n\t\t);\r\n\r\n\t\tcategoryKeys.forEach((key) => {\r\n\t\t\tCacheService.removeItem(key);\r\n\t\t});\r\n\r\n\t\tconsole.log(\r\n\t\t\t`${categoryKeys.length} claves de cach√© de categor√≠as eliminadas`\r\n\t\t);\r\n\t}, []);\r\n\r\n\treturn {\r\n\t\tloading,\r\n\t\terror,\r\n\t\tcategories,\r\n\t\tmainCategories,\r\n\t\tfeaturedCategories,\r\n\t\tcategoryDetail,\r\n\t\tfetchCategories,\r\n\t\tfetchMainCategories,\r\n\t\tfetchFeaturedCategories,\r\n\t\tfetchSubcategories,\r\n\t\tfetchCategoryBySlug,\r\n\t\tclearCategoryCache,\r\n\t};\r\n};\r\n\r\nexport default useCategories;"],"names":["CategoryService","filterParams","response","ApiClient","API_ENDPOINTS","error","id","slug","withCounts","limit","parentId","categoryId","categoryService","useCategories","loading","setLoading","useState","setError","categories","setCategories","mainCategories","setMainCategories","featuredCategories","setFeaturedCategories","categoryDetail","setCategoryDetail","isInitialized","setIsInitialized","adaptCategory","useCallback","apiCategory","sub","useEffect","cachedCategories","CacheService","cachedMainCategories","cachedFeaturedCategories","fetchCategories","forceRefresh","cacheKey","cachedData","adaptedCategories","result","appConfig","err","errorMessage","fetchMainCategories","fetchFeaturedCategories","fetchSubcategories","fetchCategoryBySlug","adaptedCategory","clearCategoryCache","categoryKeys","key"],"mappings":"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"}