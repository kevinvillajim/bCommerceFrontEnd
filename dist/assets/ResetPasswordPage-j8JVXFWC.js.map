{"version":3,"file":"ResetPasswordPage-j8JVXFWC.js","sources":["../../src/presentation/pages/ResetPasswordPage.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useNavigate, useLocation, Link } from 'react-router-dom';\r\nimport axiosInstance from '../../infrastructure/api/axiosConfig';\r\nimport { API_ENDPOINTS } from '../../constants/apiEndpoints';\r\nimport { AuthService } from '../../core/services/AuthService';\r\n\r\n/**\r\n * Página de restablecimiento de contraseña\r\n * Se accede después de validar el token de recuperación o hacer clic en el enlace del correo\r\n */\r\nconst ResetPasswordPage: React.FC = () => {\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n  \r\n  // Obtener parámetros de la URL y el estado\r\n  const queryParams = new URLSearchParams(location.search);\r\n  const tokenFromQuery = queryParams.get('token');\r\n  const emailFromQuery = queryParams.get('email');\r\n  \r\n  // Obtener datos del estado de navegación (desde ForgotPasswordPage)\r\n  const tokenFromState = location.state?.token;\r\n  const emailFromState = location.state?.email;\r\n  \r\n  // Establecer los valores iniciales\r\n  const [token, setToken] = useState(tokenFromQuery || tokenFromState || '');\r\n  const [email, setEmail] = useState(emailFromQuery || emailFromState || '');\r\n  const [password, setPassword] = useState('');\r\n  const [confirmPassword, setConfirmPassword] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [success, setSuccess] = useState<string | null>(null);\r\n  const [passwordRules, setPasswordRules] = useState({\r\n    minLength: 8,\r\n    requireSpecial: true,\r\n    requireUppercase: true,\r\n    requireNumbers: true,\r\n    validationMessage: '',\r\n    requirements: [] as string[]\r\n  });\r\n  \r\n  // Cargar reglas de validación de contraseñas\r\n  useEffect(() => {\r\n    const authService = new AuthService();\r\n    authService.getPasswordValidationRules().then(rules => {\r\n      setPasswordRules(rules);\r\n    }).catch(err => {\r\n      console.error('Error loading password rules:', err);\r\n    });\r\n  }, []);\r\n\r\n  // Validar token al cargar la página\r\n  useEffect(() => {\r\n    const validateToken = async () => {\r\n      if (!token || !email) {\r\n        setError(!token \r\n          ? 'No se proporcionó un token válido para restablecer la contraseña'\r\n          : 'Es necesario proporcionar un correo electrónico para restablecer la contraseña'\r\n        );\r\n        return;\r\n      }\r\n\r\n      try {\r\n        const response = await axiosInstance.post(API_ENDPOINTS.AUTH.VALIDATE_RESET_TOKEN, {\r\n          token,\r\n          email\r\n        });\r\n\r\n        if (response.data?.status !== 'success' || !response.data?.valid) {\r\n          setError('El enlace de restablecimiento ha expirado o es inválido. Por favor, solicita un nuevo enlace.');\r\n        }\r\n      } catch (err: any) {\r\n        console.error('Error validating token:', err);\r\n        if (err.response?.data?.message) {\r\n          setError(err.response.data.message);\r\n        } else {\r\n          setError('El enlace de restablecimiento ha expirado o es inválido. Por favor, solicita un nuevo enlace.');\r\n        }\r\n      }\r\n    };\r\n\r\n    validateToken();\r\n  }, [token, email]);\r\n  \r\n  // Manejar el envío del formulario\r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    \r\n    // Validaciones dinámicas de contraseña\r\n    if (password.length < passwordRules.minLength) {\r\n      setError(`La contraseña debe tener al menos ${passwordRules.minLength} caracteres`);\r\n      return;\r\n    }\r\n\r\n    if (passwordRules.requireUppercase && !/[A-Z]/.test(password)) {\r\n      setError('La contraseña debe incluir al menos una letra mayúscula');\r\n      return; \r\n    }\r\n\r\n    if (passwordRules.requireNumbers && !/[0-9]/.test(password)) {\r\n      setError('La contraseña debe incluir al menos un número');\r\n      return;\r\n    }\r\n\r\n    if (passwordRules.requireSpecial && !/[!@#$%^&*]/.test(password)) {\r\n      setError('La contraseña debe incluir al menos un carácter especial (!@#$%^&*)');\r\n      return;\r\n    }\r\n    \r\n    if (password !== confirmPassword) {\r\n      setError('Las contraseñas no coinciden');\r\n      return;\r\n    }\r\n    \r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      // Enviar solicitud para restablecer la contraseña\r\n      const response = await axiosInstance.post(API_ENDPOINTS.AUTH.RESET_PASSWORD, {\r\n        token,\r\n        email,\r\n        password,\r\n        password_confirmation: confirmPassword\r\n      });\r\n      \r\n      // Verificar si la solicitud fue exitosa\r\n      if (response.data?.status === 'success') {\r\n        setSuccess('¡Contraseña cambiada exitosamente! Serás redirigido al login para iniciar sesión con tu nueva contraseña.');\r\n        \r\n        // Siempre redirigir al login para que el usuario inicie sesión con las nuevas credenciales\r\n        setTimeout(() => {\r\n          navigate('/login', { \r\n            state: { \r\n              message: 'Contraseña actualizada. Ahora puedes iniciar sesión con tu nueva contraseña.',\r\n              type: 'success' \r\n            } \r\n          });\r\n        }, 3000);\r\n      } else {\r\n        setError('No se pudo restablecer la contraseña. Inténtalo de nuevo.');\r\n      }\r\n    } catch (err: any) {\r\n      console.error('Error al restablecer la contraseña:', err);\r\n      \r\n      if (err.response?.status === 422) {\r\n        // Error de validación\r\n        const validationErrors = err.response.data?.errors;\r\n        if (validationErrors) {\r\n          // Si hay errores de validación, mostrar el primero\r\n          const firstError = Object.values(validationErrors)[0];\r\n          setError(Array.isArray(firstError) ? firstError[0] : firstError);\r\n        } else {\r\n          setError('Los datos proporcionados no son válidos');\r\n        }\r\n      } else if (err.response?.data?.message) {\r\n        setError(err.response.data.message);\r\n      } else {\r\n        setError('Error al procesar la solicitud. Inténtalo de nuevo más tarde.');\r\n      }\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n  \r\n  return (\r\n    <div className=\"min-h-[80vh] flex items-center justify-center py-12 px-4\">\r\n      <div className=\"max-w-md w-full space-y-8 bg-white p-8 rounded-lg shadow-lg\">\r\n        <div className=\"text-center\">\r\n          <h2 className=\"text-3xl font-extrabold text-gray-900\">\r\n            Crea tu nueva contraseña\r\n          </h2>\r\n          <p className=\"mt-2 text-sm text-gray-600\">\r\n            Por favor, ingresa y confirma tu nueva contraseña\r\n          </p>\r\n        </div>\r\n        \r\n        {/* Mostrar mensajes de error/éxito */}\r\n        {error && (\r\n          <div className=\"bg-red-50 text-red-700 p-3 rounded-md text-sm\">\r\n            {error}\r\n          </div>\r\n        )}\r\n        \r\n        {success && (\r\n          <div className=\"bg-green-50 text-green-700 p-3 rounded-md text-sm\">\r\n            {success}\r\n          </div>\r\n        )}\r\n        \r\n        {/* Formulario de restablecimiento de contraseña */}\r\n        <form className=\"mt-8 space-y-6\" onSubmit={handleSubmit}>\r\n          {/* Campo de email (si no está presente) */}\r\n          {!email && (\r\n            <div>\r\n              <label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-700\">\r\n                Correo electrónico\r\n              </label>\r\n              <input\r\n                id=\"email\"\r\n                name=\"email\"\r\n                type=\"email\"\r\n                autoComplete=\"email\"\r\n                required\r\n                className=\"mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-3 focus:outline-none focus:ring-primary-500 focus:border-primary-500\"\r\n                value={email}\r\n                onChange={(e) => setEmail(e.target.value)}\r\n                placeholder=\"tu@email.com\"\r\n              />\r\n            </div>\r\n          )}\r\n          \r\n          {/* Campo de token (si no está presente) */}\r\n          {!token && (\r\n            <div>\r\n              <label htmlFor=\"token\" className=\"block text-sm font-medium text-gray-700\">\r\n                Token de recuperación\r\n              </label>\r\n              <input\r\n                id=\"token\"\r\n                name=\"token\"\r\n                type=\"text\"\r\n                autoComplete=\"off\"\r\n                required\r\n                className=\"mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-3 focus:outline-none focus:ring-primary-500 focus:border-primary-500\"\r\n                value={token}\r\n                onChange={(e) => setToken(e.target.value)}\r\n                placeholder=\"Ingresa el token de recuperación\"\r\n              />\r\n            </div>\r\n          )}\r\n          \r\n          {/* Campo de nueva contraseña */}\r\n          <div>\r\n            <label htmlFor=\"password\" className=\"block text-sm font-medium text-gray-700\">\r\n              Nueva contraseña\r\n            </label>\r\n            <input\r\n              id=\"password\"\r\n              name=\"password\"\r\n              type=\"password\"\r\n              autoComplete=\"new-password\"\r\n              required\r\n              className=\"mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-3 focus:outline-none focus:ring-primary-500 focus:border-primary-500\"\r\n              value={password}\r\n              onChange={(e) => setPassword(e.target.value)}\r\n            />\r\n            <div className=\"mt-2 text-xs text-gray-600\">\r\n              <p className=\"font-medium mb-1\">La contraseña debe incluir:</p>\r\n              <ul className=\"list-disc list-inside space-y-1\">\r\n                <li className={password.length >= passwordRules.minLength ? 'text-green-600' : 'text-gray-500'}>\r\n                  Al menos {passwordRules.minLength} caracteres\r\n                </li>\r\n                {passwordRules.requireUppercase && (\r\n                  <li className={/[A-Z]/.test(password) ? 'text-green-600' : 'text-gray-500'}>\r\n                    Al menos una letra mayúscula\r\n                  </li>\r\n                )}\r\n                {passwordRules.requireNumbers && (\r\n                  <li className={/[0-9]/.test(password) ? 'text-green-600' : 'text-gray-500'}>\r\n                    Al menos un número\r\n                  </li>\r\n                )}\r\n                {passwordRules.requireSpecial && (\r\n                  <li className={/[!@#$%^&*]/.test(password) ? 'text-green-600' : 'text-gray-500'}>\r\n                    Al menos un carácter especial (!@#$%^&*)\r\n                  </li>\r\n                )}\r\n              </ul>\r\n            </div>\r\n          </div>\r\n          \r\n          {/* Campo de confirmación de contraseña */}\r\n          <div>\r\n            <label htmlFor=\"confirmPassword\" className=\"block text-sm font-medium text-gray-700\">\r\n              Confirmar contraseña\r\n            </label>\r\n            <input\r\n              id=\"confirmPassword\"\r\n              name=\"confirmPassword\"\r\n              type=\"password\"\r\n              autoComplete=\"new-password\"\r\n              required\r\n              className=\"mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-3 focus:outline-none focus:ring-primary-500 focus:border-primary-500\"\r\n              value={confirmPassword}\r\n              onChange={(e) => setConfirmPassword(e.target.value)}\r\n            />\r\n          </div>\r\n          \r\n          <div className=\"flex justify-between\">\r\n            <Link\r\n              to=\"/login\"\r\n              className=\"text-sm font-medium text-primary-600 hover:text-primary-500\"\r\n            >\r\n              Volver al inicio de sesión\r\n            </Link>\r\n            \r\n            <button\r\n              type=\"submit\"\r\n              disabled={loading || !token || !email}\r\n              className=\"inline-flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 disabled:opacity-50 disabled:cursor-not-allowed\"\r\n            >\r\n              {loading ? (\r\n                <span className=\"flex items-center\">\r\n                  <svg className=\"animate-spin -ml-1 mr-2 h-4 w-4 text-white\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\r\n                    <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\r\n                    <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\r\n                  </svg>\r\n                  Actualizando...\r\n                </span>\r\n              ) : 'Actualizar contraseña'}\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ResetPasswordPage;"],"names":["ResetPasswordPage","navigate","useNavigate","location","useLocation","queryParams","tokenFromQuery","emailFromQuery","tokenFromState","emailFromState","token","setToken","useState","email","setEmail","password","setPassword","confirmPassword","setConfirmPassword","loading","setLoading","error","setError","success","setSuccess","passwordRules","setPasswordRules","useEffect","AuthService","rules","err","response","axiosInstance","API_ENDPOINTS","handleSubmit","e","validationErrors","firstError","jsxs","jsx","Link"],"mappings":"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"}