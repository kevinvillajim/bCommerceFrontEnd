{"version":3,"file":"SellerOrderServiceAdapter-BBCqUj0a.js","sources":["../../src/core/adapters/SellerOrderServiceAdapter.ts"],"sourcesContent":["// src/core/adapters/SellerOrderServiceAdapter.ts\r\nimport ApiClient from \"../../infrastructure/api/apiClient\";\r\nimport { API_ENDPOINTS } from \"../../constants/apiEndpoints\";\r\nimport type {ServiceResponse} from \"../../presentation/types/admin/ProductFilterParams\";\r\nimport type {OrderStatus} from \"../domain/entities/Order\";\r\n\r\n// Definición de interfaces para los datos de la UI\r\nexport interface SellerOrderUI {\r\n\tid: string;\r\n\torderNumber: string;\r\n\tdate: string;\r\n\tcustomer: {\r\n\t\tid: number;\r\n\t\tname: string;\r\n\t\temail: string;\r\n\t};\r\n\ttotal: number;\r\n\titems: Array<{\r\n\t\tid: number;\r\n\t\tproduct_id: number;\r\n\t\tquantity: number;\r\n\t\tprice: number;\r\n\t\tsubtotal: number;\r\n\t\tname?: string;\r\n\t}>;\r\n\tstatus: OrderStatus; // ✅ CAMBIADO - Usar el tipo del dominio\r\n\tpaymentStatus: \"pending\" | \"completed\" | \"failed\" | \"rejected\";\r\n\tshippingAddress?: string;\r\n}\r\n\r\nexport interface SellerOrderStatUI {\r\n\tlabel: string;\r\n\tvalue: number | string;\r\n\tisCurrency?: boolean;\r\n\tcolor: string; // CORREGIDO: requerido, no opcional\r\n\ticon?: React.ReactNode;\r\n}\r\n\r\n// Definición de interfaces para filtros de búsqueda\r\nexport interface SellerOrderFilters {\r\n\tpage?: number;\r\n\tlimit?: number;\r\n\tstatus?: string;\r\n\tpaymentStatus?: string;\r\n\tsearch?: string;\r\n\tdateFrom?: string;\r\n\tdateTo?: string;\r\n}\r\n\r\n/**\r\n * Adaptador de servicio para gestionar órdenes del vendedor\r\n * Convierte los datos de la API a formato amigable para la UI\r\n */\r\nexport default class SellerOrderServiceAdapter {\r\n\t/**\r\n\t * Obtiene las órdenes del vendedor con filtros aplicados\r\n\t * @param filters Filtros para la búsqueda de órdenes\r\n\t * @returns Órdenes formateadas y datos de paginación\r\n\t */\r\n\tpublic async getSellerOrders(filters: SellerOrderFilters = {}) {\r\n\t\ttry {\r\n\t\t\tconsole.log(\r\n\t\t\t\t\"SellerOrderServiceAdapter: Obteniendo órdenes con filtros:\",\r\n\t\t\t\tfilters\r\n\t\t\t);\r\n\r\n\t\t\t// Formatear los parámetros para la API\r\n\t\t\tconst apiFilters: any = {\r\n\t\t\t\tlimit: filters.limit || 10,\r\n\t\t\t\tpage: filters.page || 1,\r\n\t\t\t};\r\n\r\n\t\t\t// Añadir filtros opcionales si están presentes\r\n\t\t\tif (filters.status && filters.status !== \"all\") {\r\n\t\t\t\tapiFilters.status = filters.status;\r\n\t\t\t}\r\n\r\n\t\t\tif (filters.paymentStatus && filters.paymentStatus !== \"all\") {\r\n\t\t\t\tapiFilters.payment_status = filters.paymentStatus;\r\n\t\t\t}\r\n\r\n\t\t\tif (filters.search) {\r\n\t\t\t\tapiFilters.search = filters.search;\r\n\t\t\t}\r\n\r\n\t\t\tif (filters.dateFrom) {\r\n\t\t\t\tapiFilters.date_from = filters.dateFrom;\r\n\t\t\t}\r\n\r\n\t\t\tif (filters.dateTo) {\r\n\t\t\t\tapiFilters.date_to = filters.dateTo;\r\n\t\t\t}\r\n\r\n\t\t\t// Llamar a la API usando la ruta específica para vendedores\r\n\t\t\tconst response = await ApiClient.get<any>(\r\n\t\t\t\tAPI_ENDPOINTS.ORDERS.SELLER_ORDERS,\r\n\t\t\t\tapiFilters\r\n\t\t\t);\r\n\r\n\t\t\tconsole.log(\"SellerOrderServiceAdapter: Respuesta de la API:\", response);\r\n\r\n\t\t\t// Verificar la estructura de la respuesta\r\n\t\t\tif (!response || response.success !== true) {\r\n\t\t\t\tthrow new Error(\"Respuesta de API inválida\");\r\n\t\t\t}\r\n\r\n\t\t\t// Mapear los datos a formato UI\r\n\t\t\tconst orders: SellerOrderUI[] = Array.isArray(response.data)\r\n\t\t\t\t? response.data.map((order: any) => this.mapOrderToUI(order))\r\n\t\t\t\t: [];\r\n\r\n\t\t\t// Extraer información de paginación o usar valores predeterminados\r\n\t\t\tconst pagination = response.pagination || {\r\n\t\t\t\tcurrentPage: 1,\r\n\t\t\t\ttotalPages: 1,\r\n\t\t\t\ttotalItems: orders.length,\r\n\t\t\t\titemsPerPage: 10,\r\n\t\t\t};\r\n\r\n\t\t\t// Convertir todos los valores numéricos que podrían venir como strings\r\n\t\t\tconst formattedPagination = {\r\n\t\t\t\tcurrentPage: Number(pagination.currentPage) || 1,\r\n\t\t\t\ttotalPages: Number(pagination.totalPages) || 1,\r\n\t\t\t\ttotalItems: Number(pagination.totalItems) || orders.length,\r\n\t\t\t\titemsPerPage: Number(pagination.itemsPerPage) || 10,\r\n\t\t\t};\r\n\r\n\t\t\treturn {\r\n\t\t\t\torders,\r\n\t\t\t\tpagination: formattedPagination,\r\n\t\t\t};\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\r\n\t\t\t\t\"SellerOrderServiceAdapter: Error al obtener órdenes:\",\r\n\t\t\t\terror\r\n\t\t\t);\r\n\r\n\t\t\t// Devolver un valor predeterminado en caso de error\r\n\t\t\treturn {\r\n\t\t\t\torders: [],\r\n\t\t\t\tpagination: {\r\n\t\t\t\t\tcurrentPage: 1,\r\n\t\t\t\t\ttotalPages: 1,\r\n\t\t\t\t\ttotalItems: 0,\r\n\t\t\t\t\titemsPerPage: 10,\r\n\t\t\t\t},\r\n\t\t\t};\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Convierte un objeto de orden del API al formato UI\r\n\t * @param order Objeto de orden del API\r\n\t * @returns Objeto de orden con formato para UI\r\n\t */\r\n\tprivate mapOrderToUI(order: any): SellerOrderUI {\r\n\t\t// Asegurar que el objeto order existe\r\n\t\tif (!order) {\r\n\t\t\tconsole.warn(\"SellerOrderServiceAdapter: Orden inválida recibida\");\r\n\t\t\treturn {\r\n\t\t\t\tid: \"0\",\r\n\t\t\t\torderNumber: \"N/A\",\r\n\t\t\t\tdate: new Date().toISOString(),\r\n\t\t\t\tcustomer: {\r\n\t\t\t\t\tid: 0,\r\n\t\t\t\t\tname: \"Cliente\",\r\n\t\t\t\t\temail: \"sin@email.com\",\r\n\t\t\t\t},\r\n\t\t\t\ttotal: 0,\r\n\t\t\t\titems: [],\r\n\t\t\t\tstatus: \"pending\",\r\n\t\t\t\tpaymentStatus: \"pending\",\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\t// Extraer datos del usuario\r\n\t\tconst userName = order.customer?.name || \"Cliente\";\r\n\t\tconst userEmail = order.customer?.email || \"sin@email.com\";\r\n\r\n\t\t// Asegurar que items sea un array\r\n\t\tconst items = Array.isArray(order.items) ? order.items : [];\r\n\r\n\t\treturn {\r\n\t\t\tid: String(order.id || 0),\r\n\t\t\torderNumber: order.orderNumber || `#${order.id || 0}`,\r\n\t\t\tdate: order.date || order.created_at || new Date().toISOString(),\r\n\t\t\tcustomer: {\r\n\t\t\t\tid: order.customer?.id || order.user_id || 0,\r\n\t\t\t\tname: userName,\r\n\t\t\t\temail: userEmail,\r\n\t\t\t},\r\n\t\t\ttotal:\r\n\t\t\t\ttypeof order.total === \"string\"\r\n\t\t\t\t\t? parseFloat(order.total)\r\n\t\t\t\t\t: order.total || 0,\r\n\t\t\titems: items,\r\n\t\t\tstatus: order.status || \"pending\",\r\n\t\t\tpaymentStatus: order.paymentStatus || order.payment_status || \"pending\",\r\n\t\t\tshippingAddress:\r\n\t\t\t\ttypeof order.shippingAddress === \"string\"\r\n\t\t\t\t\t? order.shippingAddress\r\n\t\t\t\t\t: JSON.stringify(order.shippingAddress || {}),\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Actualiza el estado de una orden\r\n\t * @param orderId ID de la orden\r\n\t * @param status Nuevo estado\r\n\t * @returns Éxito de la operación\r\n\t */\r\n\tpublic async updateOrderStatus(\r\n\t\torderId: string,\r\n\t\tstatus: OrderStatus // ✅ CAMBIADO - Usar OrderStatus del dominio\r\n\t): Promise<boolean> {\r\n\t\ttry {\r\n\t\t\tconsole.log(\r\n\t\t\t\t`SellerOrderServiceAdapter: Actualizando orden ${orderId} a estado ${status}`\r\n\t\t\t);\r\n\r\n\t\t\t// Usar PUT según la documentación de la API\r\n\t\t\tconst response = await ApiClient.put<ServiceResponse>(\r\n\t\t\t\tAPI_ENDPOINTS.ORDERS.UPDATE_STATUS(Number(orderId)),\r\n\t\t\t\t{\r\n\t\t\t\t\tstatus,\r\n\t\t\t\t}\r\n\t\t\t);\r\n\r\n\t\t\t// Verificar con campo 'success' en la respuesta\r\n\t\t\tif (!response || response.success !== true) {\r\n\t\t\t\tconsole.error(\r\n\t\t\t\t\t`Error al actualizar estado: Respuesta inválida`,\r\n\t\t\t\t\tresponse\r\n\t\t\t\t);\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tconsole.log(\r\n\t\t\t\t`Estado de orden actualizado correctamente:`,\r\n\t\t\t\tresponse.data || response.message\r\n\t\t\t);\r\n\r\n\t\t\treturn true;\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\r\n\t\t\t\t`SellerOrderServiceAdapter: Error al actualizar estado de orden ${orderId}:`,\r\n\t\t\t\terror\r\n\t\t\t);\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Obtiene estadísticas de pedidos del vendedor\r\n\t * @returns Estadísticas formateadas para la UI\r\n\t */\r\n\tpublic async getOrderStats(): Promise<SellerOrderStatUI[]> {\r\n\t\ttry {\r\n\t\t\tconsole.log(\r\n\t\t\t\t\"SellerOrderServiceAdapter: Obteniendo estadísticas de órdenes\"\r\n\t\t\t);\r\n\r\n\t\t\t// Llamar a la API usando la ruta específica para estadísticas de vendedor\r\n\t\t\tconst response = await ApiClient.get<any>(API_ENDPOINTS.ORDERS.STATS);\r\n\r\n\t\t\tconsole.log(\r\n\t\t\t\t\"SellerOrderServiceAdapter: Respuesta de estadísticas:\",\r\n\t\t\t\tresponse\r\n\t\t\t);\r\n\r\n\t\t\t// Verificar con campo 'success' en lugar de 'status'\r\n\t\t\tif (!response || response.success !== true) {\r\n\t\t\t\tthrow new Error(\"Respuesta de API inválida para estadísticas\");\r\n\t\t\t}\r\n\r\n\t\t\tconst data = response.data || {};\r\n\r\n\t\t\t// Mapear los datos a estadísticas para UI\r\n\t\t\tconst stats: SellerOrderStatUI[] = [\r\n\t\t\t\t{\r\n\t\t\t\t\tlabel: \"Total Pedidos\",\r\n\t\t\t\t\tvalue: Number(data.totalOrders) || 0,\r\n\t\t\t\t\tcolor: \"blue\",\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tlabel: \"Pendientes\",\r\n\t\t\t\t\tvalue: Number(data.pendingOrders) || 0,\r\n\t\t\t\t\tcolor: \"yellow\",\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tlabel: \"En Proceso\",\r\n\t\t\t\t\tvalue: Number(data.processingOrders) || 0,\r\n\t\t\t\t\tcolor: \"blue\",\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tlabel: \"Enviados\",\r\n\t\t\t\t\tvalue: Number(data.shippedOrders) || 0,\r\n\t\t\t\t\tcolor: \"indigo\",\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tlabel: \"Total Ventas\",\r\n\t\t\t\t\tvalue: Number(data.totalSales) || 0,\r\n\t\t\t\t\tisCurrency: true,\r\n\t\t\t\t\tcolor: \"green\",\r\n\t\t\t\t},\r\n\t\t\t];\r\n\r\n\t\t\treturn stats;\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\r\n\t\t\t\t\"SellerOrderServiceAdapter: Error al obtener estadísticas:\",\r\n\t\t\t\terror\r\n\t\t\t);\r\n\r\n\t\t\t// Devolver estadísticas básicas en caso de error\r\n\t\t\treturn [\r\n\t\t\t\t{\r\n\t\t\t\t\tlabel: \"Total Pedidos\",\r\n\t\t\t\t\tvalue: 0,\r\n\t\t\t\t\tcolor: \"blue\",\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tlabel: \"Pendientes\",\r\n\t\t\t\t\tvalue: 0,\r\n\t\t\t\t\tcolor: \"yellow\",\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tlabel: \"En Proceso\",\r\n\t\t\t\t\tvalue: 0,\r\n\t\t\t\t\tcolor: \"blue\",\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tlabel: \"Total Ventas\",\r\n\t\t\t\t\tvalue: 0,\r\n\t\t\t\t\tisCurrency: true,\r\n\t\t\t\t\tcolor: \"green\",\r\n\t\t\t\t},\r\n\t\t\t];\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * Obtiene los detalles de una orden específica como vendedor\r\n\t * @param orderId ID de la orden\r\n\t * @returns Detalles de la orden o lanza un error si no se puede obtener\r\n\t */\r\n\tasync getOrderDetails(orderId: string | number): Promise<any> {\r\n\t\ttry {\r\n\t\t\t// Convertir orderId a número si viene como string\r\n\t\t\tconst id = typeof orderId === \"string\" ? parseInt(orderId) : orderId;\r\n\r\n\t\t\tconsole.log(\r\n\t\t\t\t`SellerOrderServiceAdapter: Obteniendo detalle de orden ${id} como vendedor`\r\n\t\t\t);\r\n\r\n\t\t\t// Importante: Usar el endpoint específico para vendedores según la documentación\r\n\t\t\tconst response = await ApiClient.get<any>(\r\n\t\t\t\tAPI_ENDPOINTS.ORDERS.SELLER_ORDER_DETAILS(id)\r\n\t\t\t);\r\n\r\n\t\t\tconsole.log(\r\n\t\t\t\t`SellerOrderServiceAdapter: Respuesta para orden ${id}:`,\r\n\t\t\t\tresponse\r\n\t\t\t);\r\n\r\n\t\t\t// Verificar si hay datos en la respuesta\r\n\t\t\tif (!response || !response.data) {\r\n\t\t\t\tthrow new Error(\"Respuesta vacía al obtener detalle de orden\");\r\n\t\t\t}\r\n\r\n\t\t\t// Si la respuesta viene con el total de precio incorrecto, corregirlo aquí\r\n\t\t\tlet orderData = response.data;\r\n\r\n\t\t\t// Verificar si necesitamos procesar o transformar datos\r\n\t\t\tif (orderData.items && Array.isArray(orderData.items)) {\r\n\t\t\t\t// Calcular el subtotal\r\n\t\t\t\tconst subtotal = orderData.items.reduce(\r\n\t\t\t\t\t(sum: number, item: any) => sum + item.price * item.quantity,\r\n\t\t\t\t\t0\r\n\t\t\t\t);\r\n\r\n\t\t\t\t// Calcular el IVA (15%)\r\n\t\t\t\tconst taxRate = 0.15;\r\n\t\t\t\tconst taxAmount = subtotal * taxRate;\r\n\r\n\t\t\t\t// Calcular el total correcto (subtotal + IVA)\r\n\t\t\t\tconst correctTotal = subtotal + taxAmount;\r\n\r\n\t\t\t\t// Si el total en la respuesta es incorrecto, actualizarlo\r\n\t\t\t\tif (Math.abs(orderData.total - correctTotal) > 0.01) {\r\n\t\t\t\t\torderData.total = correctTotal;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Crear un objeto con estructura adecuada manteniendo la compatibilidad\r\n\t\t\tconst orderDetail = {\r\n\t\t\t\t...orderData,\r\n\r\n\t\t\t\t// Adaptaciones necesarias:\r\n\t\t\t\tuserId: orderData.user_id,\r\n\t\t\t\tsellerId: orderData.seller_id,\r\n\t\t\t\tpaymentId: orderData.payment_id,\r\n\t\t\t\tpaymentMethod: orderData.payment_method,\r\n\t\t\t\tpaymentStatus: orderData.payment_status,\r\n\t\t\t\tcreatedAt: orderData.created_at,\r\n\t\t\t\tupdatedAt: orderData.updated_at,\r\n\t\t\t\torderNumber: orderData.order_number,\r\n\t\t\t\tshippingData: orderData.shipping_data,\r\n\r\n\t\t\t\t// Procesar items con el formato esperado\r\n\t\t\t\titems:\r\n\t\t\t\t\torderData.items?.map((item: any) => ({\r\n\t\t\t\t\t\t...item,\r\n\t\t\t\t\t\tproductId: item.product_id,\r\n\t\t\t\t\t\tproduct: item.product || {\r\n\t\t\t\t\t\t\tid: item.product_id,\r\n\t\t\t\t\t\t\tname: item.product_name,\r\n\t\t\t\t\t\t\timage: item.product_image,\r\n\t\t\t\t\t\t\tsku: item.product_sku,\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t})) || [],\r\n\t\t\t};\r\n\r\n\t\t\tconsole.log(\"Orden adaptada para UI de vendedor:\", orderDetail);\r\n\r\n\t\t\treturn orderDetail;\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\r\n\t\t\t\t`SellerOrderServiceAdapter: Error al obtener detalle de orden ${orderId}:`,\r\n\t\t\t\terror\r\n\t\t\t);\r\n\t\t\tthrow error;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Completa una orden específica\r\n\t * @param orderId ID de la orden\r\n\t * @returns true si la operación tuvo éxito, false en caso contrario\r\n\t */\r\n\tasync completeOrder(orderId: string | number): Promise<boolean> {\r\n\t\ttry {\r\n\t\t\t// Convertir orderId a número si viene como string\r\n\t\t\tconst id = typeof orderId === \"string\" ? parseInt(orderId) : orderId;\r\n\r\n\t\t\tconsole.log(`SellerOrderServiceAdapter: Completando orden ${id}`);\r\n\r\n\t\t\t// Llamar al endpoint según la documentación\r\n\t\t\tconst response = await ApiClient.post<any>(\r\n\t\t\t\tAPI_ENDPOINTS.ORDERS.COMPLETE(id)\r\n\t\t\t);\r\n\r\n\t\t\tconsole.log(`Respuesta al completar orden ${id}:`, response);\r\n\r\n\t\t\t// Verificar respuesta con el campo 'success'\r\n\t\t\treturn response && response.success === true;\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\r\n\t\t\t\t`SellerOrderServiceAdapter: Error al completar orden ${orderId}:`,\r\n\t\t\t\terror\r\n\t\t\t);\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Actualiza la información de envío de una orden\r\n\t * @param orderId ID de la orden\r\n\t * @param shippingInfo Información de envío\r\n\t * @returns true si la operación tuvo éxito, false en caso contrario\r\n\t */\r\n\tasync updateShippingInfo(\r\n\t\torderId: string | number,\r\n\t\tshippingInfo: {\r\n\t\t\ttracking_number?: string;\r\n\t\t\tshipping_company?: string;\r\n\t\t\testimated_delivery?: string;\r\n\t\t\tnotes?: string;\r\n\t\t}\r\n\t): Promise<boolean> {\r\n\t\ttry {\r\n\t\t\t// Convertir orderId a número si viene como string\r\n\t\t\tconst id = typeof orderId === \"string\" ? parseInt(orderId) : orderId;\r\n\r\n\t\t\tconsole.log(\r\n\t\t\t\t`SellerOrderServiceAdapter: Actualizando información de envío para orden ${id}`\r\n\t\t\t);\r\n\r\n\t\t\t// Llamar al endpoint según la documentación\r\n\t\t\tconst response = await ApiClient.patch<any>(\r\n\t\t\t\tAPI_ENDPOINTS.ORDERS.UPDATE_SHIPPING(id),\r\n\t\t\t\tshippingInfo\r\n\t\t\t);\r\n\r\n\t\t\tconsole.log(`Respuesta al actualizar información de envío:`, response);\r\n\r\n\t\t\t// Verificar respuesta con el campo 'success'\r\n\t\t\treturn response && response.success === true;\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\r\n\t\t\t\t`SellerOrderServiceAdapter: Error al actualizar información de envío para orden ${orderId}:`,\r\n\t\t\t\terror\r\n\t\t\t);\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n}\r\n"],"names":["SellerOrderServiceAdapter","filters","apiFilters","response","ApiClient","API_ENDPOINTS","orders","order","pagination","formattedPagination","error","userName","userEmail","items","orderId","status","data","id","orderData","subtotal","sum","item","taxAmount","correctTotal","orderDetail","shippingInfo"],"mappings":"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"}