{"version":3,"file":"ShippingServiceAdapter-DX6ZR1a2.js","sources":["../../src/core/adapters/ShippingServiceAdapter.ts"],"sourcesContent":["// src/core/adapters/ShippingServiceAdapter.ts\r\nimport ApiClient from \"../../infrastructure/api/apiClient\";\r\nimport {API_ENDPOINTS} from \"../../constants/apiEndpoints\";\r\nimport type {ShippingFormData} from \"../../presentation/components/shipping/ShippingFormModal\";\r\n\r\n// Definición de interfaces para los datos de envío\r\nexport interface ShippingItem {\r\n\tid: string;\r\n\torderId: string;\r\n\torderNumber: string;\r\n\tdate: string;\r\n\tcustomer: {\r\n\t\tid: number;\r\n\t\tname: string;\r\n\t\temail: string;\r\n\t\tphone?: string;\r\n\t};\r\n\ttrackingNumber?: string;\r\n\tstatus:\r\n\t\t| \"pending\"\r\n\t\t| \"ready_to_ship\"\r\n\t\t| \"in_transit\"\r\n\t\t| \"shipped\" // Añadido para coincidir con la DB\r\n\t\t| \"delivered\"\r\n\t\t| \"failed\"\r\n\t\t| \"returned\";\r\n\tcarrier?: string;\r\n\testimatedDelivery?: string;\r\n\tshippingAddress: string;\r\n\tshippingMethod?: string;\r\n\tweight?: number;\r\n\tshippingCost?: number;\r\n\tlastUpdate?: string;\r\n\thistory?: ShippingHistoryItem[];\r\n}\r\n\r\nexport interface ShippingHistoryItem {\r\n\tdate: string;\r\n\tstatus: string;\r\n\tlocation?: string;\r\n\tdescription: string;\r\n}\r\n\r\nexport interface ShippingRouteItem {\r\n\tdate: string;\r\n\tlocation: string;\r\n\tcoordinates?: {\r\n\t\tlat: number;\r\n\t\tlng: number;\r\n\t};\r\n\tstatus: string;\r\n}\r\n\r\n// Adaptador de servicio para gestionar operaciones de envío\r\nexport default class ShippingServiceAdapter {\r\n\t/**\r\n\t * Obtiene la lista de envíos del vendedor\r\n\t * @param filters Filtros opcionales para la búsqueda\r\n\t * @returns Lista de envíos y metadatos de paginación\r\n\t */\r\n\tasync getShippingsList(filters?: {\r\n\t\tstatus?: string;\r\n\t\tcarrier?: string;\r\n\t\tdateFrom?: string;\r\n\t\tdateTo?: string;\r\n\t\tsearch?: string;\r\n\t\tpage?: number;\r\n\t\tlimit?: number;\r\n\t}): Promise<{\r\n\t\titems: ShippingItem[];\r\n\t\tpagination: {\r\n\t\t\tcurrentPage: number;\r\n\t\t\ttotalPages: number;\r\n\t\t\ttotalItems: number;\r\n\t\t\titemsPerPage: number;\r\n\t\t};\r\n\t}> {\r\n\t\ttry {\r\n\t\t\tconsole.log(\r\n\t\t\t\t\"ShippingServiceAdapter: Obteniendo lista de envíos con filtros:\",\r\n\t\t\t\tfilters\r\n\t\t\t);\r\n\r\n\t\t\t// *** CAMBIO PRINCIPAL: Usamos el endpoint de órdenes general en lugar del específico de awaiting-shipment\r\n\t\t\tconst response = await ApiClient.get<any>(\r\n\t\t\t\tAPI_ENDPOINTS.ORDERS.SELLER_ORDERS,\r\n\t\t\t\tfilters\r\n\t\t\t);\r\n\r\n\t\t\tconsole.log(\"ShippingServiceAdapter: Respuesta de API:\", response);\r\n\r\n\t\t\t// Verificar la estructura de la respuesta\r\n\t\t\tif (!response || !response.data) {\r\n\t\t\t\tthrow new Error(\"Respuesta de API inválida\");\r\n\t\t\t}\r\n\r\n\t\t\t// Mapear los datos a formato ShippingItem\r\n\t\t\tconst shippingItems: ShippingItem[] = Array.isArray(response.data)\r\n\t\t\t\t? response.data.map((item: any) => this.mapOrderToShippingItem(item))\r\n\t\t\t\t: [];\r\n\r\n\t\t\t// Extraer metadatos de paginación\r\n\t\t\tconst pagination = response.pagination || {\r\n\t\t\t\tcurrentPage: 1,\r\n\t\t\t\ttotalPages: 1,\r\n\t\t\t\ttotalItems: shippingItems.length,\r\n\t\t\t\titemsPerPage: 10,\r\n\t\t\t};\r\n\r\n\t\t\treturn {\r\n\t\t\t\titems: shippingItems,\r\n\t\t\t\tpagination: {\r\n\t\t\t\t\tcurrentPage: Number(pagination.currentPage) || 1,\r\n\t\t\t\t\ttotalPages: Number(pagination.totalPages) || 1,\r\n\t\t\t\t\ttotalItems: Number(pagination.totalItems) || shippingItems.length,\r\n\t\t\t\t\titemsPerPage: Number(pagination.itemsPerPage) || 10,\r\n\t\t\t\t},\r\n\t\t\t};\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\r\n\t\t\t\t\"ShippingServiceAdapter: Error al obtener lista de envíos:\",\r\n\t\t\t\terror\r\n\t\t\t);\r\n\t\t\t// En caso de error, devolver una lista vacía\r\n\t\t\treturn {\r\n\t\t\t\titems: [],\r\n\t\t\t\tpagination: {\r\n\t\t\t\t\tcurrentPage: 1,\r\n\t\t\t\t\ttotalPages: 1,\r\n\t\t\t\t\ttotalItems: 0,\r\n\t\t\t\t\titemsPerPage: 10,\r\n\t\t\t\t},\r\n\t\t\t};\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Obtiene los detalles de un envío específico\r\n\t * @param id ID del envío o de la orden\r\n\t * @returns Detalles completos del envío\r\n\t */\r\n\tasync getShippingDetails(id: string): Promise<ShippingItem | null> {\r\n\t\ttry {\r\n\t\t\tconsole.log(\r\n\t\t\t\t`ShippingServiceAdapter: Obteniendo detalles del envío ${id}`\r\n\t\t\t);\r\n\r\n\t\t\t// Obtener detalles de la orden, que incluye información de envío\r\n\t\t\tconst response = await ApiClient.get<any>(\r\n\t\t\t\tAPI_ENDPOINTS.ORDERS.DETAILS(Number(id))\r\n\t\t\t);\r\n\r\n\t\t\tconsole.log(\r\n\t\t\t\t`ShippingServiceAdapter: Respuesta para envío ${id}:`,\r\n\t\t\t\tresponse\r\n\t\t\t);\r\n\r\n\t\t\tif (!response || !response.data) {\r\n\t\t\t\tthrow new Error(\"Respuesta de API inválida\");\r\n\t\t\t}\r\n\r\n\t\t\t// Mapear los datos de la orden a un objeto ShippingItem\r\n\t\t\tconst shippingItem = this.mapOrderToShippingItem(response.data);\r\n\r\n\t\t\t// Si tiene número de seguimiento, obtener también el historial\r\n\t\t\tif (shippingItem.trackingNumber) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tconst history = await this.getShippingHistory(\r\n\t\t\t\t\t\tshippingItem.trackingNumber\r\n\t\t\t\t\t);\r\n\t\t\t\t\tshippingItem.history = history;\r\n\t\t\t\t} catch (historyError) {\r\n\t\t\t\t\tconsole.warn(\"No se pudo obtener historial de envío:\", historyError);\r\n\t\t\t\t\t// No establecemos error para no interrumpir la visualización de los detalles\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn shippingItem;\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\r\n\t\t\t\t`ShippingServiceAdapter: Error al obtener detalles del envío ${id}:`,\r\n\t\t\t\terror\r\n\t\t\t);\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Obtiene el historial de un envío por su número de seguimiento\r\n\t * @param trackingNumber Número de seguimiento\r\n\t * @returns Lista de eventos en el historial\r\n\t */\r\n\tasync getShippingHistory(\r\n\t\ttrackingNumber: string\r\n\t): Promise<ShippingHistoryItem[]> {\r\n\t\ttry {\r\n\t\t\tconsole.log(\r\n\t\t\t\t`ShippingServiceAdapter: Obteniendo historial para ${trackingNumber}`\r\n\t\t\t);\r\n\r\n\t\t\tconst response = await ApiClient.get<any>(\r\n\t\t\t\tAPI_ENDPOINTS.SHIPPING.HISTORY(trackingNumber)\r\n\t\t\t);\r\n\r\n\t\t\tconsole.log(\r\n\t\t\t\t`ShippingServiceAdapter: Historial para ${trackingNumber}:`,\r\n\t\t\t\tresponse\r\n\t\t\t);\r\n\r\n\t\t\tif (!response || !response.data) {\r\n\t\t\t\treturn [];\r\n\t\t\t}\r\n\r\n\t\t\t// Mapear el historial al formato esperado\r\n\t\t\treturn Array.isArray(response.data)\r\n\t\t\t\t? response.data.map((item: any) => ({\r\n\t\t\t\t\t\tdate: item.date || item.timestamp || new Date().toISOString(),\r\n\t\t\t\t\t\tstatus: item.status || \"unknown\",\r\n\t\t\t\t\t\tlocation: item.location || undefined,\r\n\t\t\t\t\t\tdescription: item.description || item.message || \"Sin descripción\",\r\n\t\t\t\t\t}))\r\n\t\t\t\t: [];\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\r\n\t\t\t\t`ShippingServiceAdapter: Error al obtener historial de ${trackingNumber}:`,\r\n\t\t\t\terror\r\n\t\t\t);\r\n\t\t\treturn [];\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Obtiene la ruta de un envío por su número de seguimiento\r\n\t * @param trackingNumber Número de seguimiento\r\n\t * @returns Lista de puntos en la ruta con coordenadas\r\n\t */\r\n\tasync getShippingRoute(trackingNumber: string): Promise<ShippingRouteItem[]> {\r\n\t\ttry {\r\n\t\t\tconsole.log(\r\n\t\t\t\t`ShippingServiceAdapter: Obteniendo ruta para ${trackingNumber}`\r\n\t\t\t);\r\n\r\n\t\t\tconst response = await ApiClient.get<any>(\r\n\t\t\t\tAPI_ENDPOINTS.SHIPPING.ROUTE(trackingNumber)\r\n\t\t\t);\r\n\r\n\t\t\tconsole.log(\r\n\t\t\t\t`ShippingServiceAdapter: Ruta para ${trackingNumber}:`,\r\n\t\t\t\tresponse\r\n\t\t\t);\r\n\r\n\t\t\tif (!response || !response.data) {\r\n\t\t\t\treturn [];\r\n\t\t\t}\r\n\r\n\t\t\t// Mapear los datos de ruta al formato esperado\r\n\t\t\treturn Array.isArray(response.data)\r\n\t\t\t\t? response.data.map((item: any) => ({\r\n\t\t\t\t\t\tdate: item.date || item.timestamp || new Date().toISOString(),\r\n\t\t\t\t\t\tlocation: item.location || \"Desconocido\",\r\n\t\t\t\t\t\tcoordinates: item.coordinates || undefined,\r\n\t\t\t\t\t\tstatus: item.status || \"unknown\",\r\n\t\t\t\t\t}))\r\n\t\t\t\t: [];\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\r\n\t\t\t\t`ShippingServiceAdapter: Error al obtener ruta de ${trackingNumber}:`,\r\n\t\t\t\terror\r\n\t\t\t);\r\n\t\t\treturn [];\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Asigna un número de seguimiento a una orden\r\n\t * @param orderId ID de la orden\r\n\t * @param trackingData Datos de seguimiento (número, transportista)\r\n\t * @returns true si se asignó correctamente\r\n\t */\r\n\tasync assignTrackingNumber(\r\n\t\torderId: string,\r\n\t\ttrackingData: {\r\n\t\t\ttracking_number: string;\r\n\t\t\tshipping_company?: string;\r\n\t\t\testimated_delivery?: string;\r\n\t\t\tnotes?: string;\r\n\t\t}\r\n\t): Promise<boolean> {\r\n\t\ttry {\r\n\t\t\tconsole.log(\r\n\t\t\t\t`ShippingServiceAdapter: Asignando tracking a orden ${orderId}:`,\r\n\t\t\t\ttrackingData\r\n\t\t\t);\r\n\r\n\t\t\t// Asignar el número de seguimiento es una actualización de la información de envío\r\n\t\t\t// Enviamos la información de tracking dentro del objeto shipping_data\r\n\t\t\tconst shippingDataUpdate = {\r\n\t\t\t\ttracking_number: trackingData.tracking_number,\r\n\t\t\t\tshipping_company: trackingData.shipping_company,\r\n\t\t\t\testimated_delivery: trackingData.estimated_delivery,\r\n\t\t\t\tnotes: trackingData.notes,\r\n\t\t\t};\r\n\r\n\t\t\tconst response = await ApiClient.patch<any>(\r\n\t\t\t\tAPI_ENDPOINTS.ORDERS.UPDATE_SHIPPING(Number(orderId)),\r\n\t\t\t\tshippingDataUpdate\r\n\t\t\t);\r\n\r\n\t\t\tconsole.log(\r\n\t\t\t\t`ShippingServiceAdapter: Respuesta al asignar tracking:`,\r\n\t\t\t\tresponse\r\n\t\t\t);\r\n\r\n\t\t\t// Verificar el éxito de la operación\r\n\t\t\treturn (\r\n\t\t\t\tresponse && (response.success === true || response.status === \"success\")\r\n\t\t\t);\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\r\n\t\t\t\t`ShippingServiceAdapter: Error al asignar tracking a orden ${orderId}:`,\r\n\t\t\t\terror\r\n\t\t\t);\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Actualiza el estado de un envío\r\n\t * @param orderId ID de la orden\r\n\t * @param status Nuevo estado\r\n\t * @returns true si se actualizó correctamente\r\n\t */\r\n\tasync updateShippingStatus(\r\n\t\torderId: string,\r\n\t\tstatus: ShippingItem[\"status\"]\r\n\t): Promise<boolean> {\r\n\t\ttry {\r\n\t\t\tconsole.log(\r\n\t\t\t\t`ShippingServiceAdapter: Actualizando estado de envío ${orderId} a ${status}`\r\n\t\t\t);\r\n\r\n\t\t\t// Mapear el estado de envío al estado correspondiente de la orden\r\n\t\t\tconst orderStatus = this.mapShippingStatusToOrderStatus(status);\r\n\r\n\t\t\t// Actualizar el estado de la orden\r\n\t\t\tconst response = await ApiClient.put<any>(\r\n\t\t\t\tAPI_ENDPOINTS.ORDERS.UPDATE_STATUS(Number(orderId)),\r\n\t\t\t\t{\r\n\t\t\t\t\tstatus: orderStatus,\r\n\t\t\t\t}\r\n\t\t\t);\r\n\r\n\t\t\tconsole.log(\r\n\t\t\t\t`ShippingServiceAdapter: Respuesta de actualización:`,\r\n\t\t\t\tresponse\r\n\t\t\t);\r\n\r\n\t\t\t// Verificar el éxito de la operación\r\n\t\t\treturn (\r\n\t\t\t\tresponse && (response.success === true || response.status === \"success\")\r\n\t\t\t);\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\r\n\t\t\t\t`ShippingServiceAdapter: Error al actualizar estado de envío ${orderId}:`,\r\n\t\t\t\terror\r\n\t\t\t);\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Marca una orden como enviada y actualiza la información de envío\r\n\t * @param orderId ID de la orden\r\n\t * @param shippingData Datos de envío (tracking, transportista, etc.)\r\n\t * @returns true si se actualizó correctamente\r\n\t */\r\n\tasync markAsShipped(\r\n\t\torderId: string,\r\n\t\tshippingData: ShippingFormData\r\n\t): Promise<boolean> {\r\n\t\ttry {\r\n\t\t\tconsole.log(\r\n\t\t\t\t`ShippingServiceAdapter: Marcando orden ${orderId} como enviada:`,\r\n\t\t\t\tshippingData\r\n\t\t\t);\r\n\r\n\t\t\t// Enviar los datos directamente sin encapsularlos en shipping_data\r\n\t\t\tconst shippingDataUpdate = {\r\n\t\t\t\ttracking_number: shippingData.tracking_number,\r\n\t\t\t\tshipping_company: shippingData.shipping_company,\r\n\t\t\t\testimated_delivery: shippingData.estimated_delivery,\r\n\t\t\t\tnotes: shippingData.notes,\r\n\t\t\t};\r\n\r\n\t\t\t// Actualizamos la información de envío\r\n\t\t\tconst shippingResponse = await ApiClient.patch<any>(\r\n\t\t\t\tAPI_ENDPOINTS.ORDERS.UPDATE_SHIPPING(Number(orderId)),\r\n\t\t\t\tshippingDataUpdate\r\n\t\t\t);\r\n\r\n\t\t\tconsole.log(\r\n\t\t\t\t`ShippingServiceAdapter: Respuesta al actualizar envío:`,\r\n\t\t\t\tshippingResponse\r\n\t\t\t);\r\n\r\n\t\t\tif (\r\n\t\t\t\t!shippingResponse ||\r\n\t\t\t\t(shippingResponse.success !== true &&\r\n\t\t\t\t\tshippingResponse.status !== \"success\")\r\n\t\t\t) {\r\n\t\t\t\tthrow new Error(\"Error al actualizar información de envío\");\r\n\t\t\t}\r\n\r\n\t\t\t// Después actualizamos el estado de la orden a \"shipped\"\r\n\t\t\tconst statusResponse = await ApiClient.put<any>(\r\n\t\t\t\tAPI_ENDPOINTS.ORDERS.UPDATE_STATUS(Number(orderId)),\r\n\t\t\t\t{\r\n\t\t\t\t\tstatus: \"shipped\",\r\n\t\t\t\t}\r\n\t\t\t);\r\n\r\n\t\t\tconsole.log(\r\n\t\t\t\t`ShippingServiceAdapter: Respuesta al actualizar estado:`,\r\n\t\t\t\tstatusResponse\r\n\t\t\t);\r\n\r\n\t\t\t// Verificar el éxito de la operación\r\n\t\t\treturn (\r\n\t\t\t\tstatusResponse &&\r\n\t\t\t\t(statusResponse.success === true || statusResponse.status === \"success\")\r\n\t\t\t);\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\r\n\t\t\t\t`ShippingServiceAdapter: Error al marcar orden ${orderId} como enviada:`,\r\n\t\t\t\terror\r\n\t\t\t);\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Mapea un objeto de orden a un objeto de envío\r\n\t * @param order Datos de la orden\r\n\t * @returns Objeto ShippingItem\r\n\t */\r\n\tprivate mapOrderToShippingItem(order: any): ShippingItem {\r\n\t\t// Extraer la dirección de envío solo desde shipping_data\r\n\t\tlet shippingAddress = \"\";\r\n\t\tif (order.shipping_data || order.shippingData) {\r\n\t\t\t// Acceder al objeto shipping_data (ambas formas para compatibilidad)\r\n\t\t\tconst shippingData = order.shipping_data || order.shippingData;\r\n\r\n\t\t\t// Extraer los campos de dirección del objeto\r\n\t\t\tconst parts = [\r\n\t\t\t\tshippingData.address,\r\n\t\t\t\tshippingData.city,\r\n\t\t\t\tshippingData.state,\r\n\t\t\t\tshippingData.country,\r\n\t\t\t\tshippingData.postal_code || shippingData.postalCode,\r\n\t\t\t].filter(Boolean);\r\n\r\n\t\t\tshippingAddress = parts.join(\", \");\r\n\t\t} else if (typeof order.shippingAddress === \"string\") {\r\n\t\t\t// Fallback por si viene como string completo\r\n\t\t\tshippingAddress = order.shippingAddress;\r\n\t\t}\r\n\r\n\t\t// Determinar el estado del envío\r\n\t\tlet shippingStatus: ShippingItem[\"status\"] = \"pending\";\r\n\t\tconst shippingData = order.shipping_data || order.shippingData;\r\n\r\n\t\t// Buscar primero en shipping.status si existe\r\n\t\tif (order.shipping && order.shipping.status) {\r\n\t\t\tshippingStatus = order.shipping.status;\r\n\t\t}\r\n\t\t// De lo contrario, inferir por el estado de la orden\r\n\t\telse if (order.status === \"shipped\" || order.status === \"in_transit\") {\r\n\t\t\tshippingStatus = \"shipped\"; // Ajustado para coincidir con la DB\r\n\t\t} else if (order.status === \"delivered\") {\r\n\t\t\tshippingStatus = \"delivered\";\r\n\t\t} else if (order.status === \"cancelled\") {\r\n\t\t\tshippingStatus = \"failed\";\r\n\t\t} else if (order.status === \"completed\") {\r\n\t\t\tshippingStatus = \"delivered\";\r\n\t\t} else if (order.status === \"pending\") {\r\n\t\t\tshippingStatus = \"pending\";\r\n\t\t} else if (order.status === \"processing\") {\r\n\t\t\t// Si tiene número de seguimiento, está listo para enviar; si no, sigue pendiente\r\n\t\t\tshippingStatus = shippingData?.tracking_number\r\n\t\t\t\t? \"ready_to_ship\"\r\n\t\t\t\t: \"pending\";\r\n\t\t}\r\n\r\n\t\t// Extraer datos del cliente\r\n\t\tconst customerName =\r\n\t\t\torder.user_name || (order.customer ? order.customer.name : \"Cliente\");\r\n\t\tconst customerEmail =\r\n\t\t\torder.user_email ||\r\n\t\t\t(order.customer ? order.customer.email : \"email@example.com\");\r\n\t\tconst customerId =\r\n\t\t\torder.userId || order.user_id || (order.customer ? order.customer.id : 0);\r\n\r\n\t\t// Datos del transportista y tracking desde shipping_data o shipping\r\n\t\tconst trackingNumber =\r\n\t\t\tshippingData?.tracking_number ||\r\n\t\t\torder.trackingNumber ||\r\n\t\t\t(order.shipping ? order.shipping.tracking_number : undefined);\r\n\r\n\t\tconst carrier =\r\n\t\t\tshippingData?.shipping_company ||\r\n\t\t\torder.carrier ||\r\n\t\t\t(order.shipping ? order.shipping.carrier_name : undefined);\r\n\r\n\t\tconst estimatedDelivery =\r\n\t\t\tshippingData?.estimated_delivery ||\r\n\t\t\torder.estimatedDelivery ||\r\n\t\t\t(order.shipping ? order.shipping.estimated_delivery : undefined);\r\n\r\n\t\t// Número de teléfono desde shipping_data\r\n\t\tconst phone = shippingData?.phone;\r\n\r\n\t\t// Información de ubicación actual, extraída de shipping si existe\r\n\t\tconst currentLocation = order.shipping?.current_location\r\n\t\t\t? typeof order.shipping.current_location === \"string\"\r\n\t\t\t\t? order.shipping.current_location\r\n\t\t\t\t: JSON.stringify(order.shipping.current_location)\r\n\t\t\t: undefined;\r\n\r\n\t\treturn {\r\n\t\t\tid: String(order.id || 0),\r\n\t\t\torderId: String(order.id || 0),\r\n\t\t\torderNumber:\r\n\t\t\t\torder.orderNumber || order.order_number || `ORD-${order.id || 0}`,\r\n\t\t\tdate:\r\n\t\t\t\torder.createdAt ||\r\n\t\t\t\torder.created_at ||\r\n\t\t\t\torder.date ||\r\n\t\t\t\tnew Date().toISOString(),\r\n\t\t\tcustomer: {\r\n\t\t\t\tid: customerId,\r\n\t\t\t\tname: customerName,\r\n\t\t\t\temail: customerEmail,\r\n\t\t\t\tphone: phone, // Añadimos teléfono a los datos del cliente\r\n\t\t\t},\r\n\t\t\ttrackingNumber: trackingNumber,\r\n\t\t\tstatus: shippingStatus,\r\n\t\t\tcarrier: carrier,\r\n\t\t\testimatedDelivery: estimatedDelivery,\r\n\t\t\tshippingAddress: shippingAddress,\r\n\t\t\tshippingMethod: order.shippingMethod || \"Estándar\",\r\n\t\t\tlastUpdate: order.updatedAt || order.updated_at || order.lastUpdate,\r\n\t\t\t// Mapear el historial si existe\r\n\t\t\thistory: Array.isArray(order.history)\r\n\t\t\t\t? order.history.map((item: any) => ({\r\n\t\t\t\t\t\tdate: item.date || new Date().toISOString(),\r\n\t\t\t\t\t\tstatus: item.status,\r\n\t\t\t\t\t\tlocation: item.location || currentLocation,\r\n\t\t\t\t\t\tdescription: item.description,\r\n\t\t\t\t\t}))\r\n\t\t\t\t: undefined,\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Mapea un estado de envío a un estado de orden\r\n\t * @param shippingStatus Estado del envío\r\n\t * @returns Estado correspondiente de la orden\r\n\t */\r\n\tprivate mapShippingStatusToOrderStatus(\r\n\t\tshippingStatus: ShippingItem[\"status\"]\r\n\t): string {\r\n\t\tswitch (shippingStatus) {\r\n\t\t\tcase \"pending\":\r\n\t\t\t\treturn \"pending\";\r\n\t\t\tcase \"ready_to_ship\":\r\n\t\t\t\treturn \"processing\";\r\n\t\t\tcase \"in_transit\":\r\n\t\t\tcase \"shipped\": // Añadido para coincidir con la DB\r\n\t\t\t\treturn \"shipped\";\r\n\t\t\tcase \"delivered\":\r\n\t\t\t\treturn \"delivered\";\r\n\t\t\tcase \"failed\":\r\n\t\t\t\treturn \"cancelled\";\r\n\t\t\tcase \"returned\":\r\n\t\t\t\treturn \"cancelled\";\r\n\t\t\tdefault:\r\n\t\t\t\treturn \"processing\";\r\n\t\t}\r\n\t}\r\n}\r\n"],"names":["ShippingServiceAdapter","filters","response","ApiClient","API_ENDPOINTS","shippingItems","item","pagination","error","id","shippingItem","history","historyError","trackingNumber","orderId","trackingData","shippingDataUpdate","status","orderStatus","shippingData","shippingResponse","statusResponse","order","shippingAddress","shippingStatus","customerName","customerEmail","customerId","carrier","estimatedDelivery","phone","currentLocation"],"mappings":"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"}