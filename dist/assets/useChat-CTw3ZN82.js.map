{"version":3,"file":"useChat-CTw3ZN82.js","sources":["../../src/core/services/ChatService.ts","../../src/presentation/hooks/useChat.ts"],"sourcesContent":["// src/core/services/ChatService.ts - VERSIÓN CORREGIDA\r\nimport ApiClient from \"../../infrastructure/api/apiClient\";\r\nimport {API_ENDPOINTS} from \"../../constants/apiEndpoints\";\r\nimport type {Chat, Message} from \"../domain/entities/Chat\";\r\n\r\n/**\r\n * Interfaces para respuestas de API - CORREGIDAS\r\n */\r\nexport interface ChatListResponse {\r\n\tstatus: string;\r\n\tdata: Chat[];\r\n\tmeta?: {\r\n\t\ttotal: number;\r\n\t\tper_page: number;\r\n\t\tcurrent_page: number;\r\n\t\tlast_page: number;\r\n\t};\r\n}\r\n\r\nexport interface ChatDetailResponse {\r\n\tstatus: string;\r\n\tdata: {\r\n\t\tchat: Chat;\r\n\t\tmessages: Message[];\r\n\t\tpagination?: {\r\n\t\t\tcurrentPage: number;\r\n\t\t\tlimit: number;\r\n\t\t\ttotal: number;\r\n\t\t};\r\n\t};\r\n}\r\n\r\nexport interface MessagesResponse {\r\n\tstatus: string;\r\n\tdata: {\r\n\t\tmessages: Message[];\r\n\t\tpagination: {\r\n\t\t\tcurrentPage: number;\r\n\t\t\tlimit: number;\r\n\t\t\ttotal: number;\r\n\t\t};\r\n\t};\r\n}\r\n\r\nexport interface MessageResponse {\r\n\tstatus: string;\r\n\tmessage: string;\r\n\tdata: {\r\n\t\tmessage: Message;\r\n\t};\r\n}\r\n\r\nexport interface CreateChatResponse {\r\n\tstatus: string;\r\n\tmessage: string;\r\n\tdata: {\r\n\t\tchat_id: number;\r\n\t};\r\n}\r\n\r\nexport interface UpdateChatStatusResponse {\r\n\tstatus: string;\r\n\tmessage: string;\r\n\tdata: {\r\n\t\tchat_id: number;\r\n\t\tstatus: string;\r\n\t};\r\n}\r\n\r\nexport interface MarkAsReadResponse {\r\n\tstatus: string;\r\n\tmessage: string;\r\n}\r\n\r\n/**\r\n * Interfaces para solicitudes\r\n */\r\nexport interface SendMessageRequest {\r\n\tcontent: string;\r\n}\r\n\r\nexport interface CreateChatRequest {\r\n\tseller_id: number;\r\n\tproduct_id: number;\r\n}\r\n\r\nexport interface UpdateChatStatusRequest {\r\n\tstatus: \"active\" | \"closed\" | \"archived\";\r\n}\r\n\r\n/**\r\n * Servicio para gestionar chats y mensajes - CORREGIDO\r\n */\r\nclass ChatService {\r\n\tprivate readonly isSeller: boolean;\r\n\tprivate readonly serviceId: string;\r\n\r\n\tconstructor(isSeller = false) {\r\n\t\tthis.isSeller = isSeller;\r\n\t\tthis.serviceId = `chat-service-${Date.now()}-${Math.round(Math.random() * 1000)}`;\r\n\t\tconsole.log(\r\n\t\t\t`ChatService inicializado como ${isSeller ? \"vendedor\" : \"usuario\"} (ID: ${this.serviceId})`\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Obtiene el endpoint adecuado según el rol del usuario\r\n\t */\r\n\tprivate getEndpoint(\r\n\t\ttype:\r\n\t\t\t| \"LIST\"\r\n\t\t\t| \"DETAILS\"\r\n\t\t\t| \"CREATE\"\r\n\t\t\t| \"SEND_MESSAGE\"\r\n\t\t\t| \"UPDATE_STATUS\"\r\n\t\t\t| \"GET_MESSAGES\"\r\n\t\t\t| \"MARK_ALL_READ\"\r\n\t\t\t| \"MARK_MESSAGE_READ\"\r\n\t\t\t| \"DELETE\",\r\n\t\t...params: any[]\r\n\t): string {\r\n\t\tif (this.isSeller) {\r\n\t\t\tswitch (type) {\r\n\t\t\t\tcase \"LIST\":\r\n\t\t\t\t\treturn API_ENDPOINTS.CHAT.SELLER.LIST;\r\n\t\t\t\tcase \"DETAILS\":\r\n\t\t\t\t\treturn API_ENDPOINTS.CHAT.SELLER.DETAILS(params[0]);\r\n\t\t\t\tcase \"SEND_MESSAGE\":\r\n\t\t\t\t\treturn API_ENDPOINTS.CHAT.SELLER.SEND_MESSAGE(params[0]);\r\n\t\t\t\tcase \"UPDATE_STATUS\":\r\n\t\t\t\t\treturn API_ENDPOINTS.CHAT.SELLER.UPDATE_STATUS(params[0]);\r\n\t\t\t\tcase \"GET_MESSAGES\":\r\n\t\t\t\t\treturn API_ENDPOINTS.CHAT.SELLER.GET_MESSAGES(params[0]);\r\n\t\t\t\tcase \"MARK_ALL_READ\":\r\n\t\t\t\t\treturn API_ENDPOINTS.CHAT.SELLER.MARK_ALL_READ(params[0]);\r\n\t\t\t\tcase \"MARK_MESSAGE_READ\":\r\n\t\t\t\t\treturn API_ENDPOINTS.CHAT.MARK_MESSAGE_READ(params[0], params[1]);\r\n\t\t\t\tcase \"DELETE\":\r\n\t\t\t\t\treturn API_ENDPOINTS.CHAT.DELETE(params[0]);\r\n\t\t\t\tcase \"CREATE\":\r\n\t\t\t\t\treturn API_ENDPOINTS.CHAT.CREATE;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\treturn \"\";\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tswitch (type) {\r\n\t\t\t\tcase \"LIST\":\r\n\t\t\t\t\treturn API_ENDPOINTS.CHAT.LIST;\r\n\t\t\t\tcase \"DETAILS\":\r\n\t\t\t\t\treturn API_ENDPOINTS.CHAT.DETAILS(params[0]);\r\n\t\t\t\tcase \"CREATE\":\r\n\t\t\t\t\treturn API_ENDPOINTS.CHAT.CREATE;\r\n\t\t\t\tcase \"SEND_MESSAGE\":\r\n\t\t\t\t\treturn API_ENDPOINTS.CHAT.SEND_MESSAGE(params[0]);\r\n\t\t\t\tcase \"UPDATE_STATUS\":\r\n\t\t\t\t\treturn API_ENDPOINTS.CHAT.UPDATE_STATUS(params[0]);\r\n\t\t\t\tcase \"DELETE\":\r\n\t\t\t\t\treturn API_ENDPOINTS.CHAT.DELETE(params[0]);\r\n\t\t\t\tcase \"GET_MESSAGES\":\r\n\t\t\t\t\treturn API_ENDPOINTS.CHAT.GET_MESSAGES(params[0]);\r\n\t\t\t\tcase \"MARK_ALL_READ\":\r\n\t\t\t\t\treturn API_ENDPOINTS.CHAT.MARK_ALL_READ(params[0]);\r\n\t\t\t\tcase \"MARK_MESSAGE_READ\":\r\n\t\t\t\t\treturn API_ENDPOINTS.CHAT.MARK_MESSAGE_READ(params[0], params[1]);\r\n\t\t\t\tdefault:\r\n\t\t\t\t\treturn \"\";\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Valida y normaliza respuesta del API\r\n\t */\r\n\tprivate validateApiResponse<T>(response: any, expectedFields: string[] = []): T | null {\r\n\t\tif (!response || typeof response !== 'object') {\r\n\t\t\tconsole.warn('Respuesta inválida del API:', response);\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\t// Verificar campos requeridos si se especifican\r\n\t\tfor (const field of expectedFields) {\r\n\t\t\tif (!(field in response)) {\r\n\t\t\t\tconsole.warn(`Campo requerido '${field}' no encontrado en respuesta:`, response);\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn response as T;\r\n\t}\r\n\r\n\t/**\r\n\t * Obtiene la lista de chats del usuario actual\r\n\t */\r\n\tasync getChats(): Promise<ChatListResponse> {\r\n\t\ttry {\r\n\t\t\tconsole.log(\r\n\t\t\t\t`ChatService (${this.serviceId}): Obteniendo lista de chats ${this.isSeller ? \"como vendedor\" : \"como usuario\"}`\r\n\t\t\t);\r\n\t\t\tconst endpoint = this.getEndpoint(\"LIST\");\r\n\t\t\t\r\n\t\t\tconst response = await ApiClient.get<any>(endpoint);\r\n\t\t\tconst validatedResponse = this.validateApiResponse<any>(response);\r\n\r\n\t\t\tif (!validatedResponse) {\r\n\t\t\t\treturn { status: \"error\", data: [] };\r\n\t\t\t}\r\n\r\n\t\t\t// Manejar diferentes formatos de respuesta\r\n\t\t\tif (validatedResponse.status === \"success\") {\r\n\t\t\t\tconst data = Array.isArray(validatedResponse.data) \r\n\t\t\t\t\t? validatedResponse.data \r\n\t\t\t\t\t: validatedResponse.data?.data || [];\r\n\t\t\t\t\r\n\t\t\t\tconsole.log(`ChatService (${this.serviceId}): Se encontraron ${data.length} chats`);\r\n\t\t\t\t\r\n\t\t\t\treturn {\r\n\t\t\t\t\tstatus: \"success\",\r\n\t\t\t\t\tdata: data,\r\n\t\t\t\t\tmeta: validatedResponse.data?.meta || validatedResponse.meta\r\n\t\t\t\t};\r\n\t\t\t} else if (Array.isArray(validatedResponse)) {\r\n\t\t\t\tconsole.log(`ChatService (${this.serviceId}): Array directo con ${validatedResponse.length} chats`);\r\n\t\t\t\treturn {\r\n\t\t\t\t\tstatus: \"success\",\r\n\t\t\t\t\tdata: validatedResponse\r\n\t\t\t\t};\r\n\t\t\t}\r\n\r\n\t\t\tconsole.log(`ChatService (${this.serviceId}): No se encontraron chats`);\r\n\t\t\treturn { status: \"success\", data: [] };\r\n\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(`ChatService (${this.serviceId}): Error al obtener chats:`, error);\r\n\t\t\treturn { status: \"error\", data: [] };\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Obtiene los detalles de un chat específico con sus mensajes\r\n\t */\r\n\tasync getChatDetails(\r\n\t\tchatId: number,\r\n\t\tpage: number = 1,\r\n\t\tlimit: number = 50\r\n\t): Promise<ChatDetailResponse> {\r\n\t\ttry {\r\n\t\t\tconsole.log(\r\n\t\t\t\t`ChatService (${this.serviceId}): Obteniendo detalles del chat ${chatId}`\r\n\t\t\t);\r\n\r\n\t\t\tconst endpoint = this.getEndpoint(\"DETAILS\", chatId);\r\n\t\t\tconst response = await ApiClient.get<any>(\r\n\t\t\t\t`${endpoint}?page=${page}&limit=${limit}`\r\n\t\t\t);\r\n\r\n\t\t\tconst validatedResponse = this.validateApiResponse<any>(response, ['status']);\r\n\r\n\t\t\tif (!validatedResponse) {\r\n\t\t\t\tthrow new Error(`No se pudo obtener información del chat ${chatId}`);\r\n\t\t\t}\r\n\r\n\t\t\tif (validatedResponse.status === \"success\") {\r\n\t\t\t\t// Extraer datos con valores por defecto\r\n\t\t\t\tconst responseData = validatedResponse.data || {};\r\n\t\t\t\tconst chat: Chat = responseData.chat || {\r\n\t\t\t\t\tid: chatId,\r\n\t\t\t\t\tuserId: 0,\r\n\t\t\t\t\tsellerId: 0,\r\n\t\t\t\t\tproductId: 0,\r\n\t\t\t\t\tstatus: \"active\" as const,\r\n\t\t\t\t\tmessages: []\r\n\t\t\t\t};\r\n\t\t\t\t\r\n\t\t\t\tconst messages: Message[] = responseData.messages || [];\r\n\t\t\t\tconst pagination = responseData.pagination || {\r\n\t\t\t\t\tcurrentPage: page,\r\n\t\t\t\t\tlimit: limit,\r\n\t\t\t\t\ttotal: messages.length\r\n\t\t\t\t};\r\n\r\n\t\t\t\t// Asegurar que el chat tiene ID\r\n\t\t\t\tif (!chat.id) {\r\n\t\t\t\t\tchat.id = chatId;\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn {\r\n\t\t\t\t\tstatus: \"success\",\r\n\t\t\t\t\tdata: {\r\n\t\t\t\t\t\tchat,\r\n\t\t\t\t\t\tmessages,\r\n\t\t\t\t\t\tpagination\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t}\r\n\r\n\t\t\tthrow new Error(`Error en respuesta del servidor: ${validatedResponse.status}`);\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(`ChatService (${this.serviceId}): Error al obtener detalles del chat ${chatId}:`, error);\r\n\t\t\tthrow error;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Obtiene mensajes de un chat con paginación\r\n\t */\r\n\tasync getMessages(\r\n\t\tchatId: number,\r\n\t\tpage: number = 1,\r\n\t\tlimit: number = 20\r\n\t): Promise<MessagesResponse> {\r\n\t\ttry {\r\n\t\t\tconst endpoint = this.getEndpoint(\"GET_MESSAGES\", chatId);\r\n\t\t\tconst response = await ApiClient.get<any>(\r\n\t\t\t\t`${endpoint}?page=${page}&limit=${limit}`\r\n\t\t\t);\r\n\r\n\t\t\tconst validatedResponse = this.validateApiResponse<any>(response);\r\n\r\n\t\t\tif (!validatedResponse) {\r\n\t\t\t\tthrow new Error(`No se pudieron obtener los mensajes del chat ${chatId}`);\r\n\t\t\t}\r\n\r\n\t\t\tconst messages: Message[] = validatedResponse.data?.messages || [];\r\n\t\t\tconst pagination = validatedResponse.data?.pagination || {\r\n\t\t\t\tcurrentPage: page,\r\n\t\t\t\tlimit: limit,\r\n\t\t\t\ttotal: 0\r\n\t\t\t};\r\n\r\n\t\t\treturn {\r\n\t\t\t\tstatus: \"success\",\r\n\t\t\t\tdata: {\r\n\t\t\t\t\tmessages,\r\n\t\t\t\t\tpagination\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(`ChatService (${this.serviceId}): Error al obtener mensajes del chat ${chatId}:`, error);\r\n\t\t\tthrow error;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Envía un mensaje a un chat - CORREGIDO para manejar filtro de contenido\r\n\t */\r\n\tasync sendMessage(\r\n\t\tchatId: number,\r\n\t\tmessage: SendMessageRequest\r\n\t): Promise<MessageResponse> {\r\n\t\ttry {\r\n\t\t\tconsole.log(`ChatService (${this.serviceId}): Enviando mensaje al chat ${chatId}`);\r\n\r\n\t\t\tif (!chatId || !message.content.trim()) {\r\n\t\t\t\tthrow new Error(\"ID de chat o contenido del mensaje inválidos\");\r\n\t\t\t}\r\n\r\n\t\t\tconst endpoint = this.getEndpoint(\"SEND_MESSAGE\", chatId);\r\n\t\t\tconst response = await ApiClient.post<any>(endpoint, message);\r\n\r\n\t\t\tconst validatedResponse = this.validateApiResponse<any>(response);\r\n\r\n\t\t\tif (!validatedResponse) {\r\n\t\t\t\tthrow new Error(\"No se recibió respuesta al enviar mensaje\");\r\n\t\t\t}\r\n\r\n\t\t\t// Manejar respuesta de filtro de contenido\r\n\t\t\tif (validatedResponse.status === \"error\") {\r\n\t\t\t\t// Re-lanzar el error completo para que el hook lo maneje\r\n\t\t\t\tconst error = new Error(validatedResponse.message);\r\n\t\t\t\t(error as any).response = { data: validatedResponse };\r\n\t\t\t\tthrow error;\r\n\t\t\t}\r\n\r\n\t\t\t// Respuesta exitosa\r\n\t\t\tif (validatedResponse.status === \"success\") {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tstatus: validatedResponse.status,\r\n\t\t\t\t\tmessage: validatedResponse.message || \"Mensaje enviado\",\r\n\t\t\t\t\tdata: {\r\n\t\t\t\t\t\tmessage: validatedResponse.data?.message || {\r\n\t\t\t\t\t\t\tid: Date.now(),\r\n\t\t\t\t\t\t\tchatId: chatId,\r\n\t\t\t\t\t\t\tsenderId: 0,\r\n\t\t\t\t\t\t\tcontent: message.content,\r\n\t\t\t\t\t\t\tisRead: false,\r\n\t\t\t\t\t\t\tcreatedAt: new Date().toISOString()\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t}\r\n\r\n\t\t\tthrow new Error(\"Formato de respuesta inesperado\");\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(`ChatService (${this.serviceId}): Error al enviar mensaje:`, error);\r\n\t\t\tthrow error;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Crea un nuevo chat con un vendedor para un producto\r\n\t */\r\n\tasync createChat(data: CreateChatRequest): Promise<CreateChatResponse> {\r\n\t\ttry {\r\n\t\t\tconsole.log(`ChatService (${this.serviceId}): Creando chat`);\r\n\r\n\t\t\tif (!data.seller_id || !data.product_id) {\r\n\t\t\t\tthrow new Error(\"ID de vendedor o producto inválidos\");\r\n\t\t\t}\r\n\r\n\t\t\tconst endpoint = this.getEndpoint(\"CREATE\");\r\n\t\t\tconst response = await ApiClient.post<any>(endpoint, data);\r\n\r\n\t\t\tconst validatedResponse = this.validateApiResponse<any>(response);\r\n\r\n\t\t\tif (!validatedResponse) {\r\n\t\t\t\tthrow new Error(\"Formato de respuesta inesperado al crear chat\");\r\n\t\t\t}\r\n\r\n\t\t\t// Manejar diferentes formatos de respuesta\r\n\t\t\tif (validatedResponse.status === \"success\") {\r\n\t\t\t\tconst chatId = validatedResponse.data?.chat_id || \r\n\t\t\t\t\t\t\t   validatedResponse.data?.id || \r\n\t\t\t\t\t\t\t   validatedResponse.id;\r\n\r\n\t\t\t\tif (chatId) {\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tstatus: \"success\",\r\n\t\t\t\t\t\tmessage: validatedResponse.message || \"Chat creado correctamente\",\r\n\t\t\t\t\t\tdata: { chat_id: chatId }\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthrow new Error(\"No se pudo obtener el ID del chat creado\");\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(`ChatService (${this.serviceId}): Error al crear chat:`, error);\r\n\t\t\tthrow error;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Actualiza el estado de un chat\r\n\t */\r\n\tasync updateChatStatus(\r\n\t\tchatId: number,\r\n\t\tdata: UpdateChatStatusRequest\r\n\t): Promise<UpdateChatStatusResponse> {\r\n\t\ttry {\r\n\t\t\tif (!chatId || !data.status) {\r\n\t\t\t\tthrow new Error(\"ID de chat o estado inválidos\");\r\n\t\t\t}\r\n\r\n\t\t\tconst endpoint = this.getEndpoint(\"UPDATE_STATUS\", chatId);\r\n\t\t\tconst response = await ApiClient.put<any>(endpoint, data);\r\n\r\n\t\t\tconst validatedResponse = this.validateApiResponse<any>(response);\r\n\r\n\t\t\tif (!validatedResponse) {\r\n\t\t\t\tthrow new Error(\"No se recibió respuesta al actualizar estado\");\r\n\t\t\t}\r\n\r\n\t\t\treturn {\r\n\t\t\t\tstatus: validatedResponse.status || \"success\",\r\n\t\t\t\tmessage: validatedResponse.message || `Chat ${data.status} correctamente`,\r\n\t\t\t\tdata: {\r\n\t\t\t\t\tchat_id: validatedResponse.data?.chat_id || chatId,\r\n\t\t\t\t\tstatus: validatedResponse.data?.status || data.status\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(`ChatService (${this.serviceId}): Error al actualizar estado del chat ${chatId}:`, error);\r\n\t\t\tthrow error;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Marca todos los mensajes de un chat como leídos\r\n\t */\r\n\tasync markAllMessagesAsRead(chatId: number): Promise<MarkAsReadResponse> {\r\n\t\ttry {\r\n\t\t\tconst endpoint = this.getEndpoint(\"MARK_ALL_READ\", chatId);\r\n\t\t\tconst response = await ApiClient.post<any>(endpoint, {});\r\n\r\n\t\t\tconst validatedResponse = this.validateApiResponse<any>(response);\r\n\r\n\t\t\tif (!validatedResponse) {\r\n\t\t\t\tthrow new Error(\"No se recibió respuesta al marcar mensajes como leídos\");\r\n\t\t\t}\r\n\r\n\t\t\treturn {\r\n\t\t\t\tstatus: validatedResponse.status || \"success\",\r\n\t\t\t\tmessage: validatedResponse.message || \"Mensajes marcados como leídos\"\r\n\t\t\t};\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(`ChatService (${this.serviceId}): Error al marcar mensajes como leídos:`, error);\r\n\t\t\tthrow error;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Marca un mensaje específico como leído\r\n\t */\r\n\tasync markMessageAsRead(\r\n\t\tchatId: number,\r\n\t\tmessageId: number\r\n\t): Promise<MarkAsReadResponse> {\r\n\t\ttry {\r\n\t\t\tconst endpoint = this.getEndpoint(\"MARK_MESSAGE_READ\", chatId, messageId);\r\n\t\t\tconst response = await ApiClient.patch<any>(endpoint, {});\r\n\r\n\t\t\tconst validatedResponse = this.validateApiResponse<any>(response);\r\n\r\n\t\t\tif (!validatedResponse) {\r\n\t\t\t\tthrow new Error(\"No se recibió respuesta al marcar mensaje como leído\");\r\n\t\t\t}\r\n\r\n\t\t\treturn {\r\n\t\t\t\tstatus: validatedResponse.status || \"success\",\r\n\t\t\t\tmessage: validatedResponse.message || \"Mensaje marcado como leído\"\r\n\t\t\t};\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(`ChatService (${this.serviceId}): Error al marcar mensaje como leído:`, error);\r\n\t\t\tthrow error;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Elimina (archiva) un chat\r\n\t */\r\n\tasync deleteChat(chatId: number): Promise<MarkAsReadResponse> {\r\n\t\ttry {\r\n\t\t\tconst endpoint = this.getEndpoint(\"DELETE\", chatId);\r\n\t\t\tconst response = await ApiClient.delete<any>(endpoint);\r\n\r\n\t\t\tconst validatedResponse = this.validateApiResponse<any>(response);\r\n\r\n\t\t\tif (!validatedResponse) {\r\n\t\t\t\tthrow new Error(\"No se recibió respuesta al eliminar chat\");\r\n\t\t\t}\r\n\r\n\t\t\treturn {\r\n\t\t\t\tstatus: validatedResponse.status || \"success\",\r\n\t\t\t\tmessage: validatedResponse.message || \"Chat eliminado correctamente\"\r\n\t\t\t};\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(`ChatService (${this.serviceId}): Error al eliminar chat:`, error);\r\n\t\t\tthrow error;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Obtiene chats por ID de vendedor (método explícito)\r\n\t */\r\n\tasync getChatsBySellerIdExplicit(id: number): Promise<ChatListResponse> {\r\n\t\ttry {\r\n\t\t\tconsole.log(`ChatService (${this.serviceId}): Obteniendo chats para vendedor ID ${id}`);\r\n\r\n\t\t\tconst endpoint = API_ENDPOINTS.CHAT.SELLER.LIST_BY_SELLER(id);\r\n\t\t\tconst response = await ApiClient.get<any>(endpoint);\r\n\r\n\t\t\tconst validatedResponse = this.validateApiResponse<any>(response);\r\n\r\n\t\t\tif (!validatedResponse) {\r\n\t\t\t\treturn { status: \"error\", data: [] };\r\n\t\t\t}\r\n\r\n\t\t\tif (validatedResponse.status === \"success\") {\r\n\t\t\t\tconst data = Array.isArray(validatedResponse.data) \r\n\t\t\t\t\t? validatedResponse.data \r\n\t\t\t\t\t: validatedResponse.data?.data || [];\r\n\t\t\t\t\r\n\t\t\t\treturn {\r\n\t\t\t\t\tstatus: \"success\",\r\n\t\t\t\t\tdata: data,\r\n\t\t\t\t\tmeta: validatedResponse.data?.meta\r\n\t\t\t\t};\r\n\t\t\t} else if (Array.isArray(validatedResponse)) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tstatus: \"success\",\r\n\t\t\t\t\tdata: validatedResponse\r\n\t\t\t\t};\r\n\t\t\t}\r\n\r\n\t\t\treturn { status: \"success\", data: [] };\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(`ChatService (${this.serviceId}): Error al obtener chats para vendedor ID ${id}:`, error);\r\n\t\t\tthrow error;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default ChatService;","// src/presentation/hooks/useChat.ts - ERRORES DE TYPESCRIPT CORREGIDOS\r\nimport {useState, useEffect, useCallback, useRef} from \"react\";\r\nimport {useAuth} from \"./useAuth\";\r\nimport ChatService from \"../../core/services/ChatService\";\r\nimport type {Chat, Message} from \"../../core/domain/entities/Chat\";\r\nimport {extractErrorMessage} from \"../../utils/errorHandler\";\r\nimport {API_ENDPOINTS} from \"../../constants/apiEndpoints\";\r\nimport ApiClient from \"../../infrastructure/api/apiClient\";\r\n\r\n// Interfaces corregidas para las respuestas del API\r\ninterface SellerResponse {\r\n\tdata?: {\r\n\t\tid?: number;\r\n\t\tseller_id?: number;\r\n\t};\r\n}\r\n\r\nexport const useChat = (isSeller = false) => {\r\n\tconst [chats, setChats] = useState<Chat[]>([]);\r\n\tconst [selectedChat, setSelectedChat] = useState<Chat | null>(null);\r\n\tconst [messages, setMessages] = useState<Message[]>([]);\r\n\tconst [loading, setLoading] = useState<boolean>(false);\r\n\tconst [error, setError] = useState<string | null>(null);\r\n\r\n\t// Referencias para controlar peticiones y estado\r\n\tconst isLoadingRef = useRef(false);\r\n\tconst chatFetchAttempts = useRef<Record<number, number>>({});\r\n\tconst refreshIntervalRef = useRef<NodeJS.Timeout | null>(null);\r\n\tconst localChatsRef = useRef<Chat[]>([]);\r\n\r\n\t// Referencia fija para el rol\r\n\tconst isSellerRef = useRef<boolean>(isSeller);\r\n\tconst chatServiceRef = useRef<ChatService | null>(null);\r\n\r\n\t// Obtener el usuario actual del hook de autenticación\r\n\tconst {user} = useAuth();\r\n\r\n\t// Crear una sola instancia del servicio de chat\r\n\tconst getChatService = useCallback(() => {\r\n\t\tif (!chatServiceRef.current) {\r\n\t\t\tconsole.log(\r\n\t\t\t\t`Creando instancia única de ChatService (isSeller=${isSellerRef.current})`\r\n\t\t\t);\r\n\t\t\tchatServiceRef.current = new ChatService(isSellerRef.current);\r\n\t\t}\r\n\t\treturn chatServiceRef.current;\r\n\t}, []);\r\n\r\n\t/**\r\n\t * Obtiene información del vendedor por ID de usuario - CORREGIDO\r\n\t */\r\n\tconst getSellerIdFromUser = async (userId: number): Promise<number | null> => {\r\n\t\ttry {\r\n\t\t\tconst response = await ApiClient.get<SellerResponse>(API_ENDPOINTS.SELLERS.BY_USER_ID(userId));\r\n\r\n\t\t\tif (response?.data?.id) {\r\n\t\t\t\treturn response.data.id;\r\n\t\t\t} else if (response?.data?.seller_id) {\r\n\t\t\t\treturn response.data.seller_id;\r\n\t\t\t}\r\n\r\n\t\t\treturn null;\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(`Error al obtener información del vendedor para usuario ${userId}:`, error);\r\n\t\t\treturn null;\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Carga la lista de chats del usuario\r\n\t */\r\n\tconst fetchChats = useCallback(async () => {\r\n\t\tif (isLoadingRef.current) return [];\r\n\r\n\t\ttry {\r\n\t\t\tconsole.log(\r\n\t\t\t\t`🔄 Obteniendo lista de chats ${isSellerRef.current ? \"como vendedor\" : \"como usuario\"}...`\r\n\t\t\t);\r\n\t\t\tisLoadingRef.current = true;\r\n\t\t\tsetLoading(true);\r\n\t\t\tsetError(null);\r\n\r\n\t\t\tconst chatService = getChatService();\r\n\t\t\tlet response;\r\n\r\n\t\t\t// Si es vendedor y tenemos el ID del usuario, intentar obtener el ID del vendedor\r\n\t\t\tif (isSellerRef.current && user?.id) {\r\n\t\t\t\tconst sellerId = await getSellerIdFromUser(user.id);\r\n\r\n\t\t\t\tif (sellerId) {\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tresponse = await chatService.getChatsBySellerIdExplicit(sellerId);\r\n\t\t\t\t\t} catch (explicitError) {\r\n\t\t\t\t\t\tconsole.warn(\"Error en búsqueda explícita por ID de vendedor:\", explicitError);\r\n\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\tresponse = await chatService.getChatsBySellerIdExplicit(user.id);\r\n\t\t\t\t\t\t} catch (userIdError) {\r\n\t\t\t\t\t\t\tconsole.warn(\"Error en búsqueda explícita por ID de usuario:\", userIdError);\r\n\t\t\t\t\t\t\tresponse = await chatService.getChats();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tresponse = await chatService.getChatsBySellerIdExplicit(user.id);\r\n\t\t\t\t\t} catch (error) {\r\n\t\t\t\t\t\tconsole.warn(\"Error en búsqueda explícita por ID de usuario:\", error);\r\n\t\t\t\t\t\tresponse = await chatService.getChats();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tresponse = await chatService.getChats();\r\n\t\t\t}\r\n\r\n\t\t\t// Validar respuesta\r\n\t\t\tif (!response || response.status !== \"success\") {\r\n\t\t\t\tthrow new Error(\"No se pudo obtener la lista de chats\");\r\n\t\t\t}\r\n\r\n\t\t\tconst chatList = response.data || [];\r\n\t\t\tsetChats(chatList);\r\n\t\t\tlocalChatsRef.current = chatList;\r\n\r\n\t\t\tconsole.log(\r\n\t\t\t\t`✅ Cargados ${chatList.length} chats ${isSellerRef.current ? \"como vendedor\" : \"como usuario\"}`\r\n\t\t\t);\r\n\r\n\t\t\treturn chatList;\r\n\t\t} catch (err) {\r\n\t\t\tconsole.error(\"Error al obtener chats:\", err);\r\n\t\t\tsetError(extractErrorMessage(err, \"Error al cargar los chats\"));\r\n\t\t\treturn [];\r\n\t\t} finally {\r\n\t\t\tsetLoading(false);\r\n\t\t\tisLoadingRef.current = false;\r\n\t\t}\r\n\t}, [getChatService, user?.id]);\r\n\r\n\t/**\r\n\t * Carga los mensajes de un chat específico\r\n\t */\r\n\tconst fetchChatMessages = useCallback(\r\n\t\tasync (chatId: number) => {\r\n\t\t\tconst attempts = chatFetchAttempts.current[chatId] || 0;\r\n\t\t\tif (attempts > 2) {\r\n\t\t\t\tconsole.warn(`Demasiados intentos para cargar el chat ${chatId}`);\r\n\t\t\t\tsetError(`No se pudo cargar el chat. Intente más tarde.`);\r\n\t\t\t\t\r\n\t\t\t\tif (refreshIntervalRef.current) {\r\n\t\t\t\t\tclearInterval(refreshIntervalRef.current);\r\n\t\t\t\t\trefreshIntervalRef.current = null;\r\n\t\t\t\t}\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\r\n\t\t\ttry {\r\n\t\t\t\tif (isLoadingRef.current) {\r\n\t\t\t\t\tconsole.log(`Petición bloqueada para chat ${chatId}`);\r\n\t\t\t\t\treturn null;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconsole.log(`Cargando mensajes para chat ${chatId}...`);\r\n\t\t\t\tisLoadingRef.current = true;\r\n\t\t\t\tsetLoading(true);\r\n\t\t\t\tsetError(null);\r\n\r\n\t\t\t\tchatFetchAttempts.current[chatId] = attempts + 1;\r\n\r\n\t\t\t\tconst chatService = getChatService();\r\n\t\t\t\tconst response = await chatService.getChatDetails(chatId);\r\n\r\n\t\t\t\tif (response && response.status === \"success\" && response.data?.chat) {\r\n\t\t\t\t\tconst chat = response.data.chat;\r\n\t\t\t\t\tconst responseMessages = response.data.messages || [];\r\n\r\n\t\t\t\t\tif (chat.id) {\r\n\t\t\t\t\t\tconsole.log(`Chat ${chatId} cargado con ${responseMessages.length} mensajes`);\r\n\r\n\t\t\t\t\t\t// Reiniciar contador de intentos\r\n\t\t\t\t\t\tchatFetchAttempts.current[chatId] = 0;\r\n\r\n\t\t\t\t\t\tsetSelectedChat(chat);\r\n\t\t\t\t\t\tsetMessages(responseMessages);\r\n\r\n\t\t\t\t\t\t// Actualizar lista de chats\r\n\t\t\t\t\t\tsetChats((prevChats) => {\r\n\t\t\t\t\t\t\tconst exists = prevChats.some((c) => c.id === chat.id);\r\n\t\t\t\t\t\t\tif (!exists) {\r\n\t\t\t\t\t\t\t\tconst updatedChats = [...prevChats, chat];\r\n\t\t\t\t\t\t\t\tlocalChatsRef.current = updatedChats;\r\n\t\t\t\t\t\t\t\treturn updatedChats;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tconst updatedChats = prevChats.map((c) =>\r\n\t\t\t\t\t\t\t\tc.id === chat.id ? {...c, ...chat} : c\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\tlocalChatsRef.current = updatedChats;\r\n\t\t\t\t\t\t\treturn updatedChats;\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\treturn chat;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconsole.error(`Error en respuesta para chat ${chatId}`);\r\n\t\t\t\tsetError(\"Error al cargar los mensajes\");\r\n\t\t\t\treturn null;\r\n\t\t\t} catch (err) {\r\n\t\t\t\tconsole.error(`Error al obtener mensajes del chat ${chatId}:`, err);\r\n\t\t\t\tsetError(extractErrorMessage(err, \"Error al cargar los mensajes\"));\r\n\t\t\t\treturn null;\r\n\t\t\t} finally {\r\n\t\t\t\tisLoadingRef.current = false;\r\n\t\t\t\tsetLoading(false);\r\n\t\t\t}\r\n\t\t},\r\n\t\t[getChatService]\r\n\t);\r\n\r\n\t/**\r\n\t * Crea un nuevo chat con un vendedor para un producto\r\n\t */\r\n\tconst createChat = useCallback(\r\n\t\tasync (sellerId: number, productId: number) => {\r\n\t\t\tif (isLoadingRef.current) {\r\n\t\t\t\tconsole.log(\"Creación bloqueada, hay una operación en curso\");\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\r\n\t\t\ttry {\r\n\t\t\t\tconsole.log(`Creando chat con vendedor ${sellerId} para producto ${productId}...`);\r\n\t\t\t\tisLoadingRef.current = true;\r\n\t\t\t\tsetLoading(true);\r\n\t\t\t\tsetError(null);\r\n\r\n\t\t\t\tconst chatService = getChatService();\r\n\t\t\t\tconst response = await chatService.createChat({\r\n\t\t\t\t\tseller_id: sellerId,\r\n\t\t\t\t\tproduct_id: productId,\r\n\t\t\t\t});\r\n\r\n\t\t\t\tif (response.status === \"success\" && response.data?.chat_id) {\r\n\t\t\t\t\tconsole.log(\"Chat creado correctamente:\", response.data);\r\n\t\t\t\t\tconst chatId = response.data.chat_id;\r\n\r\n\t\t\t\t\t// Cargar el chat creado\r\n\t\t\t\t\tawait fetchChatMessages(chatId);\r\n\r\n\t\t\t\t\treturn chatId;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconsole.error(\"Error en respuesta al crear chat:\", response);\r\n\t\t\t\t\tsetError(response.message || \"Error al crear el chat\");\r\n\t\t\t\t\treturn null;\r\n\t\t\t\t}\r\n\t\t\t} catch (err) {\r\n\t\t\t\tconsole.error(\"Error al crear chat:\", err);\r\n\t\t\t\tsetError(extractErrorMessage(err, \"Error al crear el chat\"));\r\n\t\t\t\treturn null;\r\n\t\t\t} finally {\r\n\t\t\t\tisLoadingRef.current = false;\r\n\t\t\t\tsetLoading(false);\r\n\t\t\t}\r\n\t\t},\r\n\t\t[fetchChatMessages, getChatService]\r\n\t);\r\n\r\n\t/**\r\n\t * Envía un mensaje a un chat recién creado\r\n\t */\r\n\tconst sendMessageForNewChat = useCallback(\r\n\t\tasync (chatId: number, content: string): Promise<boolean> => {\r\n\t\t\tif (!chatId || !content.trim()) {\r\n\t\t\t\tconsole.error(\"No se puede enviar mensaje: Chat ID o contenido vacío\");\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tif (isLoadingRef.current) {\r\n\t\t\t\tconsole.log(\"Envío bloqueado, hay una operación en curso\");\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\ttry {\r\n\t\t\t\tconsole.log(`Enviando mensaje al nuevo chat ${chatId}...`);\r\n\t\t\t\tisLoadingRef.current = true;\r\n\t\t\t\tsetLoading(true);\r\n\t\t\t\tsetError(null);\r\n\r\n\t\t\t\tconst chatService = getChatService();\r\n\t\t\t\tconst response = await chatService.sendMessage(chatId, {\r\n\t\t\t\t\tcontent: content.trim(),\r\n\t\t\t\t});\r\n\r\n\t\t\t\tif (response.status === \"success\") {\r\n\t\t\t\t\tconsole.log(\"Mensaje para nuevo chat enviado correctamente\");\r\n\t\t\t\t\tawait fetchChatMessages(chatId);\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconsole.error(\"Error en respuesta al enviar mensaje:\", response);\r\n\t\t\t\t\tsetError(response.message || \"Error al enviar el mensaje\");\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t} catch (err: any) {\r\n\t\t\t\tconsole.error(\"Error al enviar mensaje a nuevo chat:\", err);\r\n\r\n\t\t\t\t// Manejar errores específicos del filtro de chat\r\n\t\t\t\tif (err?.response?.data?.status === 'error') {\r\n\t\t\t\t\t// Re-lanzar el error para que lo maneje el componente\r\n\t\t\t\t\tthrow err;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tsetError(extractErrorMessage(err, \"Error al enviar el mensaje\"));\r\n\t\t\t\treturn false;\r\n\t\t\t} finally {\r\n\t\t\t\tisLoadingRef.current = false;\r\n\t\t\t\tsetLoading(false);\r\n\t\t\t}\r\n\t\t},\r\n\t\t[fetchChatMessages, getChatService]\r\n\t);\r\n\r\n\t/**\r\n\t * Envía un mensaje al chat seleccionado\r\n\t */\r\n\tconst sendMessage = useCallback(\r\n\t\tasync (content: string): Promise<boolean> => {\r\n\t\t\tif (!selectedChat || !selectedChat.id || !content.trim()) {\r\n\t\t\t\tconsole.error(\"No se puede enviar mensaje: Chat no seleccionado o contenido vacío\");\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tif (isLoadingRef.current) {\r\n\t\t\t\tconsole.log(\"Envío bloqueado, hay una operación en curso\");\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\ttry {\r\n\t\t\t\tconsole.log(`Enviando mensaje a chat ${selectedChat.id} ${isSellerRef.current ? \"como vendedor\" : \"como usuario\"}...`);\r\n\t\t\t\tisLoadingRef.current = true;\r\n\t\t\t\tsetLoading(true);\r\n\t\t\t\tsetError(null);\r\n\r\n\t\t\t\tconst chatService = getChatService();\r\n\t\t\t\tconst response = await chatService.sendMessage(selectedChat.id, {\r\n\t\t\t\t\tcontent: content.trim(),\r\n\t\t\t\t});\r\n\r\n\t\t\t\tif (response.status === \"success\") {\r\n\t\t\t\t\tconsole.log(\"Mensaje enviado correctamente\");\r\n\t\t\t\t\t// Recargar los mensajes para ver el nuevo mensaje\r\n\t\t\t\t\tawait fetchChatMessages(selectedChat.id);\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconsole.error(\"Error en respuesta al enviar mensaje:\", response);\r\n\t\t\t\t\tsetError(response.message || \"Error al enviar el mensaje\");\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t} catch (err: any) {\r\n\t\t\t\tconsole.error(\"Error al enviar mensaje:\", err);\r\n\t\t\t\t\r\n\t\t\t\t// Manejar errores específicos del filtro de chat\r\n\t\t\t\tif (err?.response?.data?.status === 'error') {\r\n\t\t\t\t\t// Re-lanzar el error para que ChatInterface lo maneje\r\n\t\t\t\t\tthrow err;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tsetError(extractErrorMessage(err, \"Error al enviar el mensaje\"));\r\n\t\t\t\treturn false;\r\n\t\t\t} finally {\r\n\t\t\t\tisLoadingRef.current = false;\r\n\t\t\t\tsetLoading(false);\r\n\t\t\t}\r\n\t\t},\r\n\t\t[selectedChat, fetchChatMessages, getChatService]\r\n\t);\r\n\r\n\t/**\r\n\t * Actualiza el estado de un chat\r\n\t */\r\n\tconst updateChatStatus = useCallback(\r\n\t\tasync (chatId: number, status: \"active\" | \"closed\" | \"archived\") => {\r\n\t\t\tif (isLoadingRef.current) {\r\n\t\t\t\tconsole.log(\"Actualización bloqueada, hay una operación en curso\");\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\ttry {\r\n\t\t\t\tconsole.log(`Actualizando estado de chat ${chatId} a ${status}...`);\r\n\t\t\t\tisLoadingRef.current = true;\r\n\t\t\t\tsetLoading(true);\r\n\t\t\t\tsetError(null);\r\n\r\n\t\t\t\t// Actualizar optimisticamente\r\n\t\t\t\tsetChats((prev) =>\r\n\t\t\t\t\tprev.map((chat) => {\r\n\t\t\t\t\t\tif (chat.id === chatId) {\r\n\t\t\t\t\t\t\treturn {...chat, status};\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn chat;\r\n\t\t\t\t\t})\r\n\t\t\t\t);\r\n\r\n\t\t\t\tif (selectedChat && selectedChat.id === chatId) {\r\n\t\t\t\t\tsetSelectedChat((prev) => (prev ? {...prev, status} : null));\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst chatService = getChatService();\r\n\t\t\t\tconst response = await chatService.updateChatStatus(chatId, { status });\r\n\r\n\t\t\t\tif (response.status === \"success\") {\r\n\t\t\t\t\tconsole.log(\"Estado actualizado correctamente\");\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconsole.error(\"Error en respuesta al actualizar estado:\", response);\r\n\t\t\t\t\tawait fetchChats(); // Revertir cambios\r\n\t\t\t\t\tsetError(response.message || `Error al ${status} el chat`);\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t} catch (err) {\r\n\t\t\t\tconsole.error(`Error al actualizar estado del chat ${chatId}:`, err);\r\n\t\t\t\tawait fetchChats(); // Revertir cambios\r\n\t\t\t\tsetError(extractErrorMessage(err, `Error al ${status} el chat`));\r\n\t\t\t\treturn false;\r\n\t\t\t} finally {\r\n\t\t\t\tisLoadingRef.current = false;\r\n\t\t\t\tsetLoading(false);\r\n\t\t\t}\r\n\t\t},\r\n\t\t[selectedChat, fetchChats, getChatService]\r\n\t);\r\n\r\n\t/**\r\n\t * Iniciar actualización periódica de mensajes\r\n\t */\r\n\tconst startMessagesPolling = useCallback(\r\n\t\t(chatId: number, intervalMs = 15000) => {\r\n\t\t\tif (refreshIntervalRef.current) {\r\n\t\t\t\tclearInterval(refreshIntervalRef.current);\r\n\t\t\t\trefreshIntervalRef.current = null;\r\n\t\t\t}\r\n\r\n\t\t\tchatFetchAttempts.current[chatId] = 0;\r\n\t\t\tconsole.log(`Iniciando polling para chat ${chatId}...`);\r\n\r\n\t\t\trefreshIntervalRef.current = setInterval(() => {\r\n\t\t\t\tif (!isLoadingRef.current && chatId) {\r\n\t\t\t\t\tconsole.log(`Actualizando mensajes del chat ${chatId} (polling)...`);\r\n\t\t\t\t\tfetchChatMessages(chatId);\r\n\t\t\t\t}\r\n\t\t\t}, intervalMs);\r\n\r\n\t\t\treturn () => {\r\n\t\t\t\tif (refreshIntervalRef.current) {\r\n\t\t\t\t\tclearInterval(refreshIntervalRef.current);\r\n\t\t\t\t\trefreshIntervalRef.current = null;\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t},\r\n\t\t[fetchChatMessages]\r\n\t);\r\n\r\n\t/**\r\n\t * Detener el polling de mensajes\r\n\t */\r\n\tconst stopMessagesPolling = useCallback(() => {\r\n\t\tif (refreshIntervalRef.current) {\r\n\t\t\tclearInterval(refreshIntervalRef.current);\r\n\t\t\trefreshIntervalRef.current = null;\r\n\t\t\tconsole.log(\"Polling de mensajes detenido\");\r\n\t\t}\r\n\t}, []);\r\n\r\n\t// Cargar chats al montar el componente\r\n\tuseEffect(() => {\r\n\t\tconst controller = new AbortController();\r\n\r\n\t\tif (user?.id) {\r\n\t\t\tconsole.log(`Valor de isSellerRef.current fijado en: ${isSellerRef.current}`);\r\n\t\t\tgetChatService();\r\n\t\t\tfetchChats();\r\n\t\t}\r\n\r\n\t\treturn () => {\r\n\t\t\tcontroller.abort();\r\n\t\t\tisLoadingRef.current = false;\r\n\t\t\tstopMessagesPolling();\r\n\t\t\tsetChats([]);\r\n\t\t\tsetSelectedChat(null);\r\n\t\t\tsetMessages([]);\r\n\t\t};\r\n\t}, [user?.id, fetchChats, stopMessagesPolling, getChatService]);\r\n\r\n\t/**\r\n\t * Selecciona un chat evitando cambios innecesarios\r\n\t */\r\n\tconst selectChat = useCallback(\r\n\t\t(chat: Chat | null) => {\r\n\t\t\tif (!chat) {\r\n\t\t\t\tif (selectedChat !== null) {\r\n\t\t\t\t\tconsole.log(\"Seleccionando chat: null\");\r\n\t\t\t\t\tsetSelectedChat(null);\r\n\t\t\t\t\tsetMessages([]);\r\n\t\t\t\t\tstopMessagesPolling();\r\n\t\t\t\t}\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// Evitar actualizar si es el mismo chat\r\n\t\t\tif (selectedChat && selectedChat.id === chat.id) {\r\n\t\t\t\tconsole.log(`Chat ${chat.id} ya está seleccionado`);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tconsole.log(\"Seleccionando chat:\", chat);\r\n\t\t\tsetSelectedChat(chat);\r\n\r\n\t\t\tif (chat && chat.id) {\r\n\t\t\t\tfetchChatMessages(chat.id);\r\n\t\t\t\tstartMessagesPolling(chat.id);\r\n\t\t\t}\r\n\t\t},\r\n\t\t[fetchChatMessages, startMessagesPolling, stopMessagesPolling, selectedChat]\r\n\t);\r\n\r\n\t/**\r\n\t * Marca todos los mensajes de un chat como leídos\r\n\t */\r\n\tconst markAllAsRead = useCallback(\r\n\t\tasync (chatId: number): Promise<boolean> => {\r\n\t\t\tif (!chatId) {\r\n\t\t\t\tconsole.error(\"No se puede marcar mensajes como leídos: ID de chat no válido\");\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\ttry {\r\n\t\t\t\tconsole.log(`Marcando todos los mensajes del chat ${chatId} como leídos...`);\r\n\t\t\t\tsetError(null);\r\n\r\n\t\t\t\t// Actualizar optimisticamente\r\n\t\t\t\tsetMessages((prev) =>\r\n\t\t\t\t\tprev.map((msg) => ({\r\n\t\t\t\t\t\t...msg,\r\n\t\t\t\t\t\tisRead: msg.senderId !== user?.id ? true : msg.isRead,\r\n\t\t\t\t\t}))\r\n\t\t\t\t);\r\n\r\n\t\t\t\tsetChats((prev) =>\r\n\t\t\t\t\tprev.map((chat) => {\r\n\t\t\t\t\t\tif (chat.id === chatId) {\r\n\t\t\t\t\t\t\treturn { ...chat, unreadCount: 0 };\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn chat;\r\n\t\t\t\t\t})\r\n\t\t\t\t);\r\n\r\n\t\t\t\tconst chatService = getChatService();\r\n\t\t\t\tconst response = await chatService.markAllMessagesAsRead(chatId);\r\n\r\n\t\t\t\treturn response.status === \"success\";\r\n\t\t\t} catch (err) {\r\n\t\t\t\tconsole.error(`Error al marcar mensajes como leídos en chat ${chatId}:`, err);\r\n\t\t\t\tsetError(extractErrorMessage(err, \"Error al marcar mensajes como leídos\"));\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t},\r\n\t\t[user?.id, getChatService]\r\n\t);\r\n\r\n\t/**\r\n\t * Marca un mensaje específico como leído\r\n\t */\r\n\tconst markMessageAsRead = useCallback(\r\n\t\tasync (chatId: number, messageId: number): Promise<boolean> => {\r\n\t\t\tif (!chatId || !messageId) {\r\n\t\t\t\tconsole.error(\"No se puede marcar mensaje como leído: IDs no válidos\");\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\ttry {\r\n\t\t\t\tconsole.log(`Marcando mensaje ${messageId} del chat ${chatId} como leído...`);\r\n\t\t\t\tsetError(null);\r\n\r\n\t\t\t\t// Actualizar optimistamente\r\n\t\t\t\tsetMessages((prev) =>\r\n\t\t\t\t\tprev.map((msg) => {\r\n\t\t\t\t\t\tif (msg.id === messageId) {\r\n\t\t\t\t\t\t\treturn { ...msg, isRead: true };\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn msg;\r\n\t\t\t\t\t})\r\n\t\t\t\t);\r\n\r\n\t\t\t\tconst chatService = getChatService();\r\n\t\t\t\tconst response = await chatService.markMessageAsRead(chatId, messageId);\r\n\r\n\t\t\t\tif (response.status === \"success\") {\r\n\t\t\t\t\t// Recalcular el conteo de no leídos\r\n\t\t\t\t\tconst unreadCount = messages.filter(\r\n\t\t\t\t\t\t(msg) => !msg.isRead && msg.senderId !== user?.id\r\n\t\t\t\t\t).length;\r\n\r\n\t\t\t\t\tsetChats((prev) =>\r\n\t\t\t\t\t\tprev.map((chat) => {\r\n\t\t\t\t\t\t\tif (chat.id === chatId) {\r\n\t\t\t\t\t\t\t\treturn { ...chat, unreadCount };\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\treturn chat;\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn response.status === \"success\";\r\n\t\t\t} catch (err) {\r\n\t\t\t\tconsole.error(`Error al marcar mensaje ${messageId} como leído:`, err);\r\n\t\t\t\tsetError(extractErrorMessage(err, \"Error al marcar mensaje como leído\"));\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t},\r\n\t\t[user?.id, messages, getChatService]\r\n\t);\r\n\r\n\t/**\r\n\t * Carga más mensajes con paginación\r\n\t */\r\n\tconst loadMoreMessages = useCallback(\r\n\t\tasync (chatId: number, page: number, limit: number = 20): Promise<boolean> => {\r\n\t\t\tif (!chatId || isLoadingRef.current) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\ttry {\r\n\t\t\t\tconsole.log(`Cargando más mensajes para el chat ${chatId} (página ${page})...`);\r\n\t\t\t\tisLoadingRef.current = true;\r\n\t\t\t\tsetLoading(true);\r\n\t\t\t\tsetError(null);\r\n\r\n\t\t\t\tconst chatService = getChatService();\r\n\t\t\t\tconst response = await chatService.getMessages(chatId, page, limit);\r\n\r\n\t\t\t\tif (response.status === \"success\" && response.data.messages) {\r\n\t\t\t\t\tconst newMessages = response.data.messages;\r\n\r\n\t\t\t\t\tsetMessages((prev) => {\r\n\t\t\t\t\t\tconst messageMap = new Map();\r\n\t\t\t\t\t\tprev.forEach((msg) => messageMap.set(msg.id, msg));\r\n\t\t\t\t\t\tnewMessages.forEach((msg) => {\r\n\t\t\t\t\t\t\tif (!messageMap.has(msg.id)) {\r\n\t\t\t\t\t\t\t\tmessageMap.set(msg.id, msg);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\tconst combinedMessages = Array.from(messageMap.values());\r\n\t\t\t\t\t\treturn combinedMessages.sort((a, b) => {\r\n\t\t\t\t\t\t\tconst dateA = new Date(a.createdAt || 0);\r\n\t\t\t\t\t\t\tconst dateB = new Date(b.createdAt || 0);\r\n\t\t\t\t\t\t\treturn dateA.getTime() - dateB.getTime();\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn false;\r\n\t\t\t} catch (err) {\r\n\t\t\t\tconsole.error(`Error al cargar más mensajes para el chat ${chatId}:`, err);\r\n\t\t\t\tsetError(extractErrorMessage(err, \"Error al cargar más mensajes\"));\r\n\t\t\t\treturn false;\r\n\t\t\t} finally {\r\n\t\t\t\tisLoadingRef.current = false;\r\n\t\t\t\tsetLoading(false);\r\n\t\t\t}\r\n\t\t},\r\n\t\t[getChatService]\r\n\t);\r\n\r\n\t/**\r\n\t * Elimina/archiva un chat\r\n\t */\r\n\tconst deleteChat = useCallback(\r\n\t\tasync (chatId: number): Promise<boolean> => {\r\n\t\t\tif (!chatId) {\r\n\t\t\t\tconsole.error(\"No se puede eliminar chat: ID no válido\");\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\ttry {\r\n\t\t\t\tconsole.log(`Eliminando chat ${chatId}...`);\r\n\t\t\t\tsetLoading(true);\r\n\t\t\t\tsetError(null);\r\n\r\n\t\t\t\t// Actualizar optimisticamente\r\n\t\t\t\tsetChats((prev) => prev.filter((chat) => chat.id !== chatId));\r\n\r\n\t\t\t\tif (selectedChat && selectedChat.id === chatId) {\r\n\t\t\t\t\tsetSelectedChat(null);\r\n\t\t\t\t\tsetMessages([]);\r\n\t\t\t\t\tstopMessagesPolling();\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst chatService = getChatService();\r\n\t\t\t\tconst response = await chatService.deleteChat(chatId);\r\n\r\n\t\t\t\treturn response.status === \"success\";\r\n\t\t\t} catch (err) {\r\n\t\t\t\tconsole.error(`Error al eliminar chat ${chatId}:`, err);\r\n\t\t\t\tsetError(extractErrorMessage(err, \"Error al eliminar chat\"));\r\n\t\t\t\t\r\n\t\t\t\t// Revertir cambios si hay error\r\n\t\t\t\tawait fetchChats();\r\n\t\t\t\treturn false;\r\n\t\t\t} finally {\r\n\t\t\t\tsetLoading(false);\r\n\t\t\t}\r\n\t\t},\r\n\t\t[selectedChat, setSelectedChat, stopMessagesPolling, fetchChats, getChatService]\r\n\t);\r\n\r\n\treturn {\r\n\t\tchats,\r\n\t\tselectedChat,\r\n\t\tmessages,\r\n\t\tloading,\r\n\t\terror,\r\n\t\tfetchChats,\r\n\t\tfetchChatMessages,\r\n\t\tsendMessage,\r\n\t\tsendMessageForNewChat,\r\n\t\tcreateChat,\r\n\t\tupdateChatStatus,\r\n\t\tsetSelectedChat: selectChat,\r\n\t\tstartMessagesPolling,\r\n\t\tstopMessagesPolling,\r\n\t\tmarkAllAsRead,\r\n\t\tmarkMessageAsRead,\r\n\t\tloadMoreMessages,\r\n\t\tdeleteChat,\r\n\t};\r\n};\r\n\r\nexport default useChat;"],"names":["ChatService","isSeller","type","params","API_ENDPOINTS","response","expectedFields","field","endpoint","ApiClient","validatedResponse","data","error","chatId","page","limit","responseData","chat","messages","pagination","message","messageId","id","useChat","chats","setChats","useState","selectedChat","setSelectedChat","setMessages","loading","setLoading","setError","isLoadingRef","useRef","chatFetchAttempts","refreshIntervalRef","localChatsRef","isSellerRef","chatServiceRef","user","useAuth","getChatService","useCallback","getSellerIdFromUser","userId","fetchChats","chatService","sellerId","explicitError","userIdError","chatList","err","extractErrorMessage","fetchChatMessages","attempts","responseMessages","prevChats","c","updatedChats","createChat","productId","sendMessageForNewChat","content","sendMessage","updateChatStatus","status","prev","startMessagesPolling","intervalMs","stopMessagesPolling","useEffect","controller","selectChat","markAllAsRead","msg","markMessageAsRead","unreadCount","loadMoreMessages","newMessages","messageMap","a","b","dateA","dateB","deleteChat"],"mappings":"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"}