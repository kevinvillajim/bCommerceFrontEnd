{"version":3,"file":"UserChatPage-DMJfLEjS.js","sources":["../../src/presentation/pages/UserChatPage.tsx"],"sourcesContent":["// src/presentation/pages/UserChatPage.tsx - CORREGIDO\n\nimport React, {useState, useEffect, useRef, useCallback} from \"react\";\nimport {useParams, useNavigate} from \"react-router-dom\";\nimport {MessageSquare, ArrowLeft, RefreshCw} from \"lucide-react\";\nimport {useChat} from \"../hooks/useChat\";\nimport {useAuth} from \"../hooks/useAuth\";\nimport ChatList from \"../components/chat/ChatList\";\nimport ChatMessages from \"../components/chat/ChatMessages\";\nimport ChatHeader from \"../components/chat/ChatHeader\";\nimport MessageForm from \"../components/chat/MessageForm\";\nimport {useChatFilterNotifications} from \"../components/notifications/ChatFilterToast\";\nimport type { Chat } from \"../../core/domain/entities/Chat\";\n\nconst UserChatPage: React.FC = () => {\n\tconst navigate = useNavigate();\n\tconst {chatId: chatIdParam} = useParams<{chatId?: string}>();\n\tconst {user} = useAuth();\n\n\t// Estados para filtros y búsqueda\n\tconst [searchTerm, setSearchTerm] = useState<string>(\"\");\n\tconst [statusFilter, setStatusFilter] = useState<string>(\"all\");\n\tconst [unreadFilter, setUnreadFilter] = useState<boolean>(false);\n\tconst [isMobileView, setIsMobileView] = useState<boolean>(\n\t\twindow.innerWidth < 768\n\t);\n\tconst [showChatList, setShowChatList] = useState<boolean>(!chatIdParam);\n\tconst [isLoadingChat, setIsLoadingChat] = useState<boolean>(false);\n\tconst [loadingMessage, setLoadingMessage] = useState<string>(\n\t\t\"Cargando conversaciones...\"\n\t);\n\n\t// Referencias para evitar bucles infinitos\n\tconst initialLoadComplete = useRef<boolean>(false);\n\tconst chatIdRef = useRef<string | undefined>(chatIdParam);\n\tconst loadAttempts = useRef<number>(0);\n\tconst isInitialNavRef = useRef<boolean>(true);\n\n\t// Hook para notificaciones de filtro\n\tconst {\n\t\tshowUserWarning,\n\t\tNotificationComponent\n\t} = useChatFilterNotifications();\n\n\t// Obtener datos del chat usando el hook personalizado\n\tconst {\n\t\tchats,\n\t\tselectedChat,\n\t\tmessages,\n\t\tloading,\n\t\terror,\n\t\tfetchChats,\n\t\tfetchChatMessages,\n\t\tsendMessage,\n\t\tupdateChatStatus,\n\t\tsetSelectedChat,\n\t\tstartMessagesPolling,\n\t\tstopMessagesPolling,\n\t\tmarkAllAsRead,\n\t} = useChat();\n\n\t// Función para detectar cambios en el tamaño de la ventana\n\tuseEffect(() => {\n\t\tconst handleResize = () => {\n\t\t\tsetIsMobileView(window.innerWidth < 768);\n\t\t};\n\n\t\twindow.addEventListener(\"resize\", handleResize);\n\t\treturn () => window.removeEventListener(\"resize\", handleResize);\n\t}, []);\n\n\t// Cargar chats al iniciar\n\tuseEffect(() => {\n\t\tif (!initialLoadComplete.current && user?.id) {\n\t\t\tconsole.log(\"Cargando lista inicial de chats...\");\n\t\t\tsetIsLoadingChat(true);\n\n\t\t\tfetchChats()\n\t\t\t\t.then((fetchedChats) => {\n\t\t\t\t\tinitialLoadComplete.current = true;\n\t\t\t\t\tsetIsLoadingChat(false);\n\t\t\t\t\tconsole.log(`Lista inicial de ${fetchedChats.length} chats cargada`);\n\n\t\t\t\t\t// Si hay un chatId en la URL, seleccionarlo tras cargar la lista\n\t\t\t\t\tif (chatIdParam && fetchedChats.length > 0) {\n\t\t\t\t\t\tconst chatId = parseInt(chatIdParam, 10);\n\t\t\t\t\t\tconst chat = fetchedChats.find((c) => c.id === chatId);\n\n\t\t\t\t\t\tif (chat) {\n\t\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\t`Chat ${chatId} encontrado en carga inicial, seleccionando...`\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tsetSelectedChat(chat);\n\t\t\t\t\t\t\tsetShowChatList(false);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\t`Chat ${chatId} no encontrado en lista inicial, intentando carga directa...`\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tloadSpecificChat(chatId);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.catch((err) => {\n\t\t\t\t\tconsole.error(\"Error al cargar chats iniciales:\", err);\n\t\t\t\t\tsetIsLoadingChat(false);\n\t\t\t\t\tinitialLoadComplete.current = true;\n\t\t\t\t});\n\t\t}\n\t}, [fetchChats, chatIdParam, setSelectedChat, user?.id]);\n\n\t// Función para cargar un chat específico\n\tconst loadSpecificChat = useCallback(\n\t\tasync (chatId: number) => {\n\t\t\tif (!user?.id) return;\n\n\t\t\tconsole.log(`Intentando cargar chat específico ${chatId}...`);\n\t\t\tsetIsLoadingChat(true);\n\t\t\tsetLoadingMessage(`Cargando conversación #${chatId}...`);\n\t\t\tloadAttempts.current += 1;\n\n\t\t\ttry {\n\t\t\t\t// Buscar el chat en la lista de chats\n\t\t\t\tconst chat = chats.find((c) => c.id === chatId);\n\n\t\t\t\tif (chat) {\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t`Chat ${chatId} encontrado en la lista, seleccionando...`\n\t\t\t\t\t);\n\t\t\t\t\tsetSelectedChat(chat);\n\t\t\t\t\tsetShowChatList(false);\n\t\t\t\t\tstartMessagesPolling(chatId);\n\n\t\t\t\t\t// Marcar como leído\n\t\t\t\t\tif (chat.unreadCount && chat.unreadCount > 0) {\n\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\tmarkAllAsRead(chatId).catch(console.error);\n\t\t\t\t\t\t}, 1000);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t`Chat ${chatId} no encontrado en la lista, cargando desde API...`\n\t\t\t\t\t);\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst result = await fetchChatMessages(chatId);\n\n\t\t\t\t\t\tif (result) {\n\t\t\t\t\t\t\tconsole.log(`Chat ${chatId} cargado correctamente desde API`);\n\t\t\t\t\t\t\tsetShowChatList(false);\n\t\t\t\t\t\t\tstartMessagesPolling(chatId);\n\n\t\t\t\t\t\t\t// Marcar como leído\n\t\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\t\tmarkAllAsRead(chatId).catch(console.error);\n\t\t\t\t\t\t\t}, 1000);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconsole.warn(\n\t\t\t\t\t\t\t\t`Chat ${chatId} no encontrado en API, mostrando lista de chats`\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tif (loadAttempts.current >= 3) {\n\t\t\t\t\t\t\t\tnavigate(\"/chats\", {replace: true});\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tconst updatedChats = await fetchChats();\n\t\t\t\t\t\t\t\tconst updatedChat = updatedChats.find((c) => c.id === chatId);\n\t\t\t\t\t\t\t\tif (updatedChat) {\n\t\t\t\t\t\t\t\t\tsetSelectedChat(updatedChat);\n\t\t\t\t\t\t\t\t\tsetShowChatList(false);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tnavigate(\"/chats\", {replace: true});\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tconsole.error(`Error al cargar chat ${chatId} desde API:`, error);\n\t\t\t\t\t\tnavigate(\"/chats\", {replace: true});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error(`Error al cargar chat ${chatId}:`, error);\n\t\t\t\tnavigate(\"/chats\", {replace: true});\n\t\t\t} finally {\n\t\t\t\tsetIsLoadingChat(false);\n\t\t\t}\n\t\t},\n\t\t[\n\t\t\tchats,\n\t\t\tfetchChatMessages,\n\t\t\tnavigate,\n\t\t\tsetSelectedChat,\n\t\t\tfetchChats,\n\t\t\tstartMessagesPolling,\n\t\t\tmarkAllAsRead,\n\t\t\tuser?.id,\n\t\t]\n\t);\n\n\t// Cargar chat específico cuando cambia el ID en la URL\n\tuseEffect(() => {\n\t\tif (!initialLoadComplete.current || !user?.id) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (isInitialNavRef.current) {\n\t\t\tisInitialNavRef.current = false;\n\t\t\treturn;\n\t\t}\n\n\t\tif (chatIdParam === chatIdRef.current && selectedChat) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Detener cualquier polling activo al cambiar de chat\n\t\tstopMessagesPolling();\n\n\t\t// Actualizar la referencia\n\t\tchatIdRef.current = chatIdParam;\n\t\tloadAttempts.current = 0;\n\n\t\t// Si hay un ID de chat en la URL\n\t\tif (chatIdParam) {\n\t\t\tconst chatId = parseInt(chatIdParam, 10);\n\n\t\t\tif (isNaN(chatId)) {\n\t\t\t\tnavigate(\"/chats\", {replace: true});\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tloadSpecificChat(chatId);\n\t\t} else {\n\t\t\tsetSelectedChat(null);\n\t\t\tsetShowChatList(true);\n\t\t}\n\t}, [\n\t\tchatIdParam,\n\t\tloadSpecificChat,\n\t\tnavigate,\n\t\tselectedChat,\n\t\tsetSelectedChat,\n\t\tstopMessagesPolling,\n\t\tuser?.id,\n\t]);\n\n\t// Filtrar chats según los criterios - OPTIMIZADO con useMemo\n\tconst filteredChats = React.useMemo(() => {\n\t\treturn chats.filter((chat) => {\n\t\t\t// Filtro por estado\n\t\t\tconst matchesStatus =\n\t\t\t\tstatusFilter === \"all\" || chat.status === statusFilter;\n\n\t\t\t// Filtro por mensajes no leídos\n\t\t\tconst matchesUnread = unreadFilter\n\t\t\t\t? (chat.unreadCount ?? 0) > 0\n\t\t\t\t: true;\n\n\t\t\t// Búsqueda por nombre de vendedor o producto\n\t\t\tconst matchesSearch =\n\t\t\t\tsearchTerm === \"\" ||\n\t\t\t\t(chat.product?.name &&\n\t\t\t\t\tchat.product.name.toLowerCase().includes(searchTerm.toLowerCase())) ||\n\t\t\t\t(chat.seller?.storeName &&\n\t\t\t\t\tchat.seller.storeName.toLowerCase().includes(searchTerm.toLowerCase()));\n\n\t\t\treturn matchesStatus && matchesUnread && matchesSearch;\n\t\t});\n\t}, [chats, statusFilter, unreadFilter, searchTerm]);\n\n\t// Seleccionar un chat\n\tconst handleSelectChat = (chat: Chat) => {\n\t\tif (chat && chat.id) {\n\t\t\tconsole.log(`Usuario seleccionó chat ${chat.id}`);\n\n\t\t\t// Detener cualquier polling activo\n\t\t\tstopMessagesPolling();\n\n\t\t\t// Actualizar la URL\n\t\t\tnavigate(`/chats/${chat.id}`, {replace: true});\n\t\t\tchatIdRef.current = String(chat.id);\n\n\t\t\t// Seleccionar chat y cargar mensajes\n\t\t\tsetSelectedChat(chat);\n\n\t\t\t// En móvil, ocultar la lista\n\t\t\tif (isMobileView) {\n\t\t\t\tsetShowChatList(false);\n\t\t\t}\n\n\t\t\t// Marcar como leído\n\t\t\tif (chat.unreadCount && chat.unreadCount > 0) {\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tif (chat.id !== undefined) {\n\t\t\t\t\t\tmarkAllAsRead(chat.id).catch(console.error);\n\t\t\t\t\t}\n\t\t\t\t}, 1000);\n\t\t\t}\n\t\t}\n\t};\n\n\t// Enviar un mensaje - MEJORADO COMO SellerMessagesPage\n\tconst handleSendMessage = async (content: string): Promise<boolean> => {\n\t\tconsole.log(\"Enviando mensaje como usuario...\");\n\t\t\n\t\ttry {\n\t\t\tconst result = await sendMessage(content);\n\t\t\t\n\t\t\tif (result && selectedChat?.id) {\n\t\t\t\t// Recargar mensajes inmediatamente después de enviar exitosamente\n\t\t\t\tawait fetchChatMessages(selectedChat.id);\n\t\t\t}\n\t\t\t\n\t\t\treturn result;\n\t\t} catch (error: any) {\n\t\t\tconsole.error(\"Error al enviar mensaje:\", error);\n\n\t\t\t// Manejar errores específicos del filtro de chat\n\t\t\tif (error?.response?.data?.status === 'error') {\n\t\t\t\tconst errorData = error.response.data;\n\t\t\t\tconst censoredContent = errorData.data?.censored_content;\n\t\t\t\t\n\t\t\t\t// Para usuarios normales: solo advertencia\n\t\t\t\tshowUserWarning(errorData.message, censoredContent);\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\t};\n\n\t// Actualizar estado del chat\n\tconst handleUpdateStatus = async (\n\t\tchatId: number,\n\t\tstatus: \"active\" | \"closed\" | \"archived\"\n\t) => {\n\t\tconsole.log(`Actualizando estado de chat ${chatId} a ${status}...`);\n\t\treturn await updateChatStatus(chatId, status);\n\t};\n\n\t// Volver a la lista en móvil\n\tconst handleBackToList = () => {\n\t\tconsole.log(\"Volviendo a lista de chats\");\n\n\t\t// Detener polling de mensajes\n\t\tstopMessagesPolling();\n\n\t\tsetShowChatList(true);\n\t\tnavigate(\"/chats\", {replace: true});\n\t\tchatIdRef.current = undefined;\n\t};\n\n\t// Refrescar lista de chats\n\tconst refreshChats = () => {\n\t\tconsole.log(\"Refrescando lista de chats\");\n\t\tfetchChats();\n\n\t\t// Si hay un chat seleccionado, recargar sus mensajes\n\t\tif (selectedChat && selectedChat.id) {\n\t\t\tfetchChatMessages(selectedChat.id);\n\t\t}\n\t};\n\n\t// Contenido principal a renderizar\n\tconst renderChatContent = () => {\n\t\t// Si estamos cargando inicialmente y no hay selectedChat\n\t\tif ((loading || isLoadingChat) && !selectedChat) {\n\t\t\treturn (\n\t\t\t\t<div className=\"flex flex-col justify-center items-center h-full\">\n\t\t\t\t\t<div className=\"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-primary-600 mb-4\"></div>\n\t\t\t\t\t<p className=\"text-gray-600\">{loadingMessage}</p>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\n\t\t// Si hay un chat seleccionado\n\t\tif (selectedChat) {\n\t\t\treturn (\n\t\t\t\t<>\n\t\t\t\t\t{/* Encabezado del chat */}\n\t\t\t\t\t<ChatHeader\n\t\t\t\t\t\tchat={selectedChat}\n\t\t\t\t\t\tisSeller={false}\n\t\t\t\t\t\tonUpdateStatus={handleUpdateStatus}\n\t\t\t\t\t\tloading={loading}\n\t\t\t\t\t/>\n\n\t\t\t\t\t{/* Mensajes */}\n\t\t\t\t\t<div className=\"flex-1 overflow-y-auto\">\n\t\t\t\t\t\t<ChatMessages\n\t\t\t\t\t\t\tmessages={messages}\n\t\t\t\t\t\t\tloading={loading}\n\t\t\t\t\t\t\tnoMessagesText=\"No hay mensajes todavía\"\n\t\t\t\t\t\t\tcurrentUserId={user?.id ?? undefined} // ← CORREGIDO: Asegurar que sea 'number | undefined'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t{/* Formulario de mensajes */}\n\t\t\t\t\t<MessageForm\n\t\t\t\t\t\tonSendMessage={handleSendMessage}\n\t\t\t\t\t\tisDisabled={selectedChat.status !== \"active\"}\n\t\t\t\t\t\tdisabledText={\n\t\t\t\t\t\t\tselectedChat.status === \"closed\"\n\t\t\t\t\t\t\t\t? \"Esta conversación está cerrada\"\n\t\t\t\t\t\t\t\t: \"Esta conversación está archivada\"\n\t\t\t\t\t\t}\n\t\t\t\t\t\tisLoading={loading}\n\t\t\t\t\t\tchatId={selectedChat.id} // ← NUEVO: Para indicador de escritura\n\t\t\t\t\t/>\n\t\t\t\t</>\n\t\t\t);\n\t\t}\n\n\t\t// Si no hay chat seleccionado (mensaje de bienvenida)\n\t\treturn (\n\t\t\t<div className=\"flex flex-col items-center justify-center h-full p-4 text-center\">\n\t\t\t\t<div className=\"w-16 h-16 bg-gray-200 rounded-full flex items-center justify-center mb-4\">\n\t\t\t\t\t<MessageSquare className=\"h-8 w-8 text-gray-500\" />\n\t\t\t\t</div>\n\t\t\t\t<h3 className=\"text-lg font-medium text-gray-900\">\n\t\t\t\t\tSelecciona una conversación\n\t\t\t\t</h3>\n\t\t\t\t<p className=\"text-gray-500 mt-2 max-w-md\">\n\t\t\t\t\t{chats.length > 0\n\t\t\t\t\t\t? \"Elige una conversación de la lista para ver los mensajes y responder\"\n\t\t\t\t\t\t: \"No tienes conversaciones activas. Puedes iniciar una desde la página de un producto.\"}\n\t\t\t\t</p>\n\t\t\t</div>\n\t\t);\n\t};\n\n\treturn (\n\t\t<div className=\"container mx-auto p-6 max-w-7xl\">\n\t\t\t<div className=\"mb-6 flex justify-between items-center\">\n\t\t\t\t<div className=\"flex items-center space-x-3\">\n\t\t\t\t\t<div className=\"h-10 w-10 bg-primary-100 rounded-lg flex items-center justify-center\">\n\t\t\t\t\t\t<MessageSquare className=\"w-5 h-5 text-primary-600\" />\n\t\t\t\t\t</div>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<h1 className=\"text-2xl font-bold text-gray-900\">Mis Conversaciones</h1>\n\t\t\t\t\t\t<p className=\"text-sm text-gray-500\">Gestiona tus chats con vendedores</p>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"flex items-center space-x-3\">\n\t\t\t\t\t{isMobileView && selectedChat && !showChatList && (\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tonClick={handleBackToList}\n\t\t\t\t\t\t\tclassName=\"inline-flex items-center px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<ArrowLeft size={16} className=\"mr-2\" />\n\t\t\t\t\t\t\tVolver\n\t\t\t\t\t\t</button>\n\t\t\t\t\t)}\n\t\t\t\t\t<button\n\t\t\t\t\t\tonClick={refreshChats}\n\t\t\t\t\t\tclassName=\"inline-flex items-center px-4 py-2 bg-primary-600 text-white rounded-lg hover:bg-primary-700 transition-colors shadow-sm\"\n\t\t\t\t\t\tdisabled={loading || isLoadingChat}\n\t\t\t\t\t>\n\t\t\t\t\t\t<RefreshCw\n\t\t\t\t\t\t\tsize={16}\n\t\t\t\t\t\t\tclassName={`mr-2 ${loading || isLoadingChat ? \"animate-spin\" : \"\"}`}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\tActualizar\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t{error && (\n\t\t\t\t<div className=\"bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg relative mb-6 flex items-start space-x-3\">\n\t\t\t\t\t<div className=\"flex-shrink-0\">\n\t\t\t\t\t\t<svg className=\"h-5 w-5 text-red-500\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n\t\t\t\t\t\t\t<path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\" clipRule=\"evenodd\" />\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"flex-1\">\n\t\t\t\t\t\t<h3 className=\"text-sm font-medium text-red-800\">Error al cargar conversaciones</h3>\n\t\t\t\t\t\t<p className=\"text-sm text-red-700 mt-1\">{error}</p>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tonClick={refreshChats}\n\t\t\t\t\t\t\tclassName=\"text-sm text-red-700 hover:text-red-900 underline mt-2 inline-block\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tReintentar\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t)}\n\n\t\t\t<div\n\t\t\t\tclassName=\"bg-white rounded-xl shadow-sm border border-gray-200 flex flex-col md:flex-row overflow-hidden\"\n\t\t\t\tstyle={{minHeight: \"75vh\"}}\n\t\t\t>\n\t\t\t\t{/* Lista de chats (visible en escritorio o cuando está activa en móvil) */}\n\t\t\t\t{(!isMobileView || showChatList) && (\n\t\t\t\t\t<div className=\"w-full md:w-1/3 border-r border-gray-200 flex flex-col bg-white\">\n\t\t\t\t\t<ChatList\n\t\t\t\t\tchats={filteredChats}\n\t\t\t\t\tselectedChatId={selectedChat?.id}\n\t\t\t\t\tonSelectChat={handleSelectChat}\n\t\t\t\t\tloading={loading || isLoadingChat}\n\t\t\t\t\tsearchTerm={searchTerm}\n\t\t\t\t\tonSearchChange={setSearchTerm}\n\t\t\t\t\tstatusFilter={statusFilter}\n\t\t\t\t\tonStatusFilterChange={setStatusFilter}\n\t\t\t\t\tunreadFilter={unreadFilter}\n\t\t\t\t\tonUnreadFilterChange={setUnreadFilter}\n\t\t\t\t\tisSeller={false}\n\t\t\t\t\t showTabs={true}\n\t\t\t\t\t />\n\t\t\t\t</div>\n\t\t\t\t)}\n\n\t\t\t\t{/* Área de chat (visible en escritorio o cuando está activa en móvil) */}\n\t\t\t\t{(!isMobileView || !showChatList) && (\n\t\t\t\t\t<div className=\"w-full md:w-2/3 flex flex-col\">\n\t\t\t\t\t\t{renderChatContent()}\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t</div>\n\n\t\t\t{/* Componente de notificaciones flotantes */}\n\t\t\t<NotificationComponent />\n\t\t</div>\n\t);\n};\n\nexport default UserChatPage;"],"names":["UserChatPage","navigate","useNavigate","chatIdParam","useParams","user","useAuth","searchTerm","setSearchTerm","useState","statusFilter","setStatusFilter","unreadFilter","setUnreadFilter","isMobileView","setIsMobileView","showChatList","setShowChatList","isLoadingChat","setIsLoadingChat","loadingMessage","setLoadingMessage","initialLoadComplete","useRef","chatIdRef","loadAttempts","isInitialNavRef","showUserWarning","NotificationComponent","useChatFilterNotifications","chats","selectedChat","messages","loading","error","fetchChats","fetchChatMessages","sendMessage","updateChatStatus","setSelectedChat","startMessagesPolling","stopMessagesPolling","markAllAsRead","useChat","useEffect","handleResize","fetchedChats","chatId","chat","c","loadSpecificChat","err","useCallback","updatedChat","filteredChats","React","matchesStatus","matchesUnread","matchesSearch","handleSelectChat","handleSendMessage","content","result","errorData","censoredContent","handleUpdateStatus","status","handleBackToList","refreshChats","renderChatContent","jsxs","jsx","Fragment","ChatHeader","ChatMessages","MessageForm","MessageSquare","ArrowLeft","RefreshCw","ChatList"],"mappings":"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"}