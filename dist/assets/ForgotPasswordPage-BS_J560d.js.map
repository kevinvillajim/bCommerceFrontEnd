{"version":3,"file":"ForgotPasswordPage-BS_J560d.js","sources":["../../src/presentation/pages/ForgotPasswordPage.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { Link, useNavigate } from 'react-router-dom';\r\nimport axiosInstance from '../../infrastructure/api/axiosConfig';\r\nimport { API_ENDPOINTS } from '../../constants/apiEndpoints';\r\n\r\n/**\r\n * Página de recuperación de contraseña\r\n * Ofrece dos opciones: por correo electrónico o por token\r\n */\r\nconst ForgotPasswordPage: React.FC = () => {\r\n  const navigate = useNavigate();\r\n  \r\n  // Estados para ambos métodos\r\n  const [method, setMethod] = useState<'email' | 'token'>('email');\r\n  const [emailForReset, setEmailForReset] = useState('');\r\n  const [emailForToken, setEmailForToken] = useState('');\r\n  const [token, setToken] = useState('');\r\n  const [tokenRequested, setTokenRequested] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [success, setSuccess] = useState<string | null>(null);\r\n\r\n  // Manejar la solicitud por correo electrónico\r\n  const handleEmailReset = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    \r\n    if (!emailForReset.trim() || !/\\S+@\\S+\\.\\S+/.test(emailForReset)) {\r\n      setError('Por favor ingresa un correo electrónico válido');\r\n      return;\r\n    }\r\n    \r\n    setLoading(true);\r\n    setError(null);\r\n    setSuccess(null);\r\n    \r\n    try {\r\n      const response = await axiosInstance.post(API_ENDPOINTS.AUTH.FORGOT_PASSWORD_EMAIL, { email: emailForReset });\r\n      \r\n      if (response.data?.success || response.status === 200) {\r\n        setSuccess(\r\n          'Se ha enviado un correo electrónico con instrucciones para recuperar tu contraseña. ' +\r\n          'Por favor revisa tu bandeja de entrada.'\r\n        );\r\n      } else {\r\n        setError('No se pudo procesar la solicitud. Inténtalo de nuevo.');\r\n      }\r\n    } catch (err: any) {\r\n      console.error('Error al solicitar recuperación por email:', err);\r\n      \r\n      if (err.response?.status === 422) {\r\n        setError('Correo electrónico inválido o no registrado');\r\n      } else if (err.response?.data?.message) {\r\n        setError(err.response.data.message);\r\n      } else {\r\n        setError('Error al procesar la solicitud. Inténtalo de nuevo más tarde.');\r\n      }\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Manejar la solicitud por token\r\n  const handleTokenRequest = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    \r\n    if (!emailForToken.trim() || !/\\S+@\\S+\\.\\S+/.test(emailForToken)) {\r\n      setError('Por favor ingresa un correo electrónico válido');\r\n      return;\r\n    }\r\n    \r\n    setLoading(true);\r\n    setError(null);\r\n    setSuccess(null);\r\n    \r\n    try {\r\n      // Solicitar un token de recuperación\r\n      const response = await axiosInstance.post(API_ENDPOINTS.AUTH.FORGOT_PASSWORD_TOKEN, { email: emailForToken });\r\n      \r\n      if (response.status === 200) {\r\n        setSuccess('Se ha enviado un token de recuperación a los medios de contacto registrados.');\r\n        setTokenRequested(true);\r\n      } else {\r\n        setError('No se pudo generar el token. Inténtalo de nuevo.');\r\n      }\r\n    } catch (err: any) {\r\n      console.error('Error al solicitar token:', err);\r\n      \r\n      if (err.response?.status === 422) {\r\n        setError('Correo electrónico inválido o no registrado');\r\n      } else if (err.response?.data?.message) {\r\n        setError(err.response.data.message);\r\n      } else {\r\n        setError('Error al procesar la solicitud. Inténtalo de nuevo más tarde.');\r\n      }\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n  \r\n  // Manejar la verificación del token\r\n  const handleTokenVerify = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    \r\n    if (!token.trim()) {\r\n      setError('Por favor ingresa el token de recuperación');\r\n      return;\r\n    }\r\n    \r\n    setLoading(true);\r\n    setError(null);\r\n    setSuccess(null);\r\n    \r\n    try {\r\n      // Verificar el token antes de redireccionar\r\n      const response = await axiosInstance.post(`${API_ENDPOINTS.AUTH.RESET_PASSWORD}/validate`, { \r\n        token,\r\n        email: emailForToken \r\n      });\r\n      \r\n      if (response.status === 200) {\r\n        setSuccess('Token válido. Serás redirigido para crear una nueva contraseña.');\r\n        \r\n        // Redirigir a la página de cambio de contraseña\r\n        setTimeout(() => {\r\n          navigate('/reset-password', { \r\n            state: { \r\n              token,\r\n              email: emailForToken \r\n            } \r\n          });\r\n        }, 2000);\r\n      } else {\r\n        setError('Token inválido o expirado. Inténtalo de nuevo.');\r\n      }\r\n    } catch (err: any) {\r\n      console.error('Error al validar token:', err);\r\n      \r\n      if (err.response?.status === 422) {\r\n        setError('Token inválido o expirado');\r\n      } else if (err.response?.data?.message) {\r\n        setError(err.response.data.message);\r\n      } else {\r\n        setError('Error al procesar la solicitud. Inténtalo de nuevo más tarde.');\r\n      }\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"min-h-[80vh] flex items-center justify-center py-12 px-4\">\r\n      <div className=\"max-w-md w-full space-y-8 bg-white p-8 rounded-lg shadow-lg\">\r\n        <div className=\"text-center\">\r\n          <h2 className=\"text-3xl font-extrabold text-gray-900\">\r\n            Recupera tu contraseña\r\n          </h2>\r\n          <p className=\"mt-2 text-sm text-gray-600\">\r\n            Elige el método que prefieras para recuperar tu acceso\r\n          </p>\r\n        </div>\r\n        \r\n        {/* Toggle de métodos */}\r\n        <div className=\"flex border border-gray-200 rounded-md overflow-hidden\">\r\n          <button\r\n            type=\"button\"\r\n            className={`flex-1 py-3 px-4 text-center font-medium ${\r\n              method === 'email' \r\n                ? 'bg-primary-600 text-white' \r\n                : 'bg-white text-gray-700 hover:bg-gray-50'\r\n            }`}\r\n            onClick={() => setMethod('email')}\r\n          >\r\n            Por correo electrónico\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            className={`flex-1 py-3 px-4 text-center font-medium ${\r\n              method === 'token' \r\n                ? 'bg-primary-600 text-white' \r\n                : 'bg-white text-gray-700 hover:bg-gray-50'\r\n            }`}\r\n            onClick={() => setMethod('token')}\r\n          >\r\n            Por token\r\n          </button>\r\n        </div>\r\n        \r\n        {/* Mostrar mensajes de error/éxito */}\r\n        {error && (\r\n          <div className=\"bg-red-50 text-red-700 p-3 rounded-md text-sm\">\r\n            {error}\r\n          </div>\r\n        )}\r\n        \r\n        {success && (\r\n          <div className=\"bg-green-50 text-green-700 p-3 rounded-md text-sm\">\r\n            {success}\r\n          </div>\r\n        )}\r\n        \r\n        {/* Formulario para método por email */}\r\n        {method === 'email' && (\r\n          <form className=\"mt-8 space-y-6\" onSubmit={handleEmailReset}>\r\n            <div>\r\n              <label htmlFor=\"emailForReset\" className=\"block text-sm font-medium text-gray-700\">\r\n                Correo electrónico\r\n              </label>\r\n              <input\r\n                id=\"emailForReset\"\r\n                name=\"emailForReset\"\r\n                type=\"email\"\r\n                autoComplete=\"email\"\r\n                required\r\n                className=\"mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-3 focus:outline-none focus:ring-primary-500 focus:border-primary-500\"\r\n                value={emailForReset}\r\n                onChange={(e) => setEmailForReset(e.target.value)}\r\n                placeholder=\"tu@email.com\"\r\n              />\r\n              <p className=\"mt-2 text-sm text-gray-500\">\r\n                Te enviaremos un enlace a tu correo electrónico para que puedas crear una nueva contraseña.\r\n              </p>\r\n            </div>\r\n            \r\n            <div className=\"flex justify-between\">\r\n              <Link\r\n                to=\"/login\"\r\n                className=\"text-sm font-medium text-primary-600 hover:text-primary-500\"\r\n              >\r\n                Volver al inicio de sesión\r\n              </Link>\r\n              \r\n              <button\r\n                type=\"submit\"\r\n                disabled={loading}\r\n                className=\"inline-flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 disabled:opacity-50 disabled:cursor-not-allowed\"\r\n              >\r\n                {loading ? (\r\n                  <span className=\"flex items-center\">\r\n                    <svg className=\"animate-spin -ml-1 mr-2 h-4 w-4 text-white\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\r\n                      <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\r\n                      <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\r\n                    </svg>\r\n                    Enviando...\r\n                  </span>\r\n                ) : 'Enviar enlace'}\r\n              </button>\r\n            </div>\r\n          </form>\r\n        )}\r\n        \r\n        {/* Formulario para método por token */}\r\n        {method === 'token' && (\r\n          <>\r\n            {!tokenRequested ? (\r\n              // Paso 1: Formulario para solicitar el token\r\n              <form className=\"mt-8 space-y-6\" onSubmit={handleTokenRequest}>\r\n                <div>\r\n                  <label htmlFor=\"emailForToken\" className=\"block text-sm font-medium text-gray-700\">\r\n                    Correo electrónico\r\n                  </label>\r\n                  <input\r\n                    id=\"emailForToken\"\r\n                    name=\"emailForToken\"\r\n                    type=\"email\"\r\n                    autoComplete=\"email\"\r\n                    required\r\n                    className=\"mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-3 focus:outline-none focus:ring-primary-500 focus:border-primary-500\"\r\n                    value={emailForToken}\r\n                    onChange={(e) => setEmailForToken(e.target.value)}\r\n                    placeholder=\"tu@email.com\"\r\n                  />\r\n                  <p className=\"mt-2 text-sm text-gray-500\">\r\n                    Ingresa tu correo electrónico para recibir un token de recuperación en tus medios de contacto registrados.\r\n                  </p>\r\n                </div>\r\n                \r\n                <div className=\"flex justify-between\">\r\n                  <Link\r\n                    to=\"/login\"\r\n                    className=\"text-sm font-medium text-primary-600 hover:text-primary-500\"\r\n                  >\r\n                    Volver al inicio de sesión\r\n                  </Link>\r\n                  \r\n                  <button\r\n                    type=\"submit\"\r\n                    disabled={loading}\r\n                    className=\"inline-flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 disabled:opacity-50 disabled:cursor-not-allowed\"\r\n                  >\r\n                    {loading ? (\r\n                      <span className=\"flex items-center\">\r\n                        <svg className=\"animate-spin -ml-1 mr-2 h-4 w-4 text-white\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\r\n                          <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\r\n                          <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\r\n                        </svg>\r\n                        Solicitando...\r\n                      </span>\r\n                    ) : 'Solicitar token'}\r\n                  </button>\r\n                </div>\r\n              </form>\r\n            ) : (\r\n              // Paso 2: Formulario para ingresar el token recibido\r\n              <form className=\"mt-8 space-y-6\" onSubmit={handleTokenVerify}>\r\n                <div>\r\n                  <label htmlFor=\"token\" className=\"block text-sm font-medium text-gray-700\">\r\n                    Token de recuperación\r\n                  </label>\r\n                  <input\r\n                    id=\"token\"\r\n                    name=\"token\"\r\n                    type=\"text\"\r\n                    autoComplete=\"off\"\r\n                    required\r\n                    className=\"mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-3 focus:outline-none focus:ring-primary-500 focus:border-primary-500\"\r\n                    value={token}\r\n                    onChange={(e) => setToken(e.target.value)}\r\n                    placeholder=\"Ingresa el token recibido\"\r\n                  />\r\n                  <p className=\"mt-2 text-sm text-gray-500\">\r\n                    Ingresa el token de recuperación que has recibido en tus medios de contacto registrados.\r\n                  </p>\r\n                </div>\r\n                \r\n                <div className=\"flex justify-between\">\r\n                  <button\r\n                    type=\"button\"\r\n                    onClick={() => setTokenRequested(false)}\r\n                    className=\"text-sm font-medium text-primary-600 hover:text-primary-500\"\r\n                  >\r\n                    Solicitar otro token\r\n                  </button>\r\n                  \r\n                  <button\r\n                    type=\"submit\"\r\n                    disabled={loading}\r\n                    className=\"inline-flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 disabled:opacity-50 disabled:cursor-not-allowed\"\r\n                  >\r\n                    {loading ? (\r\n                      <span className=\"flex items-center\">\r\n                        <svg className=\"animate-spin -ml-1 mr-2 h-4 w-4 text-white\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\r\n                          <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\r\n                          <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\r\n                        </svg>\r\n                        Verificando...\r\n                      </span>\r\n                    ) : 'Verificar token'}\r\n                  </button>\r\n                </div>\r\n              </form>\r\n            )}\r\n          </>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ForgotPasswordPage;"],"names":["ForgotPasswordPage","navigate","useNavigate","method","setMethod","useState","emailForReset","setEmailForReset","emailForToken","setEmailForToken","token","setToken","tokenRequested","setTokenRequested","loading","setLoading","error","setError","success","setSuccess","handleEmailReset","e","response","axiosInstance","API_ENDPOINTS","err","handleTokenRequest","handleTokenVerify","jsxs","jsx","Link","Fragment"],"mappings":"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"}