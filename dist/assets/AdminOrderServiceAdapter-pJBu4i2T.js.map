{"version":3,"file":"AdminOrderServiceAdapter-pJBu4i2T.js","sources":["../../src/core/services/AdminOrderService.ts","../../src/core/adapters/AdminOrderServiceAdapter.ts"],"sourcesContent":["import {API_ENDPOINTS} from \"../../constants/apiEndpoints\";\r\nimport ApiClient from \"../../infrastructure/api/apiClient\";\r\nimport type {\r\n\tOrder,\r\n\tOrderDetail,\r\n\tOrderListResponse,\r\n\tOrderStatusUpdateData,\r\n} from \"../domain/entities/Order\";\r\n\r\n/**\r\n * Servicio específico para gestión de órdenes desde el panel de administración\r\n */\r\nexport class AdminOrderService {\r\n\t/**\r\n\t * Obtiene todas las órdenes con filtros opcionales\r\n\t */\r\n\tasync getAdminOrders(filters?: {\r\n\t\tstatus?: string;\r\n\t\tpaymentStatus?: string;\r\n\t\tdateFrom?: string;\r\n\t\tdateTo?: string;\r\n\t\tsearch?: string;\r\n\t\tsellerId?: number;\r\n\t\tpage?: number;\r\n\t\tlimit?: number;\r\n\t}): Promise<OrderListResponse> {\r\n\t\ttry {\r\n\t\t\tconsole.log(\r\n\t\t\t\t\"AdminOrderService: Obteniendo órdenes con filtros:\",\r\n\t\t\t\tfilters\r\n\t\t\t);\r\n\r\n\t\t\t// Usamos el endpoint específico para administradores\r\n\t\t\tconst response = await ApiClient.get<any>(\r\n\t\t\t\tAPI_ENDPOINTS.ADMIN.ORDERS,\r\n\t\t\t\tfilters\r\n\t\t\t);\r\n\r\n\t\t\tconsole.log(\"AdminOrderService: Respuesta de órdenes:\", response);\r\n\r\n\t\t\t// Verificar la estructura de la respuesta\r\n\t\t\tconst orders = response?.data || [];\r\n\t\t\tconst pagination = response?.pagination || {\r\n\t\t\t\tcurrentPage: 1,\r\n\t\t\t\ttotalPages: 1,\r\n\t\t\t\ttotalItems: 0,\r\n\t\t\t\titemsPerPage: 10,\r\n\t\t\t};\r\n\r\n\t\t\treturn {\r\n\t\t\t\tdata: orders,\r\n\t\t\t\tmeta: {\r\n\t\t\t\t\ttotal: pagination.totalItems,\r\n\t\t\t\t\tper_page: pagination.itemsPerPage,\r\n\t\t\t\t\tcurrent_page: pagination.currentPage,\r\n\t\t\t\t\tlast_page: pagination.totalPages,\r\n\t\t\t\t},\r\n\t\t\t};\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\"AdminOrderService: Error al obtener órdenes:\", error);\r\n\t\t\t// Devolver objeto vacío en caso de error\r\n\t\t\treturn {\r\n\t\t\t\tdata: [],\r\n\t\t\t\tmeta: {\r\n\t\t\t\t\ttotal: 0,\r\n\t\t\t\t\tper_page: 10,\r\n\t\t\t\t\tcurrent_page: 1,\r\n\t\t\t\t\tlast_page: 1,\r\n\t\t\t\t},\r\n\t\t\t};\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Obtiene el detalle de una orden específica\r\n\t */\r\n\tasync getOrderDetails(orderId: number): Promise<OrderDetail> {\r\n\t\ttry {\r\n\t\t\tconsole.log(`AdminOrderService: Obteniendo detalle de orden ${orderId}`);\r\n\r\n\t\t\t// Usar el endpoint correcto para obtener los detalles de la orden\r\n\t\t\tconst response = await ApiClient.get<any>(\r\n\t\t\t\tAPI_ENDPOINTS.ADMIN.ORDER_DETAIL(orderId)\r\n\t\t\t);\r\n\r\n\t\t\tconsole.log(\r\n\t\t\t\t`AdminOrderService: Respuesta para orden ${orderId}:`,\r\n\t\t\t\tresponse\r\n\t\t\t);\r\n\r\n\t\t\t// Verificar si hay datos en la respuesta\r\n\t\t\tif (!response || !response.data) {\r\n\t\t\t\tthrow new Error(\"Respuesta vacía al obtener detalle de orden\");\r\n\t\t\t}\r\n\r\n\t\t\treturn response.data;\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\r\n\t\t\t\t`AdminOrderService: Error al obtener detalle de orden ${orderId}:`,\r\n\t\t\t\terror\r\n\t\t\t);\r\n\t\t\tthrow error;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Actualiza el estado de una orden\r\n\t */\r\n\tasync updateOrderStatus(\r\n\t\torderId: number,\r\n\t\tdata: OrderStatusUpdateData\r\n\t): Promise<Order> {\r\n\t\ttry {\r\n\t\t\tconsole.log(\r\n\t\t\t\t`AdminOrderService: Actualizando estado de orden ${orderId} a ${data.status}`\r\n\t\t\t);\r\n\r\n\t\t\tconst response = await ApiClient.patch<any>(\r\n\t\t\t\tAPI_ENDPOINTS.ADMIN.UPDATE_ORDER_STATUS(orderId),\r\n\t\t\t\tdata\r\n\t\t\t);\r\n\r\n\t\t\tconsole.log(\r\n\t\t\t\t`AdminOrderService: Respuesta de actualización para orden ${orderId}:`,\r\n\t\t\t\tresponse\r\n\t\t\t);\r\n\r\n\t\t\t// Verificar si hay datos en la respuesta\r\n\t\t\tif (!response || !response.data) {\r\n\t\t\t\tthrow new Error(\"Respuesta vacía al actualizar estado de orden\");\r\n\t\t\t}\r\n\r\n\t\t\treturn response.data;\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\r\n\t\t\t\t`AdminOrderService: Error al actualizar estado de orden ${orderId}:`,\r\n\t\t\t\terror\r\n\t\t\t);\r\n\t\t\tthrow error;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Cancela una orden\r\n\t */\r\n\tasync cancelOrder(orderId: number, reason: string = \"\"): Promise<boolean> {\r\n\t\ttry {\r\n\t\t\tconsole.log(`AdminOrderService: Cancelando orden ${orderId}`);\r\n\r\n\t\t\tconst response = await ApiClient.post<any>(\r\n\t\t\t\tAPI_ENDPOINTS.ADMIN.CANCEL_ORDER(orderId),\r\n\t\t\t\t{reason}\r\n\t\t\t);\r\n\r\n\t\t\tconsole.log(\r\n\t\t\t\t`AdminOrderService: Respuesta de cancelar orden ${orderId}:`,\r\n\t\t\t\tresponse\r\n\t\t\t);\r\n\r\n\t\t\t// Verificar el resultado\r\n\t\t\treturn response?.success || false;\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\r\n\t\t\t\t`AdminOrderService: Error al cancelar orden ${orderId}:`,\r\n\t\t\t\terror\r\n\t\t\t);\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Actualiza la información de envío de una orden\r\n\t */\r\n\tasync updateShippingInfo(\r\n\t\torderId: number,\r\n\t\tshippingInfo: any\r\n\t): Promise<boolean> {\r\n\t\ttry {\r\n\t\t\tconsole.log(\r\n\t\t\t\t`AdminOrderService: Actualizando información de envío para orden ${orderId}`\r\n\t\t\t);\r\n\r\n\t\t\tconst response = await ApiClient.patch<any>(\r\n\t\t\t\tAPI_ENDPOINTS.ADMIN.UPDATE_SHIPPING(orderId),\r\n\t\t\t\tshippingInfo\r\n\t\t\t);\r\n\r\n\t\t\tconsole.log(\r\n\t\t\t\t`AdminOrderService: Respuesta de actualización de envío para ${orderId}:`,\r\n\t\t\t\tresponse\r\n\t\t\t);\r\n\r\n\t\t\t// Verificar el resultado\r\n\t\t\treturn response?.success || false;\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\r\n\t\t\t\t`AdminOrderService: Error al actualizar envío de orden ${orderId}:`,\r\n\t\t\t\terror\r\n\t\t\t);\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Obtiene estadísticas generales de órdenes\r\n\t */\r\n\tasync getOrderStats(): Promise<any> {\r\n\t\ttry {\r\n\t\t\tconsole.log(\"AdminOrderService: Obteniendo estadísticas de órdenes\");\r\n\r\n\t\t\tconst response = await ApiClient.get<any>(\r\n\t\t\t\tAPI_ENDPOINTS.ADMIN.ORDER_STATS\r\n\t\t\t);\r\n\r\n\t\t\tconsole.log(\"AdminOrderService: Respuesta de estadísticas:\", response);\r\n\r\n\t\t\t// Verificar si hay datos en la respuesta\r\n\t\t\tif (!response || !response.data) {\r\n\t\t\t\tthrow new Error(\"Respuesta vacía al obtener estadísticas\");\r\n\t\t\t}\r\n\r\n\t\t\treturn response.data;\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\"AdminOrderService: Error al obtener estadísticas:\", error);\r\n\t\t\t// Devolver objeto básico en caso de error\r\n\t\t\treturn {\r\n\t\t\t\ttotalOrders: 0,\r\n\t\t\t\tpendingOrders: 0,\r\n\t\t\t\tprocessingOrders: 0,\r\n\t\t\t\tshippedOrders: 0,\r\n\t\t\t\tdeliveredOrders: 0,\r\n\t\t\t\tcancelledOrders: 0,\r\n\t\t\t\ttotalSales: 0,\r\n\t\t\t};\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default AdminOrderService;\r\n","import {AdminOrderService} from \"../services/AdminOrderService\";\r\nimport type {OrderStatus} from \"../domain/entities/Order\";\r\n\r\n// Interface para las estadísticas en la UI\r\nexport interface AdminOrderStatUI {\r\n\tlabel: string;\r\n\tvalue: number | string;\r\n\ticon?: React.ReactNode;\r\n\tcolor: string;\r\n\tisCurrency?: boolean;\r\n}\r\n\r\n// Interface para la respuesta adaptada para la UI administrativa\r\nexport interface AdminOrderUI {\r\n\tid: number;\r\n\torderNumber: string;\r\n\tdate: string;\r\n\tcustomer: {\r\n\t\tid: number;\r\n\t\tname: string;\r\n\t\temail: string;\r\n\t};\r\n\tseller: {\r\n\t\tid: number;\r\n\t\tname: string;\r\n\t};\r\n\ttotal: number;\r\n\tstatus: OrderStatus;\r\n\tpaymentStatus: string;\r\n\tpaymentMethod: string;\r\n\titems: Array<{\r\n\t\tid: number;\r\n\t\tproductId: number;\r\n\t\tname: string;\r\n\t\tquantity: number;\r\n\t\tprice: number;\r\n\t\tsubtotal: number;\r\n\t\timage?: string;\r\n\t}>;\r\n\tshippingData?: {\r\n\t\taddress: string;\r\n\t\tcity: string;\r\n\t\tstate: string;\r\n\t\tcountry: string;\r\n\t\tpostalCode: string;\r\n\t\tphone?: string;\r\n\t\tname?: string;\r\n\t};\r\n}\r\n\r\n/**\r\n * Adaptador para servicios de órdenes administrativas\r\n */\r\nexport class AdminOrderServiceAdapter {\r\n\tprivate adminOrderService: AdminOrderService;\r\n\r\n\tconstructor() {\r\n\t\tthis.adminOrderService = new AdminOrderService();\r\n\t}\r\n\r\n\t/**\r\n\t * Obtiene las órdenes para la vista de administración\r\n\t * @param filters Filtros para la consulta\r\n\t * @returns Órdenes adaptadas para la UI y información de paginación\r\n\t */\r\n\tasync getAdminOrders(filters?: {\r\n\t\tstatus?: string;\r\n\t\tpaymentStatus?: string;\r\n\t\tdateFrom?: string;\r\n\t\tdateTo?: string;\r\n\t\tsearch?: string;\r\n\t\tsellerId?: number | null;\r\n\t\tpage?: number;\r\n\t\tlimit?: number;\r\n\t}): Promise<{\r\n\t\torders: AdminOrderUI[];\r\n\t\tpagination: {\r\n\t\t\tcurrentPage: number;\r\n\t\t\ttotalPages: number;\r\n\t\t\ttotalItems: number;\r\n\t\t\titemsPerPage: number;\r\n\t\t};\r\n\t}> {\r\n\t\ttry {\r\n\t\t\t// Preparar filtros para la API\r\n\t\t\tconst apiFilters: any = {...filters};\r\n\r\n\t\t\t// Convertir valores especiales\r\n\t\t\tif (filters?.status === \"all\") {\r\n\t\t\t\tdelete apiFilters.status;\r\n\t\t\t}\r\n\r\n\t\t\tif (filters?.paymentStatus === \"all\") {\r\n\t\t\t\tdelete apiFilters.paymentStatus;\r\n\t\t\t}\r\n\r\n\t\t\tif (filters?.sellerId === null) {\r\n\t\t\t\tdelete apiFilters.sellerId;\r\n\t\t\t}\r\n\r\n\t\t\t// Usar el servicio para obtener órdenes\r\n\t\t\tconst response = await this.adminOrderService.getAdminOrders(apiFilters);\r\n\r\n\t\t\t// Adaptar las órdenes al formato requerido por la UI\r\n\t\t\tconst orders: AdminOrderUI[] = response.data.map((order: any) =>\r\n\t\t\t\tthis.adaptOrderToUI(order)\r\n\t\t\t);\r\n\r\n\t\t\t// Adaptar información de paginación\r\n\t\t\tconst pagination = {\r\n\t\t\t\tcurrentPage: response.meta.current_page,\r\n\t\t\t\ttotalPages: response.meta.last_page,\r\n\t\t\t\ttotalItems: response.meta.total,\r\n\t\t\t\titemsPerPage: response.meta.per_page,\r\n\t\t\t};\r\n\r\n\t\t\treturn {orders, pagination};\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\"Error en AdminOrderServiceAdapter.getAdminOrders:\", error);\r\n\t\t\treturn {\r\n\t\t\t\torders: [],\r\n\t\t\t\tpagination: {\r\n\t\t\t\t\tcurrentPage: 1,\r\n\t\t\t\t\ttotalPages: 1,\r\n\t\t\t\t\ttotalItems: 0,\r\n\t\t\t\t\titemsPerPage: 10,\r\n\t\t\t\t},\r\n\t\t\t};\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Obtiene los detalles de una orden\r\n\t * @param orderId ID de la orden\r\n\t * @returns Detalles de la orden adaptados para la UI\r\n\t */\r\n\tasync getOrderDetails(orderId: number): Promise<AdminOrderUI | null> {\r\n\t\ttry {\r\n\t\t\tconst orderDetails =\r\n\t\t\t\tawait this.adminOrderService.getOrderDetails(orderId);\r\n\t\t\treturn this.adaptOrderToUI(orderDetails);\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(`Error al obtener detalles de la orden ${orderId}:`, error);\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Actualiza el estado de una orden\r\n\t * @param orderId ID de la orden\r\n\t * @param status Nuevo estado\r\n\t * @returns true si se actualizó correctamente\r\n\t */\r\n\tasync updateOrderStatus(\r\n\t\torderId: number,\r\n\t\tstatus: OrderStatus\r\n\t): Promise<boolean> {\r\n\t\ttry {\r\n\t\t\tawait this.adminOrderService.updateOrderStatus(orderId, {status});\r\n\t\t\treturn true;\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\r\n\t\t\t\t`Error al actualizar estado de la orden ${orderId}:`,\r\n\t\t\t\terror\r\n\t\t\t);\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Cancela una orden\r\n\t * @param orderId ID de la orden\r\n\t * @param reason Razón de la cancelación\r\n\t * @returns true si se canceló correctamente\r\n\t */\r\n\tasync cancelOrder(orderId: number, reason: string = \"\"): Promise<boolean> {\r\n\t\ttry {\r\n\t\t\treturn await this.adminOrderService.cancelOrder(orderId, reason);\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(`Error al cancelar la orden ${orderId}:`, error);\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Obtiene estadísticas de órdenes para el dashboard\r\n\t * @returns Estadísticas formateadas para la UI\r\n\t */\r\n\tasync getOrderStats(): Promise<AdminOrderStatUI[]> {\r\n\t\ttry {\r\n\t\t\tconst stats = await this.adminOrderService.getOrderStats();\r\n\r\n\t\t\treturn [\r\n\t\t\t\t{\r\n\t\t\t\t\tlabel: \"Total Pedidos\",\r\n\t\t\t\t\tvalue: stats.totalOrders,\r\n\t\t\t\t\tcolor: \"blue\",\r\n\t\t\t\t\tisCurrency: false,\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tlabel: \"Pendientes\",\r\n\t\t\t\t\tvalue: stats.pendingOrders,\r\n\t\t\t\t\tcolor: \"yellow\",\r\n\t\t\t\t\tisCurrency: false,\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tlabel: \"En Proceso\",\r\n\t\t\t\t\tvalue: stats.processingOrders,\r\n\t\t\t\t\tcolor: \"blue\",\r\n\t\t\t\t\tisCurrency: false,\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tlabel: \"Enviados\",\r\n\t\t\t\t\tvalue: stats.shippedOrders,\r\n\t\t\t\t\tcolor: \"indigo\",\r\n\t\t\t\t\tisCurrency: false,\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tlabel: \"Entregados\",\r\n\t\t\t\t\tvalue: stats.deliveredOrders,\r\n\t\t\t\t\tcolor: \"purple\",\r\n\t\t\t\t\tisCurrency: false,\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tlabel: \"Completados\",\r\n\t\t\t\t\tvalue: stats.completedOrders,\r\n\t\t\t\t\tcolor: \"green\",\r\n\t\t\t\t\tisCurrency: false,\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tlabel: \"Cancelados\",\r\n\t\t\t\t\tvalue: stats.cancelledOrders,\r\n\t\t\t\t\tcolor: \"red\",\r\n\t\t\t\t\tisCurrency: false,\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tlabel: \"Total Ventas\",\r\n\t\t\t\t\tvalue: stats.totalSales,\r\n\t\t\t\t\tcolor: \"green\",\r\n\t\t\t\t\tisCurrency: true,\r\n\t\t\t\t},\r\n\t\t\t];\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\"Error en AdminOrderServiceAdapter.getOrderStats:\", error);\r\n\t\t\treturn [];\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Adapta una orden al formato requerido por la UI\r\n\t * @param order Orden desde el API\r\n\t * @returns Orden formateada para la UI administrativa\r\n\t */\r\n\tprivate adaptOrderToUI(order: any): AdminOrderUI {\r\n\t\t// Extraer información del cliente\r\n\t\tconst customerName =\r\n\t\t\torder.user_name ||\r\n\t\t\t(order.user ? order.user.name : \"Cliente\") ||\r\n\t\t\t(order.customer ? order.customer.name : \"Cliente\");\r\n\r\n\t\tconst customerEmail =\r\n\t\t\torder.user_email ||\r\n\t\t\t(order.user ? order.user.email : \"\") ||\r\n\t\t\t(order.customer ? order.customer.email : \"\");\r\n\r\n\t\t// Extraer información del vendedor\r\n\t\tconst sellerName =\r\n\t\t\torder.seller_name ||\r\n\t\t\t(order.seller ? order.seller.name : \"Vendedor\") ||\r\n\t\t\t\"Vendedor\";\r\n\r\n\t\t// Procesar items con el formato esperado\r\n\t\tconst items = Array.isArray(order.items)\r\n\t\t\t? order.items.map((item: any) => ({\r\n\t\t\t\t\tid: item.id || 0,\r\n\t\t\t\t\tproductId: item.product_id || item.productId || 0,\r\n\t\t\t\t\tname:\r\n\t\t\t\t\t\titem.product_name ||\r\n\t\t\t\t\t\t(item.product ? item.product.name : \"Producto\"),\r\n\t\t\t\t\tquantity: item.quantity || 0,\r\n\t\t\t\t\tprice: item.price || 0,\r\n\t\t\t\t\tsubtotal: item.subtotal || 0,\r\n\t\t\t\t\timage:\r\n\t\t\t\t\t\titem.product_image ||\r\n\t\t\t\t\t\t(item.product ? item.product.image : undefined),\r\n\t\t\t\t}))\r\n\t\t\t: [];\r\n\r\n\t\t// Procesar datos de envío\r\n\t\tlet shippingData = null;\r\n\t\tif (order.shipping_data) {\r\n\t\t\t// Puede venir como string JSON\r\n\t\t\tif (typeof order.shipping_data === \"string\") {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tshippingData = JSON.parse(order.shipping_data);\r\n\t\t\t\t} catch (e) {\r\n\t\t\t\t\tconsole.error(\"Error al parsear shipping_data:\", e);\r\n\t\t\t\t\tshippingData = {};\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tshippingData = order.shipping_data;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\tid: order.id || 0,\r\n\t\t\torderNumber: order.order_number || order.orderNumber || `#${order.id}`,\r\n\t\t\tdate:\r\n\t\t\t\torder.created_at ||\r\n\t\t\t\torder.createdAt ||\r\n\t\t\t\torder.date ||\r\n\t\t\t\tnew Date().toISOString(),\r\n\t\t\tcustomer: {\r\n\t\t\t\tid: order.user_id || (order.user ? order.user.id : 0) || 0,\r\n\t\t\t\tname: customerName,\r\n\t\t\t\temail: customerEmail,\r\n\t\t\t},\r\n\t\t\tseller: {\r\n\t\t\t\tid: order.seller_id || (order.seller ? order.seller.id : 0) || 0,\r\n\t\t\t\tname: sellerName,\r\n\t\t\t},\r\n\t\t\ttotal: order.total || 0,\r\n\t\t\tstatus: order.status || \"pending\",\r\n\t\t\tpaymentStatus: order.payment_status || order.paymentStatus || \"pending\",\r\n\t\t\tpaymentMethod: order.payment_method || order.paymentMethod || \"N/A\",\r\n\t\t\titems: items,\r\n\t\t\tshippingData: shippingData,\r\n\t\t};\r\n\t}\r\n}\r\n\r\nexport default AdminOrderServiceAdapter;\r\n"],"names":["AdminOrderService","filters","response","ApiClient","API_ENDPOINTS","orders","pagination","error","orderId","data","reason","shippingInfo","AdminOrderServiceAdapter","apiFilters","order","orderDetails","status","stats","customerName","customerEmail","sellerName","items","item","shippingData","e"],"mappings":"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"}